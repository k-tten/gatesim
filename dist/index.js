/*! For license information please see index.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/Component.ts":(e,t,s)=>{s.r(t),s.d(t,{Component:()=>r});var n=s("./src/Reified.ts"),i=s("./src/WiringManager.ts");class r extends n.Reified{element;inputs;outputs;#e=new Map;#t=new Map;chip;constructor(e,{x:t,y:s}={x:0,y:0}){super(),this.chip=e,this.element=n.html`
            <div class="component">
                <div class="component-inputs">
                    ${Array(this.chip.inputs).fill('<button class="component-input-button">I</button>').join("")}
                </div>
                <p class="component-name">${this.chip.name}</p>
                <div class="component-outputs">
                    ${Array(this.chip.outputs).fill('<button class="component-output-button">O</button>').join("")}
                </div>
            </div>
        `,this.inputs=Array.from(this.element.querySelectorAll(".component-input-button")),this.outputs=Array.from(this.element.querySelectorAll(".component-output-button")),this.inputs.forEach((e=>{this.#e.set(e,new MutationObserver((()=>{const e=this.chip.evaluate(this.inputs.map((e=>e.classList.contains("activated"))));this.outputs.forEach(((t,s)=>{t.classList.toggle("activated",e[s])}))}))),this.#t.set(e,(t=>{t.preventDefault(),t.stopImmediatePropagation();const s=i.WiringManager.wires.findIndex((t=>t.to===e));s>=0&&i.WiringManager.wires.splice(s,1)}))})),this.move(t,s)}attach(){super.attach(),this.inputs.forEach((e=>{this.#e.get(e).observe(e,{attributeFilter:["class"],attributes:!0}),e.addEventListener("contextmenu",this.#t.get(e))}))}detach(){super.detach(),this.#e.forEach((e=>e.disconnect())),this.#t.forEach(((e,t)=>t.removeEventListener("contextmenu",e)))}}},"./src/DraggingManager.ts":(e,t,s)=>{s.r(t),s.d(t,{DraggingManager:()=>n});class n{static#s;static#n={x:-1,y:-1,ox:-1,oy:-1,down:!1};static#i=new Map;static watch(e,t=e){e.dataset.watched="true";const s=t=>{this.#s=e,this.#s.dataset.dragged="true",this.#s.style.cursor="grabbing";const s=this.#s.getBoundingClientRect(),n=this.#s.parentElement?.getBoundingClientRect()??new DOMRect;this.#n.ox=t.clientX-s.left+n.left,this.#n.oy=t.clientY-s.top+n.top};t.addEventListener("mousedown",s,{capture:!0}),this.#i.set(t,s)}static forget(e){const t=this.#i.get(e);if(!t)throw new Error("Element is not currently being watched.");delete e.dataset.watched,e.removeEventListener("mousedown",t,{capture:!0}),this.#i.delete(e)}static listen(){document.body.addEventListener("mousemove",this.#r),window.addEventListener("mousedown",this.#o),window.addEventListener("mouseup",this.#a)}static deafen(){document.body.removeEventListener("mousemove",this.#r),window.removeEventListener("mousedown",this.#o),window.removeEventListener("mouseup",this.#a)}static#r=e=>{this.#n.x=e.clientX,this.#n.y=e.clientY,this.#s&&(this.#s.style.left=this.#n.x-this.#n.ox+"px",this.#s.style.top=this.#n.y-this.#n.oy+"px")};static#o=e=>{this.#n.down=!0};static#a=()=>{this.#s&&document.querySelectorAll('[data-dragged="true"]').forEach((e=>{delete e.dataset.dragged,e.style.cursor=""})),this.#n.down=!1,this.#n.x=-1,this.#n.y=-1,this.#n.ox=-1,this.#n.oy=-1,this.#s=void 0}}},"./src/Input.ts":(e,t,s)=>{s.r(t),s.d(t,{Input:()=>i});var n=s("./src/Reified.ts");class i extends n.Reified{element;constructor({x:e,y:t}={x:0,y:0}){super(),this.element=n.html`<button class="board-input">I</button>`,this.move(e,t)}#c=()=>{this.element.classList.toggle("activated")};#u=e=>{e.preventDefault(),this.element.classList.toggle("activated")};attach(){super.attach(),this.element.addEventListener("click",this.#c),this.element.addEventListener("contextmenu",this.#u)}detach(){super.detach(),this.element.removeEventListener("click",this.#c),this.element.removeEventListener("contextmenu",this.#u)}}},"./src/MenuManager.ts":(e,t,s)=>{s.r(t),s.d(t,{MenuManager:()=>i});var n=s("./src/Reified.ts");class i{static#l=new Map;static use(e,t){const s=n.html`
            <div class="contextmenu">
                ${t.map((e=>Object.entries(e).map((([e,{label:t}])=>`<button class="${e}">${t}</button>`)).join(""))).join('<div class="br"></div>')}
            </div>
        `,i=new Map;t.forEach((e=>{Object.keys(e).forEach((t=>{const n=e[t].callback.bind(void 0);s.querySelector("."+t).addEventListener("click",n),s.querySelector("."+t).addEventListener("contextmenu",n),i.set(t,i)}))})),s.style.left="0px",s.style.top="0px",s.style.display="none",document.body.appendChild(s);const r=()=>{s.style.left="0px",s.style.top="0px",s.style.display="none"},o=e=>{e.preventDefault(),s.style.display="",s.style.left=e.clientX+"px",s.style.top=e.clientY+"px"},a=e=>{e.preventDefault(),s.style.left="0px",s.style.top="0px",s.style.display="none"};e.addEventListener("mousedown",r),e.addEventListener("contextmenu",o),s.addEventListener("click",a),s.addEventListener("contextmenu",a),this.#l.set(e,{menu:s,clicks:i,listeners:{mousedown:r,contextmenu:o,click:a}})}static remove(e){const{menu:t,clicks:s,listeners:n}=this.#l.get(e)??{};if(!t||!s||!n)throw new Error("Elements are not being affected.");e.removeEventListener("mousedown",n.mousedown),e.removeEventListener("contextmenu",n.contextmenu),t.removeEventListener("click",n.click),t.removeEventListener("contextmenu",n.click),Array.from(s).forEach((([e,s])=>{t.querySelector("."+e).removeEventListener("click",s),t.querySelector("."+e).removeEventListener("contextmenu",s)})),t.remove()}}},"./src/Output.ts":(e,t,s)=>{s.r(t),s.d(t,{Output:()=>r});var n=s("./src/Reified.ts"),i=s("./src/WiringManager.ts");class r extends n.Reified{element;#u=e=>{e.preventDefault(),e.stopImmediatePropagation();const t=i.WiringManager.wires.findIndex((e=>e.to===this.element));t>=0&&i.WiringManager.wires.splice(t,1)};constructor({x:e,y:t}={x:0,y:0}){super(),this.element=n.html`<button class="board-output">O</button>`,this.move(e,t)}attach(){super.attach(),this.element.addEventListener("contextmenu",this.#u)}detach(){super.detach(),this.element.removeEventListener("contextmenu",this.#u)}}},"./src/Reified.ts":(e,t,s)=>{function n(...e){const[t,...s]=e,n="string"==typeof t?t:t.reduce(((e,t,n)=>e+t+s[n]??""),"");return(new DOMParser).parseFromString(n,"text/html").body.childNodes[0]}function i(e){e.preventDefault()}s.r(t),s.d(t,{Reified:()=>r,html:()=>n,preventDefault:()=>i});class r{static root=document.querySelector(".reified-root");move(e,t){this.element.style.left=e+"px",this.element.style.top=t+"px"}attach(){r.root.append(this.element)}detach(){this.element.remove()}}},"./src/WiringManager.ts":(e,t,s)=>{s.r(t),s.d(t,{Wiring:()=>i,WiringManager:()=>r});var n=s("./src/canvas.ts");class i{from;to;constructor(e,t){this.from=e,this.to=t,new MutationObserver((()=>{t.classList.toggle("activated",e.classList.contains("activated"))})).observe(e,{attributeFilter:["class"],attributes:!0})}}class r{static wires=new Array;static render(){const e=(0,n.useCanvas)();this.wires.forEach((t=>{const s=t.from.getBoundingClientRect(),n=t.to.getBoundingClientRect();e.strokeStyle=t.from.classList.contains("activated")?"#ff2626":"#dedede",e.lineWidth=5,e.lineJoin="round",e.beginPath(),e.moveTo(s.x+s.width/2,s.y+s.height/2),e.lineTo(n.x+n.width/2,n.y+n.height/2),e.closePath(),e.stroke()}))}}},"./src/canvas.ts":(e,t,s)=>{s.r(t),s.d(t,{useCanvas:()=>i});const n=document.querySelector("canvas").getContext("2d");function i(){return n.canvas.width=window.innerWidth,n.canvas.height=window.innerHeight,n}},"./src/chips.ts":(e,t,s)=>{s.r(t),s.d(t,{AndGate:()=>i,Chip:()=>n,NotGate:()=>o,OrGate:()=>r});class n{name;inputs;outputs;constructor(e,t,s){this.name=e,this.inputs=t,this.outputs=s}evaluate(e){return this.output(e)}}class i extends n{constructor(){super("AND",2,1)}output([e,t]){return[e&&t]}}class r extends n{constructor(){super("OR",2,1)}output([e,t]){return[e||t]}}class o extends n{constructor(){super("NOT",1,1)}output([e]){return[!e]}}}},t={};function s(n){var i=t[n];if(void 0!==i)return i.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,s),r.exports}s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{s.r(n);var e=s("./src/chips.ts"),t=s("./src/Component.ts"),i=s("./src/DraggingManager.ts"),r=s("./src/Input.ts"),o=s("./src/MenuManager.ts"),a=s("./src/Output.ts"),c=s("./src/Reified.ts"),u=s("./src/WiringManager.ts");const l=new r.Input({x:100,y:100}),d=new r.Input({x:100,y:200}),m=new t.Component(new e.AndGate,{x:300,y:150}),h=new a.Output({x:500,y:150}),p=new Set([l,d,m,h]);i.DraggingManager.listen(),p.forEach((e=>{e.attach(),e instanceof t.Component&&i.DraggingManager.watch(e.element,e.element.querySelector(".component-name"))})),u.WiringManager.wires.push(new u.Wiring(l.element,m.inputs[0])),u.WiringManager.wires.push(new u.Wiring(d.element,m.inputs[1])),u.WiringManager.wires.push(new u.Wiring(m.outputs[0],h.element)),o.MenuManager.use(c.Reified.root,[{"insert-chip":{label:"Insert chip",callback:()=>{}}},{"new-input":{label:"New input",callback:()=>{}},"new-output":{label:"New output",callback:()=>{}}},{"new-chip":{label:"New chip from diagram",callback:()=>{}}},{"save-as":{label:"Save as file",callback:()=>{}}}]),function e(){u.WiringManager.render(),requestAnimationFrame(e)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,