/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/algebra/evaluate/evaluate.ts":
/*!******************************************!*\
  !*** ./src/algebra/evaluate/evaluate.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "evaluate": () => (/* binding */ evaluate)
/* harmony export */ });
/* harmony import */ var _parser_token__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/token */ "./src/algebra/parser/token.ts");

function evaluate(expr, values) {
    return new (class EvalExpr {
        eval(expr) {
            return expr.accept(this);
        }
        visitBinaryExpr(expr) {
            const lhs = expr.left.accept(this);
            const rhs = expr.right.accept(this);
            switch (expr.operator.type) {
                case _parser_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Or:
                    return lhs || rhs;
                case _parser_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Nor:
                    return !(lhs || rhs);
                case _parser_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.And:
                    return lhs && rhs;
                case _parser_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Nand:
                    return !(lhs && rhs);
                case _parser_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Xor:
                    return !!(+lhs ^ +rhs);
                case _parser_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Xnor:
                    return !(+lhs ^ +rhs);
                default:
                    throw new SyntaxError();
            }
        }
        visitGroupingExpr(expr) {
            return expr.expression.accept(this);
        }
        visitLiteralExpr(expr) {
            return expr.value;
        }
        visitUnaryExpr(expr) {
            if (expr.operator.type === _parser_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Not)
                return !expr.right.accept(this);
            throw new SyntaxError();
        }
        visitVariableExpr(expr) {
            if (expr.name.lexeme in values)
                return !!values[expr.name.lexeme];
            throw new SyntaxError();
        }
    })().eval(expr);
}


/***/ }),

/***/ "./src/algebra/index.ts":
/*!******************************!*\
  !*** ./src/algebra/index.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _evaluate_evaluate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./evaluate/evaluate */ "./src/algebra/evaluate/evaluate.ts");
/* harmony import */ var _parser_heuristics_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser/heuristics/operations */ "./src/algebra/parser/heuristics/operations.ts");
/* harmony import */ var _parser_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parser/parser */ "./src/algebra/parser/parser.ts");
/* harmony import */ var _parser_printer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parser/printer */ "./src/algebra/parser/printer.ts");
/* harmony import */ var _parser_scanner__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parser/scanner */ "./src/algebra/parser/scanner.ts");
/* harmony import */ var _solver_solver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./solver/solver */ "./src/algebra/solver/solver.ts");






// const lines = String.raw`
// a \neg b \neg c + \neg a b \neg c + \neg a \neg b c + a b c
// (a+b+c)
// 1 + 0
// (a + not a)
// not a
// not not a
// not not not a
// not not not not a
// not not not not not a
// 1 + 0
// 10
// (1 + 0)
// (10)
// (a)
// ((a))
// ((a) or ((b and c)) xor (0))(11)
// (not (a nand b))
// (((not (a nand b)) xor 1) and (a or not a))
// % comment % 1
// (((    (a nand b)) xor 1) and (a or not a))
// `
//     .split("\n")
//     .filter(Boolean);
// const lines = String.raw`
// c0b1a % multiplication should be sorted alphabetically and prioritize constants to back with 1 before 0 %
// c+0+b+1+a % same rules as above %
// c0b+ba+a1c % ab + 1ac + 0bc %
// (cd+ba1)(ca+db1) % (1ab + cd)(ac + 1db) %
// `
//     .split("\n")
//     .filter(Boolean);
// const lines = String.raw`
// (b or not b) % 1 %
// (not c and c) % 0 %
// not (not b xor a) % a xor b %
// not (a xnor not b) % a xor not b %
// ((a and not b) or (not a and b)) % a xor b %
// ((a and b) or (not a and not b)) % a xnor b %
// `
//     .split("\n")
//     .filter(Boolean);
// const lines = String.raw`
// (a or b) and c % lower precedence %
// (a and b) and c % same precedence %
// (a xor b) and c % higher precedence %
// a and (b or c) % lower precedence %
// a and (b and c) % same precedence %
// a and (b xor c) % higher precedence %
// (a and b) and (c and d)
// `
//     .split("\n")
//     .filter(Boolean);
// const lines = String.raw`
// a and a
// a or a
// a nand a
// a nor a
// a xor a
// a xnor a
// `
//     .split("\n")
//     .filter(Boolean);
// const lines = String.raw`
// x(ab + ac + d)
// `
//     .split("\n")
//     .filter(Boolean);
const lines = String.raw `
a \neg b \neg c + \neg a b \neg c + \neg a \neg b c + a b c
`
    .split("\n")
    .filter(Boolean);
// const lines = String.raw`
// a b \neg c + a \neg b c + \neg a b c + a b c
// `
//     .split("\n")
//     .filter(Boolean);
function show(source) {
    const tokens = new _parser_scanner__WEBPACK_IMPORTED_MODULE_4__.Scanner(source).scanTokens();
    let expr = new _parser_parser__WEBPACK_IMPORTED_MODULE_2__.Parser(tokens).parse();
    const steps = (0,_solver_solver__WEBPACK_IMPORTED_MODULE_5__.simplifyExpr)(expr, new _parser_heuristics_operations__WEBPACK_IMPORTED_MODULE_1__.TotalOperationsHeuristic());
    steps.forEach(({ description, expr }) => {
        console.log(description);
        console.log((0,_parser_printer__WEBPACK_IMPORTED_MODULE_3__.printExpr)(expr, { minimal: true, parenthesizeEverything: true }));
        console.log();
    });
    console.log("final result:", steps.at(-1).expr);
}
console.clear();
lines.forEach(show);
//@ts-ignore
globalThis.show = show;
//@ts-ignore
globalThis.parse = _parser_parser__WEBPACK_IMPORTED_MODULE_2__.parse;
//@ts-ignore
globalThis.evaluate = _evaluate_evaluate__WEBPACK_IMPORTED_MODULE_0__.evaluate;


/***/ }),

/***/ "./src/algebra/parser/expr.ts":
/*!************************************!*\
  !*** ./src/algebra/parser/expr.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BinaryExpr": () => (/* binding */ BinaryExpr),
/* harmony export */   "Expr": () => (/* binding */ Expr),
/* harmony export */   "GroupingExpr": () => (/* binding */ GroupingExpr),
/* harmony export */   "LiteralExpr": () => (/* binding */ LiteralExpr),
/* harmony export */   "UnaryExpr": () => (/* binding */ UnaryExpr),
/* harmony export */   "VariableExpr": () => (/* binding */ VariableExpr)
/* harmony export */ });
class Expr {
}
class BinaryExpr extends Expr {
    left;
    operator;
    right;
    constructor(left, operator, right) {
        super();
        this.left = left;
        this.operator = operator;
        this.right = right;
    }
    accept(visitor) {
        return visitor.visitBinaryExpr(this);
    }
    clone() {
        return new BinaryExpr(this.left.clone(), this.operator.clone(), this.right.clone());
    }
}
class GroupingExpr extends Expr {
    expression;
    constructor(expression) {
        super();
        this.expression = expression;
    }
    accept(visitor) {
        return visitor.visitGroupingExpr(this);
    }
    clone() {
        return new GroupingExpr(this.expression.clone());
    }
}
class LiteralExpr extends Expr {
    value;
    constructor(value) {
        super();
        this.value = value;
    }
    accept(visitor) {
        return visitor.visitLiteralExpr(this);
    }
    clone() {
        return new LiteralExpr(this.value);
    }
}
class UnaryExpr extends Expr {
    operator;
    right;
    constructor(operator, right) {
        super();
        this.operator = operator;
        this.right = right;
    }
    accept(visitor) {
        return visitor.visitUnaryExpr(this);
    }
    clone() {
        return new UnaryExpr(this.operator.clone(), this.right.clone());
    }
}
class VariableExpr extends Expr {
    name;
    constructor(name) {
        super();
        this.name = name;
    }
    accept(visitor) {
        return visitor.visitVariableExpr(this);
    }
    clone() {
        return new VariableExpr(this.name.clone());
    }
}


/***/ }),

/***/ "./src/algebra/parser/heuristics/operations.ts":
/*!*****************************************************!*\
  !*** ./src/algebra/parser/heuristics/operations.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TotalOperationsHeuristic": () => (/* binding */ TotalOperationsHeuristic)
/* harmony export */ });
/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../token */ "./src/algebra/parser/token.ts");

class TotalOperationsHeuristic {
    score(expr) {
        return expr.accept(this);
    }
    compare(a, b) {
        return a - b;
    }
    visitBinaryExpr(expr) {
        if ([_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Or, _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Nor, _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.And, _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Nand, _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Xor, _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Xnor].includes(expr.operator.type))
            return 1 + expr.left.accept(this) + expr.right.accept(this);
        return 0;
    }
    visitGroupingExpr(expr) {
        return expr.expression.accept(this);
    }
    visitLiteralExpr() {
        return 0;
    }
    visitUnaryExpr(expr) {
        if (expr.operator.type === _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Not)
            return 1 + expr.right.accept(this);
        return 0;
    }
    visitVariableExpr() {
        return 0;
    }
}


/***/ }),

/***/ "./src/algebra/parser/parser.ts":
/*!**************************************!*\
  !*** ./src/algebra/parser/parser.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Parser": () => (/* binding */ Parser),
/* harmony export */   "parse": () => (/* binding */ parse)
/* harmony export */ });
/* harmony import */ var _expr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./expr */ "./src/algebra/parser/expr.ts");
/* harmony import */ var _scanner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scanner */ "./src/algebra/parser/scanner.ts");
/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./token */ "./src/algebra/parser/token.ts");



const parse = (source) => new Parser(new _scanner__WEBPACK_IMPORTED_MODULE_1__.Scanner(source).scanTokens()).parse();
class Parser {
    tokens;
    #current = 0;
    constructor(tokens) {
        this.tokens = tokens;
    }
    parse() {
        this.#validateNestings();
        return this.#expression();
    }
    #expression() {
        return this.#or();
    }
    #or() {
        let expr = this.#and();
        while (this.#match(_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.Or, _token__WEBPACK_IMPORTED_MODULE_2__.TokenType.Nor)) {
            const operator = this.#previous();
            const right = this.#and();
            expr = new _expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr(expr, operator, right);
        }
        return expr;
    }
    #and() {
        let expr = this.#xor();
        while (this.#match(_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.And, _token__WEBPACK_IMPORTED_MODULE_2__.TokenType.Nand)) {
            const operator = this.#previous();
            const right = this.#xor();
            expr = new _expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr(expr, operator, right);
        }
        return expr;
    }
    #xor() {
        let expr = this.#not();
        while (this.#match(_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.Xor, _token__WEBPACK_IMPORTED_MODULE_2__.TokenType.Xnor)) {
            const operator = this.#previous();
            const right = this.#not();
            expr = new _expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr(expr, operator, right);
        }
        return expr;
    }
    #not() {
        if (this.#match(_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.Not)) {
            const operator = this.#previous();
            const right = this.#not();
            return new _expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr(operator, right);
        }
        return this.#primary();
    }
    #primary() {
        if (this.#match(_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.False))
            return new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(false);
        if (this.#match(_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.True))
            return new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(true);
        if (this.#match(_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.Variable))
            return new _expr__WEBPACK_IMPORTED_MODULE_0__.VariableExpr(this.#previous());
        if (this.#match(_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.LeftParen)) {
            const expr = this.#expression();
            this.#consume(_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.RightParen, "Expected closing parentheses after expression.");
            return new _expr__WEBPACK_IMPORTED_MODULE_0__.GroupingExpr(expr);
        }
        if (this.#match(_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.LeftBrack)) {
            const expr = this.#expression();
            this.#consume(_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.RightBrack, "Expected closing bracket after expression.");
            return new _expr__WEBPACK_IMPORTED_MODULE_0__.GroupingExpr(expr);
        }
        if (this.#match(_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.LeftBrace)) {
            const expr = this.#expression();
            this.#consume(_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.RightBrace, "Expected closing brace after expression.");
            return new _expr__WEBPACK_IMPORTED_MODULE_0__.GroupingExpr(expr);
        }
        throw new SyntaxError();
    }
    #consume(type, message) {
        if (this.#check(type))
            return this.#advance();
        throw new SyntaxError(message);
    }
    #match(...types) {
        for (const type of types) {
            if (this.#check(type)) {
                this.#advance();
                return true;
            }
        }
        return false;
    }
    #check(type) {
        if (this.#isAtEnd())
            return false;
        return this.#peek().type === type;
    }
    #advance() {
        if (!this.#isAtEnd())
            this.#current++;
        return this.#previous();
    }
    #isAtEnd() {
        return this.#peek().type === _token__WEBPACK_IMPORTED_MODULE_2__.TokenType.Eof;
    }
    #peek() {
        return this.tokens[this.#current];
    }
    #previous() {
        return this.tokens[this.#current - 1];
    }
    #validateNestings() {
        const stack = new Array();
        for (const token of this.tokens) {
            if (token.type === _token__WEBPACK_IMPORTED_MODULE_2__.TokenType.LeftParen ||
                token.type === _token__WEBPACK_IMPORTED_MODULE_2__.TokenType.LeftBrack ||
                token.type === _token__WEBPACK_IMPORTED_MODULE_2__.TokenType.LeftBrace)
                stack.push(token.type);
            if (token.type === _token__WEBPACK_IMPORTED_MODULE_2__.TokenType.RightParen ||
                token.type === _token__WEBPACK_IMPORTED_MODULE_2__.TokenType.RightBrack ||
                token.type === _token__WEBPACK_IMPORTED_MODULE_2__.TokenType.RightBrace) {
                const pair = stack.pop();
                if (!pair || token.type !== _token__WEBPACK_IMPORTED_MODULE_2__.tokenNestingPairs.get(pair))
                    throw new SyntaxError();
            }
        }
        if (stack.length)
            throw new SyntaxError();
    }
}


/***/ }),

/***/ "./src/algebra/parser/passes/constants.ts":
/*!************************************************!*\
  !*** ./src/algebra/parser/passes/constants.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConstantExpressionEvaluationPass": () => (/* binding */ ConstantExpressionEvaluationPass)
/* harmony export */ });
/* harmony import */ var _expr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../expr */ "./src/algebra/parser/expr.ts");
/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../token */ "./src/algebra/parser/token.ts");


// sole goal is to identify constant expressions and evaluate them beforehand
class ConstantExpressionEvaluationPass {
    pass(expr) {
        return expr.accept(this);
    }
    visitBinaryExpr(expr) {
        expr.left = expr.left.accept(this);
        expr.right = expr.right.accept(this);
        // both sides are constants so we just evaluate them here
        if (expr.left instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr && expr.right instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr) {
            const lhs = expr.left.value;
            const rhs = expr.right.value;
            switch (expr.operator.type) {
                case _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Or:
                    return new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(lhs || rhs);
                case _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Nor:
                    return new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(!(lhs || rhs));
                case _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.And:
                    return new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(lhs && rhs);
                case _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Nand:
                    return new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(!(lhs && rhs));
                case _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xor:
                    return new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(!!(+lhs ^ +rhs));
                case _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xnor:
                    return new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(!(+lhs ^ +rhs));
                default:
                    throw new SyntaxError();
            }
        }
        // we want the literal expression to be on the right side
        if (expr.left instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr)
            [expr.left, expr.right] = [expr.right, expr.left];
        // simplify this expression if one side is a constant
        if (expr.right instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr) {
            const lhs = expr.left;
            const rhs = expr.right.value;
            switch (expr.operator.type) {
                case _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Or:
                    // 1 or a is always 1
                    // 0 or a is always a
                    return rhs ? new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(true) : lhs;
                case _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Nor:
                    // 1 nor a is always 0
                    // 0 nor a is always not a
                    return rhs
                        ? new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(false)
                        : new _expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr(new _token__WEBPACK_IMPORTED_MODULE_1__.Token(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not, _token__WEBPACK_IMPORTED_MODULE_1__.lexemeForTokenType.get(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not), expr.operator.line, expr.operator.col), lhs);
                case _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.And:
                    return rhs ? lhs : new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(false);
                case _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Nand:
                    // 1 nand a is always not a
                    // 0 nand a is always 1
                    return rhs
                        ? new _expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr(new _token__WEBPACK_IMPORTED_MODULE_1__.Token(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not, _token__WEBPACK_IMPORTED_MODULE_1__.lexemeForTokenType.get(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not), expr.operator.line, expr.operator.col), lhs)
                        : new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(true);
                case _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xor:
                    // 1 xor a is always not a
                    // 0 xor a is always a
                    return rhs
                        ? new _expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr(new _token__WEBPACK_IMPORTED_MODULE_1__.Token(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not, _token__WEBPACK_IMPORTED_MODULE_1__.lexemeForTokenType.get(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not), expr.operator.line, expr.operator.col), lhs)
                        : lhs;
                case _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xnor:
                    // 1 xnor a is always a
                    // 0 xnor a is always not a
                    return rhs
                        ? lhs
                        : new _expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr(new _token__WEBPACK_IMPORTED_MODULE_1__.Token(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not, _token__WEBPACK_IMPORTED_MODULE_1__.lexemeForTokenType.get(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not), expr.operator.line, expr.operator.col), lhs);
                default:
                    throw new SyntaxError();
            }
        }
        return expr;
    }
    visitGroupingExpr(expr) {
        expr.expression = expr.expression.accept(this);
        return expr;
    }
    visitLiteralExpr(expr) {
        return expr;
    }
    visitUnaryExpr(expr) {
        expr.right = expr.right.accept(this);
        if (expr.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not && expr.right instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr)
            return new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(!expr.right.value);
        return expr;
    }
    visitVariableExpr(expr) {
        return expr;
    }
}


/***/ }),

/***/ "./src/algebra/parser/passes/expressions.ts":
/*!**************************************************!*\
  !*** ./src/algebra/parser/passes/expressions.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExpressionSimplificationPass": () => (/* binding */ ExpressionSimplificationPass),
/* harmony export */   "inverseGateLookup": () => (/* binding */ inverseGateLookup),
/* harmony export */   "precedence": () => (/* binding */ precedence)
/* harmony export */ });
/* harmony import */ var _expr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../expr */ "./src/algebra/parser/expr.ts");
/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../token */ "./src/algebra/parser/token.ts");
/* harmony import */ var _trees_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../trees/equal */ "./src/algebra/parser/trees/equal.ts");
/* harmony import */ var _normalizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./normalizer */ "./src/algebra/parser/passes/normalizer.ts");




var Precedence;
(function (Precedence) {
    Precedence[Precedence["OrNor"] = 0] = "OrNor";
    Precedence[Precedence["AndNand"] = 1] = "AndNand";
    Precedence[Precedence["XorXnor"] = 2] = "XorXnor";
    Precedence[Precedence["Not"] = 3] = "Not";
})(Precedence || (Precedence = {}));
const precedence = new Map([
    [_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not, Precedence.Not],
    [_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xor, Precedence.XorXnor],
    [_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xnor, Precedence.XorXnor],
    [_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.And, Precedence.AndNand],
    [_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Nand, Precedence.AndNand],
    [_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Or, Precedence.OrNor],
    [_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Nor, Precedence.OrNor],
]);
const inverseGateLookup = new Map([
    [_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xor, _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xnor],
    [_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.And, _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Nand],
    [_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Or, _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Nor],
].flatMap(([k, v]) => [
    [k, v],
    [v, k],
]));
// only recognizes direct representations of some gates and simplifies them
class ExpressionSimplificationPass {
    pass(expr) {
        return expr.accept(this);
    }
    visitBinaryExpr(expr) {
        expr.left = expr.left.accept(this);
        expr.right = expr.right.accept(this);
        // checking if left side has unnecessary nesting
        if (expr.left instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.GroupingExpr &&
            expr.left.expression instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr &&
            precedence.get(expr.left.expression.operator.type) >= precedence.get(expr.operator.type)) {
            expr.left = expr.left.expression;
        }
        // checking if right side has unnecessary nesting
        if (expr.right instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.GroupingExpr &&
            expr.right.expression instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr &&
            precedence.get(expr.right.expression.operator.type) >= precedence.get(expr.operator.type)) {
            expr.right = expr.right.expression;
        }
        if (expr.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Or) {
            // a or a -> a
            if ((0,_trees_equal__WEBPACK_IMPORTED_MODULE_2__.areTreesExactlyEqual)(new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.left), new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.right))) {
                return expr.left;
            }
            // a or not a -> 1
            if (expr.right instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr && expr.right.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not) {
                if ((0,_trees_equal__WEBPACK_IMPORTED_MODULE_2__.areTreesExactlyEqual)(new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.left), new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.right.right))) {
                    return new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(true);
                }
            }
            // a and not b or b and not a -> a xor b
            if (expr.left instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr &&
                expr.left.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.And &&
                expr.left.right instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr &&
                expr.left.right.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not &&
                expr.right instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr &&
                expr.right.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.And &&
                expr.right.right instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr &&
                expr.right.right.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not) {
                const a = expr.left.left;
                const b = expr.right.left;
                if ((0,_trees_equal__WEBPACK_IMPORTED_MODULE_2__.areTreesExactlyEqual)(new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(a), new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.right.right.right)) &&
                    (0,_trees_equal__WEBPACK_IMPORTED_MODULE_2__.areTreesExactlyEqual)(new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(b), new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.left.right.right))) {
                    return new _expr__WEBPACK_IMPORTED_MODULE_0__.GroupingExpr(new _expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr(a, new _token__WEBPACK_IMPORTED_MODULE_1__.Token(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xor, _token__WEBPACK_IMPORTED_MODULE_1__.lexemeForTokenType.get(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xor), expr.operator.line, expr.operator.col), b));
                }
            }
            // a and b or not a and not b -> a xnor b
            if (expr.left instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr &&
                expr.left.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.And &&
                expr.right instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr &&
                expr.right.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.And &&
                expr.right.left instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr &&
                expr.right.left.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not &&
                expr.right.right instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr &&
                expr.right.right.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not) {
                const a = expr.left.left;
                const b = expr.left.right;
                if ((0,_trees_equal__WEBPACK_IMPORTED_MODULE_2__.areTreesExactlyEqual)(new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(a), new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.right.left.right)) &&
                    (0,_trees_equal__WEBPACK_IMPORTED_MODULE_2__.areTreesExactlyEqual)(new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(b), new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.right.right.right))) {
                    return new _expr__WEBPACK_IMPORTED_MODULE_0__.GroupingExpr(new _expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr(a, new _token__WEBPACK_IMPORTED_MODULE_1__.Token(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xnor, _token__WEBPACK_IMPORTED_MODULE_1__.lexemeForTokenType.get(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xnor), expr.operator.line, expr.operator.col), b));
                }
            }
        }
        if (expr.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.And) {
            // a and a -> a
            if ((0,_trees_equal__WEBPACK_IMPORTED_MODULE_2__.areTreesExactlyEqual)(new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.left), new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.right))) {
                return expr.left;
            }
            // a and not a -> 0
            if (expr.right instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr && expr.right.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not) {
                if ((0,_trees_equal__WEBPACK_IMPORTED_MODULE_2__.areTreesExactlyEqual)(new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.left), new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.right.right))) {
                    return new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(false);
                }
            }
        }
        if (expr.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Nand) {
            // a nand a -> not a
            if ((0,_trees_equal__WEBPACK_IMPORTED_MODULE_2__.areTreesExactlyEqual)(new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.left), new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.right))) {
                return new _expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr(new _token__WEBPACK_IMPORTED_MODULE_1__.Token(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not, _token__WEBPACK_IMPORTED_MODULE_1__.lexemeForTokenType.get(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not), expr.operator.line, expr.operator.col), expr.left);
            }
        }
        if (expr.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Nor) {
            // a nor a -> not a
            if ((0,_trees_equal__WEBPACK_IMPORTED_MODULE_2__.areTreesExactlyEqual)(new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.left), new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.right))) {
                return new _expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr(new _token__WEBPACK_IMPORTED_MODULE_1__.Token(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not, _token__WEBPACK_IMPORTED_MODULE_1__.lexemeForTokenType.get(_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not), expr.operator.line, expr.operator.col), expr.left);
            }
        }
        if (expr.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xor) {
            // a xor a -> 0
            if ((0,_trees_equal__WEBPACK_IMPORTED_MODULE_2__.areTreesExactlyEqual)(new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.left), new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.right))) {
                return new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(false);
            }
        }
        if (expr.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xnor) {
            // a xnor a -> 1
            if ((0,_trees_equal__WEBPACK_IMPORTED_MODULE_2__.areTreesExactlyEqual)(new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.left), new _normalizer__WEBPACK_IMPORTED_MODULE_3__.ExpressionNormalizingPass().pass(expr.right))) {
                return new _expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(true);
            }
        }
        return expr;
    }
    visitGroupingExpr(expr) {
        expr.expression = expr.expression.accept(this);
        return expr;
    }
    visitLiteralExpr(expr) {
        return expr;
    }
    visitUnaryExpr(expr) {
        expr.right = expr.right.accept(this);
        // reducing unnecessary nested negations
        if (expr.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not) {
            if (expr.right instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr && expr.right.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not) {
                return expr.right.right;
            }
            if (expr.right instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.GroupingExpr) {
                if (expr.right.expression instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr) {
                    // converting negation of negated gates into normal gates
                    if ([_token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xnor, _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Nand, _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Nor].includes(expr.right.expression.operator.type)) {
                        const normalGate = inverseGateLookup.get(expr.right.expression.operator.type);
                        return new _expr__WEBPACK_IMPORTED_MODULE_0__.GroupingExpr(new _expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr(expr.right.expression.left, new _token__WEBPACK_IMPORTED_MODULE_1__.Token(normalGate, _token__WEBPACK_IMPORTED_MODULE_1__.lexemeForTokenType.get(normalGate), expr.right.expression.operator.line, expr.right.expression.operator.col), expr.right.expression.right));
                    }
                    if (expr.right.expression.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Xor) {
                        // not (a xor not b) -> a xor b
                        if (expr.right.expression.right instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr &&
                            expr.right.expression.right.operator.type === _token__WEBPACK_IMPORTED_MODULE_1__.TokenType.Not) {
                            return new _expr__WEBPACK_IMPORTED_MODULE_0__.GroupingExpr(new _expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr(expr.right.expression.left, expr.right.expression.operator, expr.right.expression.right.right));
                        }
                    }
                }
            }
        }
        return expr;
    }
    visitVariableExpr(expr) {
        return expr;
    }
}


/***/ }),

/***/ "./src/algebra/parser/passes/normalizer.ts":
/*!*************************************************!*\
  !*** ./src/algebra/parser/passes/normalizer.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExpressionNormalizingPass": () => (/* binding */ ExpressionNormalizingPass)
/* harmony export */ });
/* harmony import */ var _solver_factoring__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../solver/factoring */ "./src/algebra/solver/factoring.ts");
/* harmony import */ var _expr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../expr */ "./src/algebra/parser/expr.ts");
/* harmony import */ var _printer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../printer */ "./src/algebra/parser/printer.ts");
/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../token */ "./src/algebra/parser/token.ts");




const print = _printer__WEBPACK_IMPORTED_MODULE_2__.ExpressionPrinter.prototype.print.bind(new _printer__WEBPACK_IMPORTED_MODULE_2__.ExpressionPrinter({ minimal: true }));
// sort and re-order nodes to a standard so that later passes
// will have an easier time working with nested structures
class ExpressionNormalizingPass {
    pass(expr) {
        return expr.accept(this);
    }
    visitBinaryExpr(expr) {
        expr.left = expr.left.accept(this);
        expr.right = expr.right.accept(this);
        const level = (0,_solver_factoring__WEBPACK_IMPORTED_MODULE_0__.getAdjacentBinaryExprs)(expr);
        // sorting the expressions and assigning the re-ordered nodes back to the original
        if (level.length > 2) {
            level.sort((a, b) => (print(a) > print(b) ? -1 : 1));
            const sorted = (0,_solver_factoring__WEBPACK_IMPORTED_MODULE_0__.joinAdjacentExprs)(level, expr.operator.type);
            expr.left = sorted.left;
            expr.right = sorted.right;
        }
        else {
            if (print(expr.left) > print(expr.right))
                [expr.left, expr.right] = [expr.right, expr.left];
        }
        return expr;
    }
    visitGroupingExpr(expr) {
        expr.expression = expr.expression.accept(this);
        if (expr.expression instanceof _expr__WEBPACK_IMPORTED_MODULE_1__.GroupingExpr ||
            expr.expression instanceof _expr__WEBPACK_IMPORTED_MODULE_1__.VariableExpr ||
            expr.expression instanceof _expr__WEBPACK_IMPORTED_MODULE_1__.LiteralExpr ||
            // only applies to negation since it has high precedence
            (expr.expression instanceof _expr__WEBPACK_IMPORTED_MODULE_1__.UnaryExpr && expr.expression.operator.type === _token__WEBPACK_IMPORTED_MODULE_3__.TokenType.Not))
            return expr.expression;
        return expr;
    }
    visitLiteralExpr(expr) {
        return expr;
    }
    visitUnaryExpr(expr) {
        expr.right = expr.right.accept(this);
        return expr;
    }
    visitVariableExpr(expr) {
        return expr;
    }
}


/***/ }),

/***/ "./src/algebra/parser/passes/pipeline.ts":
/*!***********************************************!*\
  !*** ./src/algebra/parser/passes/pipeline.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pipeline": () => (/* binding */ pipeline)
/* harmony export */ });
/* harmony import */ var _expr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../expr */ "./src/algebra/parser/expr.ts");

function pipeline(...passes) {
    return (expr) => {
        let result = passes.reduce((expr, Pass) => new Pass().pass(expr), expr);
        // remove root level parentheses
        while (result instanceof _expr__WEBPACK_IMPORTED_MODULE_0__.GroupingExpr)
            result = result.expression;
        return result;
    };
}


/***/ }),

/***/ "./src/algebra/parser/printer.ts":
/*!***************************************!*\
  !*** ./src/algebra/parser/printer.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExpressionPrinter": () => (/* binding */ ExpressionPrinter),
/* harmony export */   "printExpr": () => (/* binding */ printExpr)
/* harmony export */ });
/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token */ "./src/algebra/parser/token.ts");

// accepts number for options for convenience when using in .map
function printExpr(expr, options) {
    return new ExpressionPrinter(typeof options === "number" ? undefined : options).print(expr);
}
class ExpressionPrinter {
    #options;
    constructor(options = { printConstantsAsNumbers: false }) {
        this.#options = {
            minimal: false,
            explicitGrouping: false,
            parenthesizeEverything: false,
            printConstantsAsNumbers: false,
            ...options,
        };
    }
    print(expr) {
        return expr.accept(this);
    }
    visitBinaryExpr(expr) {
        if (this.#options.minimal)
            return `${this.#options.parenthesizeEverything ? "(" : this.#options.explicitGrouping ? "<" : ""}${expr.left.accept(this)}${_token__WEBPACK_IMPORTED_MODULE_0__.symbolForTokenType.get(expr.operator.type)}${expr.right.accept(this)}${this.#options.parenthesizeEverything ? ")" : this.#options.explicitGrouping ? ">" : ""}`;
        return `${this.#options.parenthesizeEverything ? "(" : this.#options.explicitGrouping ? "<" : ""}${expr.left.accept(this)} ${expr.operator.lexeme} ${expr.right.accept(this)}${this.#options.parenthesizeEverything ? ")" : this.#options.explicitGrouping ? ">" : ""}`;
    }
    visitGroupingExpr(expr) {
        return `(${expr.expression.accept(this)})`;
    }
    visitLiteralExpr(expr) {
        if (this.#options.minimal || this.#options.printConstantsAsNumbers)
            return Number(expr.value).toString();
        return expr.value.toString();
    }
    visitUnaryExpr(expr) {
        if (this.#options.minimal)
            return `${_token__WEBPACK_IMPORTED_MODULE_0__.symbolForTokenType.get(expr.operator.type)}${expr.right.accept(this)}`;
        return `${expr.operator.lexeme}${this.#options.parenthesizeEverything ? "(" : this.#options.explicitGrouping ? "<" : " "}${expr.right.accept(this)}${this.#options.parenthesizeEverything ? ")" : this.#options.explicitGrouping ? ">" : ""}`;
    }
    visitVariableExpr(expr) {
        return expr.name.lexeme;
    }
}


/***/ }),

/***/ "./src/algebra/parser/scanner.ts":
/*!***************************************!*\
  !*** ./src/algebra/parser/scanner.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Scanner": () => (/* binding */ Scanner)
/* harmony export */ });
/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token */ "./src/algebra/parser/token.ts");

class Scanner {
    source;
    static #escapes = new Map([
        ["true", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.True],
        ["t", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.True],
        ["top", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.True],
        ["false", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.False],
        ["f", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.False],
        ["perp", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.False],
        ["not", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Not],
        ["neg", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Not],
        ["sim", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Not],
        ["or", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Or],
        ["plus", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Or],
        ["pipe", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Or],
        ["parallel", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Or],
        ["nor", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Nor],
        ["and", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.And],
        ["amp", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.And],
        ["nand", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Nand],
        ["xor", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Xor],
        ["oplus", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Xor],
        ["veebar", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Xor],
        ["nequiv", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Xor],
        ["xnor", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Xnor],
        ["odot", _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Xnor],
    ]);
    #tokens = [];
    #start = 0;
    #current = 0;
    #line = 1;
    #col = 1;
    constructor(source) {
        this.source = source;
    }
    scanTokens() {
        while (!this.#isAtEnd()) {
            this.#start = this.#current;
            this.#scanToken();
        }
        this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Eof, "\0");
        return this.#tokens;
    }
    #scanToken() {
        const c = this.#advance();
        const lexmap = new Map([
            ["(", () => this.#implicitMultiply(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.LeftParen)],
            [")", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.RightParen)],
            ["[", () => this.#implicitMultiply(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.LeftBrack)],
            ["]", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.RightBrack)],
            ["{", () => this.#implicitMultiply(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.LeftBrace)],
            ["}", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.RightBrace)],
            [" ", () => this.#col++],
            ["\r", () => this.#col++],
            ["\t", () => this.#col++],
            ["\v", () => this.#col++],
            ["\f", () => this.#col++],
            ["\n", () => (this.#line++, (this.#col = 1))],
            ["¬", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Not, "not", true)],
            ["+", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Or, "or", true)],
            ["|", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Or, "or", true)],
            ["∨", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Or, "or", true)],
            ["∥", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Or, "or", true)],
            ["⊽", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Nor, "nor", true)],
            ["*", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.And, "and", true)],
            ["&", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.And, "and", true)],
            ["∧", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.And, "and", true)],
            ["⊕", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Xor, "xor", true)],
            ["⊻", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Xor, "xor", true)],
            ["⊙", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Xnor, "xnor", true)],
            ["⊼", () => this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Nand, "nand", true)],
            ["1", () => this.#implicitMultiply(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.True, "true", true)],
            ["0", () => this.#implicitMultiply(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.False, "false", true)],
            ["\\", () => this.#processEscapeSequence()],
            ["%", () => this.#skipComment()],
        ]);
        (lexmap.get(c) ??
            (() => {
                if (this.#isSymbolChar(c))
                    return this.#symbol();
                throw new SyntaxError();
            }))();
    }
    #symbol() {
        while (this.#isSymbolChar(this.#peek()))
            this.#advance();
        const text = this.source.substring(this.#start, this.#current);
        const type = _token__WEBPACK_IMPORTED_MODULE_0__.tokenTypeForKeyword.get(text);
        if (!type) {
            // transform into products
            const parts = text.split(/(?=[01a-zA-Z])/);
            return parts.forEach((lexeme, i) => {
                if (i)
                    this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.And, "and", true);
                if (lexeme === "0")
                    return this.#implicitMultiply(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.False, lexeme);
                if (lexeme === "1")
                    return this.#implicitMultiply(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.True, lexeme);
                return this.#implicitMultiply(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Variable, lexeme);
            });
        }
        // unary operators should have implicit multiplication
        if (type === _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Not)
            return this.#implicitMultiply(type);
        return this.#addToken(type);
    }
    #processEscapeSequence() {
        while (this.#isSymbolChar(this.#peek()))
            this.#advance();
        // add one to skip over backslash
        const text = this.source.substring(this.#start + 1, this.#current);
        const type = Scanner.#escapes.get(text);
        // unrecognized escape sequence
        if (!type)
            throw new SyntaxError();
        // lookup text by token type
        const lexeme = _token__WEBPACK_IMPORTED_MODULE_0__.lexemeForTokenType.get(type);
        if (type === _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Not)
            return this.#implicitMultiply(type, lexeme, true);
        return this.#addToken(type, lexeme, true);
    }
    #skipComment() {
        // comments start with '%' and end with '%'
        while (this.#peek() !== "%" && !this.#isAtEnd())
            this.#advance();
        this.#advance();
    }
    // insert a multiplication before opening groups
    #implicitMultiply(type, lexeme, artificiallyInserted) {
        if (this.#tokens.length &&
            ![
                _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.LeftParen,
                _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.LeftBrack,
                _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.LeftBrace,
                _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Not,
                _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Or,
                _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Nor,
                _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.And,
                _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Nand,
                _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Xor,
                _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Xnor,
            ].includes(this.#tokens.at(-1)?.type ?? _token__WEBPACK_IMPORTED_MODULE_0__.TokenType.Eof))
            this.#addToken(_token__WEBPACK_IMPORTED_MODULE_0__.TokenType.And, "and", true);
        return this.#addToken(type, lexeme, artificiallyInserted);
    }
    #peek() {
        return this.source[this.#current] ?? "\0";
    }
    #advance() {
        return this.source[this.#current++];
    }
    #isSymbolChar(c) {
        // allow primes and double primes
        return /^[01a-zA-Z]$/.test(c) || c === "ʹ" || c === "ʺ";
    }
    #addToken(type, text = this.source.substring(this.#start, this.#current), artificiallyInserted = false) {
        this.#tokens.push(new _token__WEBPACK_IMPORTED_MODULE_0__.Token(type, text, this.#line, this.#col));
        // if it was artificially inserted we shouldn't change the column
        if (!artificiallyInserted)
            this.#col += text.length;
    }
    #isAtEnd() {
        return this.#current >= this.source.length;
    }
}


/***/ }),

/***/ "./src/algebra/parser/token.ts":
/*!*************************************!*\
  !*** ./src/algebra/parser/token.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Token": () => (/* binding */ Token),
/* harmony export */   "TokenType": () => (/* binding */ TokenType),
/* harmony export */   "lexemeForTokenType": () => (/* binding */ lexemeForTokenType),
/* harmony export */   "symbolForTokenType": () => (/* binding */ symbolForTokenType),
/* harmony export */   "tokenNestingPairs": () => (/* binding */ tokenNestingPairs),
/* harmony export */   "tokenTypeForKeyword": () => (/* binding */ tokenTypeForKeyword)
/* harmony export */ });
var TokenType;
(function (TokenType) {
    TokenType["LeftParen"] = "LeftParen";
    TokenType["RightParen"] = "RightParen";
    TokenType["LeftBrack"] = "LeftBrack";
    TokenType["RightBrack"] = "RightBrack";
    TokenType["LeftBrace"] = "LeftBrace";
    TokenType["RightBrace"] = "RightBrace";
    TokenType["Variable"] = "Variable";
    TokenType["Escape"] = "Escape";
    TokenType["Not"] = "Not";
    TokenType["Or"] = "Or";
    TokenType["Nor"] = "Nor";
    TokenType["And"] = "And";
    TokenType["Nand"] = "Nand";
    TokenType["Xor"] = "Xor";
    TokenType["Xnor"] = "Xnor";
    TokenType["True"] = "True";
    TokenType["False"] = "False";
    TokenType["Eof"] = "Eof";
})(TokenType || (TokenType = {}));
class Token {
    type;
    lexeme;
    line;
    col;
    constructor(type, lexeme, line, col) {
        this.type = type;
        this.lexeme = lexeme;
        this.line = line;
        this.col = col;
    }
    clone() {
        return new Token(this.type, this.lexeme, this.line, this.col);
    }
    static spoofed(type) {
        return new Token(type, lexemeForTokenType.get(type) ?? "\0", 0, 0);
    }
}
const tokenTypeForKeyword = new Map([
    ["true", TokenType.True],
    ["false", TokenType.False],
    ["not", TokenType.Not],
    ["or", TokenType.Or],
    ["nor", TokenType.Nor],
    ["and", TokenType.And],
    ["nand", TokenType.Nand],
    ["xor", TokenType.Xor],
    ["xnor", TokenType.Xnor],
]);
const lexemeForTokenType = new Map([...tokenTypeForKeyword].map(([k, v]) => [v, k]));
const symbolForTokenType = new Map([
    [TokenType.True, "1"],
    [TokenType.False, "0"],
    [TokenType.Not, "¬"],
    [TokenType.Or, "∨"],
    [TokenType.Nor, "⊽"],
    [TokenType.And, "∧"],
    [TokenType.Nand, "⊼"],
    [TokenType.Xor, "⊕"],
    [TokenType.Xnor, "⊙"],
]);
const tokenNestingPairs = new Map([
    [TokenType.RightParen, TokenType.LeftParen],
    [TokenType.RightBrack, TokenType.LeftBrack],
    [TokenType.RightBrace, TokenType.LeftBrace],
].flatMap(([k, v]) => [
    [k, v],
    [v, k],
]));


/***/ }),

/***/ "./src/algebra/parser/trees/equal.ts":
/*!*******************************************!*\
  !*** ./src/algebra/parser/trees/equal.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "areTreesExactlyEqual": () => (/* binding */ areTreesExactlyEqual)
/* harmony export */ });
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../circular */ "./src/circular.ts");
/* harmony import */ var _expr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../expr */ "./src/algebra/parser/expr.ts");


function areTreesExactlyEqual(a, b) {
    // compare by reference before doing expensive traversal
    if (a === b)
        return true;
    // not the same type of expression
    if (a.constructor !== b.constructor)
        return false;
    if (a instanceof _expr__WEBPACK_IMPORTED_MODULE_1__.BinaryExpr && b instanceof _expr__WEBPACK_IMPORTED_MODULE_1__.BinaryExpr) {
        if (a.operator.type !== b.operator.type)
            return false;
        return areTreesExactlyEqual(a.left, b.left) && areTreesExactlyEqual(a.right, b.right);
    }
    if (a instanceof _expr__WEBPACK_IMPORTED_MODULE_1__.GroupingExpr && b instanceof _expr__WEBPACK_IMPORTED_MODULE_1__.GroupingExpr) {
        return areTreesExactlyEqual(a.expression, b.expression);
    }
    if (a instanceof _expr__WEBPACK_IMPORTED_MODULE_1__.LiteralExpr && b instanceof _expr__WEBPACK_IMPORTED_MODULE_1__.LiteralExpr) {
        return a.value === b.value;
    }
    if (a instanceof _expr__WEBPACK_IMPORTED_MODULE_1__.UnaryExpr && b instanceof _expr__WEBPACK_IMPORTED_MODULE_1__.UnaryExpr) {
        if (a.operator.type !== b.operator.type)
            return false;
        return areTreesExactlyEqual(a.right, b.right);
    }
    if (a instanceof _expr__WEBPACK_IMPORTED_MODULE_1__.VariableExpr && b instanceof _expr__WEBPACK_IMPORTED_MODULE_1__.VariableExpr) {
        return a.name.lexeme === b.name.lexeme;
    }
    return (0,_circular__WEBPACK_IMPORTED_MODULE_0__.assertNever)();
}


/***/ }),

/***/ "./src/algebra/solver/factoring.ts":
/*!*****************************************!*\
  !*** ./src/algebra/solver/factoring.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "factoringSteps": () => (/* binding */ factoringSteps),
/* harmony export */   "getAdjacentBinaryExprs": () => (/* binding */ getAdjacentBinaryExprs),
/* harmony export */   "joinAdjacentExprs": () => (/* binding */ joinAdjacentExprs)
/* harmony export */ });
/* harmony import */ var _parser_expr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/expr */ "./src/algebra/parser/expr.ts");
/* harmony import */ var _parser_printer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/printer */ "./src/algebra/parser/printer.ts");
/* harmony import */ var _parser_token__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/token */ "./src/algebra/parser/token.ts");
/* harmony import */ var _parser_trees_equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../parser/trees/equal */ "./src/algebra/parser/trees/equal.ts");




// picks out adjacent expressions of the same type
// a and b and c -> [a, b, c]
function getAdjacentBinaryExprs(expr) {
    const adjacent = [];
    const queue = [expr.left, expr.right];
    while (queue.length) {
        const o = queue.pop();
        if (o instanceof _parser_expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr && o.operator.type === expr.operator.type) {
            queue.push(o.left, o.right);
        }
        else {
            adjacent.unshift(o);
        }
    }
    return adjacent;
}
// joins expressions with a specific operator
// [a, b, c], and -> a and b and c
function joinAdjacentExprs(exprs, type) {
    if (exprs.length < 2)
        return exprs[0];
    exprs = [...exprs];
    let expr = new _parser_expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr(exprs.pop(), _parser_token__WEBPACK_IMPORTED_MODULE_2__.Token.spoofed(type), exprs.pop());
    while (exprs.length)
        expr = new _parser_expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr(expr, _parser_token__WEBPACK_IMPORTED_MODULE_2__.Token.spoofed(type), exprs.pop());
    return expr;
}
// tries to create factoring steps
// ab + ac -> a(b + c)
function factoringSteps(step) {
    return new (class FactoringStepsWalker {
        #steps = [];
        #stack = [];
        walk(expr) {
            expr.accept(this);
            return this.#steps;
        }
        visitBinaryExpr(expr) {
            this.#stack.push(expr);
            expr.left.accept(this);
            expr.right.accept(this);
            if (expr.operator.type === _parser_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.Or) {
                const terms = getAdjacentBinaryExprs(expr);
                if (terms.length > 2) {
                    const productTerms = [];
                    terms.forEach((term) => {
                        if (term instanceof _parser_expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr && term.operator.type === _parser_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.And) {
                            const factors = getAdjacentBinaryExprs(term);
                            productTerms.push(factors);
                        }
                        if (term instanceof _parser_expr__WEBPACK_IMPORTED_MODULE_0__.VariableExpr) {
                            productTerms.push([term]);
                        }
                    });
                    // get all factors that are shared between the terms
                    const allCommonFactors = productTerms.flatMap((a, i) => {
                        return productTerms.flatMap((b, j) => {
                            if (i === j)
                                return [];
                            return [
                                ...a.filter((x) => b.some((y) => (0,_parser_trees_equal__WEBPACK_IMPORTED_MODULE_3__.areTreesExactlyEqual)(x, y))),
                                ...b.filter((x) => a.some((y) => (0,_parser_trees_equal__WEBPACK_IMPORTED_MODULE_3__.areTreesExactlyEqual)(x, y))),
                            ];
                        });
                    });
                    // filter out duplicate common factors
                    const commonFactors = allCommonFactors.filter((x, i) => allCommonFactors.findIndex((y) => (0,_parser_trees_equal__WEBPACK_IMPORTED_MODULE_3__.areTreesExactlyEqual)(x, y)) === i);
                    commonFactors.forEach((factor) => {
                        const affected = productTerms.filter((term) => term.some((x) => (0,_parser_trees_equal__WEBPACK_IMPORTED_MODULE_3__.areTreesExactlyEqual)(x, factor)));
                        const unaffected = productTerms.filter((term) => term.every((x) => !(0,_parser_trees_equal__WEBPACK_IMPORTED_MODULE_3__.areTreesExactlyEqual)(x, factor)));
                        // join the affected terms into a product, leaving out the factored part
                        // if the result is undefined then that means the whole term is the factor and we replace it with true
                        const factored = affected.map((term) => joinAdjacentExprs(term.filter((x) => !(0,_parser_trees_equal__WEBPACK_IMPORTED_MODULE_3__.areTreesExactlyEqual)(x, factor)), _parser_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.And) ?? new _parser_expr__WEBPACK_IMPORTED_MODULE_0__.LiteralExpr(true));
                        // join back unaffected terms into a product
                        const unfactored = unaffected.map((term) => joinAdjacentExprs(term, _parser_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.And));
                        const builtFactoredExpr = joinAdjacentExprs([
                            new _parser_expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr(factor, _parser_token__WEBPACK_IMPORTED_MODULE_2__.Token.spoofed(_parser_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.And), joinAdjacentExprs(factored, _parser_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.Or)),
                            ...unfactored,
                        ], _parser_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.Or);
                        // keep track of original expression
                        const original = expr.clone();
                        // mutate this one into the factored version
                        expr.left = builtFactoredExpr.left;
                        expr.operator = builtFactoredExpr.operator;
                        expr.right = builtFactoredExpr.right;
                        // add to possible steps
                        this.#steps.push({
                            description: "factor out " + (0,_parser_printer__WEBPACK_IMPORTED_MODULE_1__.printExpr)(factor),
                            expr: this.#stack[0].clone(),
                            from: step,
                        });
                        // reset to original
                        expr.left = original.left;
                        expr.operator = original.operator;
                        expr.right = original.right;
                    });
                }
            }
            this.#stack.pop();
        }
        visitGroupingExpr(expr) {
            this.#stack.push(expr);
            expr.expression.accept(this);
            this.#stack.pop();
        }
        visitLiteralExpr() { }
        visitUnaryExpr(expr) {
            this.#stack.push(expr);
            expr.right.accept(this);
            this.#stack.pop();
        }
        visitVariableExpr() { }
    })().walk(step.expr);
}


/***/ }),

/***/ "./src/algebra/solver/negations.ts":
/*!*****************************************!*\
  !*** ./src/algebra/solver/negations.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "negationExtractionSteps": () => (/* binding */ negationExtractionSteps),
/* harmony export */   "replaceChild": () => (/* binding */ replaceChild)
/* harmony export */ });
/* harmony import */ var _parser_expr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/expr */ "./src/algebra/parser/expr.ts");
/* harmony import */ var _parser_passes_expressions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/passes/expressions */ "./src/algebra/parser/passes/expressions.ts");
/* harmony import */ var _parser_token__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/token */ "./src/algebra/parser/token.ts");



function replaceChild(parent, disowned, adopted) {
    if (parent instanceof _parser_expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr) {
        if (parent.left === disowned) {
            const original = parent.left;
            return [
                () => {
                    parent.left = adopted;
                },
                () => {
                    parent.left = original;
                },
            ];
        }
        if (parent.right === disowned) {
            const original = parent.right;
            return [
                () => {
                    parent.right = adopted;
                },
                () => {
                    parent.right = original;
                },
            ];
        }
    }
    if (parent instanceof _parser_expr__WEBPACK_IMPORTED_MODULE_0__.GroupingExpr) {
        const original = parent.expression;
        return [
            () => {
                parent.expression = adopted;
            },
            () => {
                parent.expression = original;
            },
        ];
    }
    if (parent instanceof _parser_expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr) {
        const original = parent.right;
        return [
            () => {
                parent.right = adopted;
            },
            () => {
                parent.right = original;
            },
        ];
    }
    throw new Error();
}
// tries to expand negated gates
// a xnor b -> not (a xor b)
function negationExtractionSteps(step) {
    return new (class NegationExtractionWalker {
        #steps = [];
        #stack = [];
        walk(expr) {
            expr.accept(this);
            return this.#steps;
        }
        visitBinaryExpr(expr) {
            this.#stack.push(expr);
            expr.left.accept(this);
            expr.right.accept(this);
            if ([_parser_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.Xnor, _parser_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.Nand, _parser_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.Nor].includes(expr.operator.type)) {
                const a = expr.left;
                const b = expr.right;
                const extractedNegationExpr = new _parser_expr__WEBPACK_IMPORTED_MODULE_0__.UnaryExpr(_parser_token__WEBPACK_IMPORTED_MODULE_2__.Token.spoofed(_parser_token__WEBPACK_IMPORTED_MODULE_2__.TokenType.Not), new _parser_expr__WEBPACK_IMPORTED_MODULE_0__.BinaryExpr(a, _parser_token__WEBPACK_IMPORTED_MODULE_2__.Token.spoofed(_parser_passes_expressions__WEBPACK_IMPORTED_MODULE_1__.inverseGateLookup.get(expr.operator.type)), b));
                const description = "extract not from " + expr.operator.type.toLowerCase();
                if (this.#stack.length > 1) {
                    // add in the expression to the tree
                    const [redo, undo] = replaceChild(this.#stack.at(-1 - 1), this.#stack.at(-1), extractedNegationExpr);
                    redo();
                    this.#steps.push({
                        description,
                        expr: this.#stack[0].clone(),
                        from: step,
                    });
                    undo();
                }
                else {
                    // stack length is 1 so this is the root
                    this.#steps.push({
                        description,
                        expr: extractedNegationExpr,
                        from: step,
                    });
                }
            }
            this.#stack.pop();
        }
        visitGroupingExpr(expr) {
            this.#stack.push(expr);
            expr.expression.accept(this);
            this.#stack.pop();
        }
        visitLiteralExpr() { }
        visitUnaryExpr(expr) {
            this.#stack.push(expr);
            expr.right.accept(this);
            this.#stack.pop();
        }
        visitVariableExpr() { }
    })().walk(step.expr);
}


/***/ }),

/***/ "./src/algebra/solver/solver.ts":
/*!**************************************!*\
  !*** ./src/algebra/solver/solver.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "applyPasses": () => (/* binding */ applyPasses),
/* harmony export */   "simplifyExpr": () => (/* binding */ simplifyExpr),
/* harmony export */   "singlePass": () => (/* binding */ singlePass)
/* harmony export */ });
/* harmony import */ var _parser_passes_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/passes/constants */ "./src/algebra/parser/passes/constants.ts");
/* harmony import */ var _parser_passes_expressions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/passes/expressions */ "./src/algebra/parser/passes/expressions.ts");
/* harmony import */ var _parser_passes_normalizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/passes/normalizer */ "./src/algebra/parser/passes/normalizer.ts");
/* harmony import */ var _parser_passes_pipeline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../parser/passes/pipeline */ "./src/algebra/parser/passes/pipeline.ts");
/* harmony import */ var _parser_printer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parser/printer */ "./src/algebra/parser/printer.ts");
/* harmony import */ var _parser_trees_equal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../parser/trees/equal */ "./src/algebra/parser/trees/equal.ts");
/* harmony import */ var _factoring__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./factoring */ "./src/algebra/solver/factoring.ts");
/* harmony import */ var _negations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./negations */ "./src/algebra/solver/negations.ts");








const singlePass = (0,_parser_passes_pipeline__WEBPACK_IMPORTED_MODULE_3__.pipeline)(_parser_passes_normalizer__WEBPACK_IMPORTED_MODULE_2__.ExpressionNormalizingPass, _parser_passes_constants__WEBPACK_IMPORTED_MODULE_0__.ConstantExpressionEvaluationPass, _parser_passes_expressions__WEBPACK_IMPORTED_MODULE_1__.ExpressionSimplificationPass);
const applyPasses = (expr) => {
    let passed = singlePass(expr);
    // simplify until the passes do not change anything
    while (!(0,_parser_trees_equal__WEBPACK_IMPORTED_MODULE_5__.areTreesExactlyEqual)(expr, passed))
        [expr, passed] = [passed, singlePass(expr)];
    // at least one pass should be executed
    expr = singlePass(expr);
    return expr;
};
function simplifyExpr(expr, heuristic, depth = 10) {
    const visited = new Map([[(0,_parser_printer__WEBPACK_IMPORTED_MODULE_4__.printExpr)(expr, { explicitGrouping: true }), heuristic.score(expr)]]);
    const intitialStep = { description: "initial expression", expr };
    const stepsFor = new Map([[(0,_parser_printer__WEBPACK_IMPORTED_MODULE_4__.printExpr)(expr, { explicitGrouping: true }), [intitialStep]]]);
    const getSteps = (step) => [...(0,_factoring__WEBPACK_IMPORTED_MODULE_6__.factoringSteps)(step), ...(0,_negations__WEBPACK_IMPORTED_MODULE_7__.negationExtractionSteps)(step)];
    function performSteps(steps, path, depth) {
        if (depth <= 0)
            return;
        steps.forEach((step) => {
            // always simplify and reduce after every step
            const beforeSimplification = { ...step };
            step.expr = applyPasses(step.expr.clone());
            // insert a simplify and reduce step in between the generated steps
            const afterSimplification = {
                description: "simplify and reduce",
                expr: step.expr,
                from: beforeSimplification,
            };
            const serialized = (0,_parser_printer__WEBPACK_IMPORTED_MODULE_4__.printExpr)(step.expr, { explicitGrouping: true });
            // try not to overwrite the data if it already exists
            if (visited.has(serialized))
                return;
            visited.set(serialized, heuristic.score(step.expr));
            // add before and after to the path
            const newPath = path.concat(beforeSimplification, afterSimplification);
            stepsFor.set(serialized, newPath);
            performSteps(getSteps(step), newPath, depth - 1);
        });
    }
    performSteps(getSteps(intitialStep), [intitialStep], depth);
    // get the best one according to the given heuristic
    const best = Array.from(visited).sort(([, a], [, b]) => heuristic.compare(a, b))[0][0];
    const stepsToBest = stepsFor.get(best);
    // removing the previous step from each step object
    // since it's unnecessary in an array
    stepsToBest.forEach((step) => delete step.from);
    return stepsToBest;
}


/***/ }),

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./circular */ "./src/circular.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./src/constants.ts");
/* harmony import */ var _contextmenu_menu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contextmenu/menu */ "./src/contextmenu/menu.ts");
/* harmony import */ var _files__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./files */ "./src/files.ts");
/* harmony import */ var _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./keybinds/keybinds */ "./src/keybinds/keybinds.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _managers_ToastManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./managers/ToastManager */ "./src/managers/ToastManager.ts");
/* harmony import */ var _premade__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./premade */ "./src/premade/index.ts");
/* harmony import */ var _styling_attacher__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./styling/attacher */ "./src/styling/attacher.ts");










Object.assign(globalThis, _constants__WEBPACK_IMPORTED_MODULE_1__, _circular__WEBPACK_IMPORTED_MODULE_0__);
await (0,_styling_attacher__WEBPACK_IMPORTED_MODULE_8__.attachStyles)([
    "style",
    "component",
    "io",
    "contextmenu",
    "toast",
    "modals",
    "buttons",
    "darkmode",
    "quickpick",
    "settings",
]);
const hrefAsUrl = new URL(location.href);
const shouldLoadInline = hrefAsUrl.searchParams.get("inline");
if (shouldLoadInline) {
    try {
        const inlined = atob(shouldLoadInline);
        const { error, result: [settings, components, wirings], } = (0,_files__WEBPACK_IMPORTED_MODULE_3__.fromFile)(inlined);
        if (error)
            throw new Error(error);
        _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.setup({ keybinds: _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_4__.keybinds, menu: _contextmenu_menu__WEBPACK_IMPORTED_MODULE_2__.menu, initial: [components, wirings] });
        _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.applyRawSettings(settings);
    }
    catch {
        _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.setup({ keybinds: _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_4__.keybinds, menu: _contextmenu_menu__WEBPACK_IMPORTED_MODULE_2__.menu, save: "sandbox" });
        _managers_ToastManager__WEBPACK_IMPORTED_MODULE_6__.ToastManager.toast({
            message: "Diagram is not correctly encoded.",
            color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
            duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
        });
        hrefAsUrl.searchParams.delete("inline");
        history.pushState(undefined, "", hrefAsUrl);
    }
}
else {
    const save = hrefAsUrl.searchParams.get("save");
    if (save) {
        _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.setup({ keybinds: _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_4__.keybinds, menu: _contextmenu_menu__WEBPACK_IMPORTED_MODULE_2__.menu, save });
    }
    else {
        const shouldLoadPremade = hrefAsUrl.searchParams.get("premade");
        if (shouldLoadPremade && _premade__WEBPACK_IMPORTED_MODULE_7__.premade.has(shouldLoadPremade.trim().toLowerCase())) {
            _premade__WEBPACK_IMPORTED_MODULE_7__.premade.get(shouldLoadPremade.trim().toLowerCase())({ name: shouldLoadPremade.trim().toLowerCase() });
        }
        else {
            _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.setup({ keybinds: _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_4__.keybinds, menu: _contextmenu_menu__WEBPACK_IMPORTED_MODULE_2__.menu, save: "sandbox" });
            if (shouldLoadPremade) {
                _managers_ToastManager__WEBPACK_IMPORTED_MODULE_6__.ToastManager.toast({
                    message: "No premades were found with that name.",
                    color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                    duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                });
                hrefAsUrl.searchParams.delete("premade");
                history.pushState(undefined, "", hrefAsUrl);
            }
        }
    }
}

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } }, 1);

/***/ }),

/***/ "./src/augments/WatchedSet.ts":
/*!************************************!*\
  !*** ./src/augments/WatchedSet.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WatchedSet": () => (/* binding */ WatchedSet)
/* harmony export */ });
class WatchedSet extends Set {
    #adds = new Set();
    #deletes = new Set();
    #attemptedAdds = new Set();
    #attemptedDeletes = new Set();
    #locked = false;
    constructor(items) {
        super();
        if (items)
            this.addAll([...items]);
    }
    onAdd(run) {
        this.#adds.add(run);
        return this;
    }
    onDelete(run) {
        this.#deletes.add(run);
        return this;
    }
    onAttemptedAdd(run) {
        this.#attemptedAdds.add(run);
        return this;
    }
    onAttemptedDelete(run) {
        this.#attemptedDeletes.add(run);
        return this;
    }
    offAdd(run) {
        this.#adds.delete(run);
        return this;
    }
    offDelete(run) {
        this.#deletes.delete(run);
        return this;
    }
    offAttemptedAdd(run) {
        this.#attemptedAdds.delete(run);
        return this;
    }
    offAttemptedDelete(run) {
        this.#attemptedDeletes.delete(run);
        return this;
    }
    addAll(items) {
        items.forEach((item) => this.add(item));
        return this;
    }
    deleteAll(items) {
        return items.map((item) => this.delete(item));
    }
    add(item) {
        if (this.#locked) {
            const results = [...this.#attemptedAdds].map((run) => run.call(undefined, item, this));
            if (results.every((out) => !out))
                return this;
        }
        const results = [...this.#adds].map((run) => run.call(undefined, item, this));
        return results.some((out) => out === false) ? this : super.add(item);
    }
    delete(item) {
        if (this.#locked) {
            const results = [...this.#attemptedDeletes].map((run) => run.call(undefined, item, this));
            if (results.every((out) => !out))
                return false;
        }
        const results = [...this.#deletes].map((run) => run.call(undefined, item, this));
        return results.some((out) => out === false) ? false : super.delete(item);
    }
    lock() {
        this.#locked = true;
    }
    unlock() {
        this.#locked = false;
    }
    get locked() {
        return this.#locked;
    }
    clone(withListeners) {
        const set = new WatchedSet(this);
        if (withListeners) {
            this.#adds.forEach((run) => set.onAdd(run));
            this.#deletes.forEach((run) => set.onDelete(run));
        }
        return set;
    }
}


/***/ }),

/***/ "./src/cad/boss.ts":
/*!*************************!*\
  !*** ./src/cad/boss.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Boss": () => (/* binding */ Boss)
/* harmony export */ });
class Boss {
    #table;
    #worker;
    #ongens = new Set();
    constructor(table) {
        this.#table = table;
        // using ts extension because of webpack things
        this.#worker = new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u("src_cad_employee_ts"), __webpack_require__.b));
    }
    ongen(run) {
        this.#ongens.add(run);
        return this;
    }
    offgen(run) {
        this.#ongens.delete(run);
        return this;
    }
    async work() {
        // send table to worker
        this.#worker.postMessage(this.#table);
        return new Promise((resolve, reject) => {
            this.#worker.addEventListener("message", (e) => {
                const data = e.data;
                if (data.code === "ERROR") {
                    this.#worker.terminate();
                    return reject(data.error);
                }
                if (data.code === "MESSAGE") {
                    return this.#ongens.forEach((run) => run.call(undefined, data.message));
                }
                // promise is resolved when the worker is done
                if (data.code === "FINISHED") {
                    this.fired();
                    return resolve(data.message);
                }
            });
        });
    }
    async fired() {
        this.#worker.terminate();
    }
}


/***/ }),

/***/ "./src/cad/elements/CADOutput.ts":
/*!***************************************!*\
  !*** ./src/cad/elements/CADOutput.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CADOutput": () => (/* binding */ CADOutput)
/* harmony export */ });
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../reified/Reified */ "./src/reified/Reified.ts");

// nothing special just a custom element that wraps a div
// in case there is any special behavior to add
class CADOutput extends HTMLElement {
    element;
    constructor() {
        super();
        this.appendChild(_reified_Reified__WEBPACK_IMPORTED_MODULE_0__.html `<div class="cad-output"></div>`);
        this.element = this.querySelector(".cad-output");
    }
}
customElements.define("cad-output", CADOutput);


/***/ }),

/***/ "./src/cad/elements/TruthTable.ts":
/*!****************************************!*\
  !*** ./src/cad/elements/TruthTable.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TruthTable": () => (/* binding */ TruthTable)
/* harmony export */ });
/* harmony import */ var _managers_StorageManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../managers/StorageManager */ "./src/managers/StorageManager.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../reified/Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _files__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../files */ "./src/cad/files.ts");
/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../table */ "./src/cad/table.ts");




class TruthTable extends HTMLElement {
    /** small hack to do things after successful pastes */
    asynconpaste;
    #input;
    #highlight;
    #import;
    #export;
    #value = "";
    constructor() {
        super();
        this.appendChild(_reified_Reified__WEBPACK_IMPORTED_MODULE_1__.html `
            <div class="truth-table">
                <pre>
                    <code class="input-highlight"></code>
                </pre>
                <textarea class="table-input" spellcheck="false" autocapitalize="off"></textarea>
                <div class="buttons">
                    <button class="cad-control">Go</button>
                    <button class="import-table">Import table</button>
                    <button class="export-table">Export table</button>
                </div>
            </div>
        `);
        this.#input = this.querySelector(".table-input");
        this.#highlight = this.querySelector(".input-highlight");
        this.#import = this.querySelector(".import-table");
        this.#export = this.querySelector(".export-table");
        this.#import.addEventListener("click", async () => {
            const txt = await (0,_files__WEBPACK_IMPORTED_MODULE_2__.fileInput)();
            if (txt)
                this.value = txt;
        });
        this.#export.addEventListener("click", () => {
            (0,_files__WEBPACK_IMPORTED_MODULE_2__.downloadFile)([this.value]);
        });
        requestAnimationFrame(() => {
            if (!_managers_StorageManager__WEBPACK_IMPORTED_MODULE_0__.StorageManager.has("cad:input"))
                _managers_StorageManager__WEBPACK_IMPORTED_MODULE_0__.StorageManager.set("cad:input", "");
            this.value = _managers_StorageManager__WEBPACK_IMPORTED_MODULE_0__.StorageManager.get("cad:input");
            this.#highlightInput();
            this.#syncSizes();
            this.#input.addEventListener("keypress", (e) => {
                if (!["0", "1", ":", " "].includes(e.key) && e.code !== "Enter")
                    return e.preventDefault();
            });
            this.#input.addEventListener("paste", async (e) => {
                e.preventDefault();
                const text = await navigator.clipboard.readText();
                if (!/[^01:\s]/.test(text)) {
                    (0,_table__WEBPACK_IMPORTED_MODULE_3__.typeInTextarea)(text, this.#input);
                    this.#update();
                    this.#input.blur();
                    this.#input.focus();
                    this.asynconpaste?.();
                }
            });
            this.#input.addEventListener("change", () => {
                this.#update();
            });
            this.#input.addEventListener("input", () => {
                this.#update();
            });
            this.#input.addEventListener("scroll", () => {
                this.#syncSizes();
                this.#highlight.scrollTop = this.#input.scrollTop;
                this.#highlight.scrollLeft = this.#input.scrollLeft;
            });
            window.addEventListener("resize", () => {
                this.#syncSizes();
            });
        });
    }
    // added a flag so we avoid having to update the value
    #update({ value = true } = { value: true }) {
        if (value)
            this.value = this.#input.value;
        _managers_StorageManager__WEBPACK_IMPORTED_MODULE_0__.StorageManager.set("cad:input", this.#value);
        this.#highlightInput();
        this.#syncSizes();
    }
    #syncSizes() {
        const style = getComputedStyle(this.#input);
        this.#highlight.style.width = style.width;
        this.#highlight.style.maxHeight = style.height;
    }
    #highlightInput() {
        this.#highlight.innerHTML = this.#input.value
            .replaceAll(":", '<span style="color: gray;">:</span>')
            .replaceAll("0", '<span style="color: red;">0</span>')
            .replaceAll("1", '<span style="color: blue;">1</span>');
        // new lines at the end of the textarea don't actually show up so we need to manually add in the new line
        if (this.#input.value.endsWith("\n"))
            this.#highlight.innerHTML += `<span style="display: block; height: 16px;"></span>`;
    }
    get value() {
        return this.#value;
    }
    set value(v) {
        this.#value = v;
        this.#input.value = v;
        this.#update({ value: false });
    }
    get element() {
        return this.#input;
    }
}
customElements.define("truth-table", TruthTable);


/***/ }),

/***/ "./src/cad/files.ts":
/*!**************************!*\
  !*** ./src/cad/files.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "downloadFile": () => (/* binding */ downloadFile),
/* harmony export */   "fileInput": () => (/* binding */ fileInput)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _managers_ToastManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/ToastManager */ "./src/managers/ToastManager.ts");


/** asks user to input a file */
async function fileInput() {
    const input = Object.assign(document.createElement("input"), { type: "file" });
    input.click();
    const file = await new Promise((resolve) => {
        input.onchange = () => resolve(input.files?.[0] ?? undefined);
        input.onerror = () => resolve(undefined);
    });
    if (!file)
        return _managers_ToastManager__WEBPACK_IMPORTED_MODULE_1__.ToastManager.toast({
            message: "No file was provided.",
            color: _constants__WEBPACK_IMPORTED_MODULE_0__.ACTIVATED_CSS_COLOR,
            duration: _constants__WEBPACK_IMPORTED_MODULE_0__.TOAST_DURATION,
        });
    const reader = new FileReader();
    reader.readAsText(file);
    const raw = await new Promise((resolve) => {
        reader.onload = () => resolve(reader.result?.toString() ?? undefined);
        reader.onerror = () => resolve(undefined);
    });
    if (!raw)
        return _managers_ToastManager__WEBPACK_IMPORTED_MODULE_1__.ToastManager.toast({
            message: "Unable to read the file.",
            color: _constants__WEBPACK_IMPORTED_MODULE_0__.ACTIVATED_CSS_COLOR,
            duration: _constants__WEBPACK_IMPORTED_MODULE_0__.TOAST_DURATION,
        });
    return raw;
}
/** downloads the contents as a file */
async function downloadFile(contents) {
    Object.assign(document.createElement("a"), {
        href: URL.createObjectURL(new Blob(contents, {
            type: "text/plain",
        })),
        download: "table.gatesim.txt",
    }).click();
}


/***/ }),

/***/ "./src/cad/index.ts":
/*!**************************!*\
  !*** ./src/cad/index.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _managers_ToastManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/ToastManager */ "./src/managers/ToastManager.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _styling_attacher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../styling/attacher */ "./src/styling/attacher.ts");
/* harmony import */ var _boss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./boss */ "./src/cad/boss.ts");
/* harmony import */ var _elements_CADOutput__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./elements/CADOutput */ "./src/cad/elements/CADOutput.ts");
/* harmony import */ var _elements_TruthTable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./elements/TruthTable */ "./src/cad/elements/TruthTable.ts");
/* harmony import */ var _output__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./output */ "./src/cad/output.ts");
/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./table */ "./src/cad/table.ts");









await (0,_styling_attacher__WEBPACK_IMPORTED_MODULE_3__.attachStyles)(["style", "cad", "darkmode", "toast"]);
const table = _reified_Reified__WEBPACK_IMPORTED_MODULE_2__.html `<truth-table></truth-table>`;
const output = _reified_Reified__WEBPACK_IMPORTED_MODULE_2__.html `<cad-output></cad-output>`;
document.body.appendChild(table);
document.body.appendChild(output);
document.body.appendChild(_reified_Reified__WEBPACK_IMPORTED_MODULE_2__.html `<div class="toasts-container"></div>`);
await (0,_constants__WEBPACK_IMPORTED_MODULE_0__.DELAY)();
const hrefAsUrl = new URL(location.href);
const shouldLoadInline = hrefAsUrl.searchParams.get("inline");
if (shouldLoadInline) {
    try {
        const inlined = atob(shouldLoadInline);
        table.value = inlined;
    }
    catch {
        _managers_ToastManager__WEBPACK_IMPORTED_MODULE_1__.ToastManager.toast({
            message: "Table is not correctly encoded.",
            color: _constants__WEBPACK_IMPORTED_MODULE_0__.ACTIVATED_CSS_COLOR,
            duration: _constants__WEBPACK_IMPORTED_MODULE_0__.TOAST_DURATION,
        });
        hrefAsUrl.searchParams.delete("inline");
        history.pushState(undefined, "", hrefAsUrl);
    }
}
table.element.focus();
// can't move this into keypress event
// since we only want to display heuristics when the input has changed meaningfully
table.element.addEventListener("input", () => {
    (0,_output__WEBPACK_IMPORTED_MODULE_7__.displayHeuristics)(table, output);
});
// emptying the input doesn't trigger an input event
// have to manually clear output here
table.element.addEventListener("keypress", () => {
    if (!table.value.trim()) {
        output.element.innerHTML = "";
    }
});
table.asynconpaste = () => (0,_output__WEBPACK_IMPORTED_MODULE_7__.displayHeuristics)(table, output);
(0,_output__WEBPACK_IMPORTED_MODULE_7__.displayHeuristics)(table, output);
const control = table.querySelector(".cad-control");
let boss;
function finished() {
    table.element.disabled = false;
    if (boss) {
        boss.fired();
        boss = undefined;
    }
    control.textContent = "Go";
}
control.addEventListener("click", async () => {
    if (control.textContent === "Stop") {
        finished();
    }
    else {
        table.element.disabled = true;
        output.element.innerHTML = "";
        boss = new _boss__WEBPACK_IMPORTED_MODULE_4__.Boss((0,_table__WEBPACK_IMPORTED_MODULE_8__.parseTable)(table.value));
        const update = (message) => {
            output.element.textContent += (output.element.textContent ? "\n" : "") + message;
        };
        boss.ongen(update).work().then(update).catch(update).finally(finished);
        control.textContent = "Stop";
    }
});

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } }, 1);

/***/ }),

/***/ "./src/cad/output.ts":
/*!***************************!*\
  !*** ./src/cad/output.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "displayHeuristics": () => (/* binding */ displayHeuristics)
/* harmony export */ });
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./table */ "./src/cad/table.ts");


function displayHeuristics(table, output) {
    const heuristics = (0,_table__WEBPACK_IMPORTED_MODULE_1__.validTable)(table.value);
    output.element.innerHTML = "";
    if (heuristics.length) {
        // heuristics are sorted by row and message length
        // heuristics about the table are prioritized
        heuristics
            .sort((a, b) => {
            if (typeof a.row === "undefined" && typeof b.row === "undefined")
                return a.message > b.message ? -1 : 1;
            if (typeof a.row === "number" && typeof b.row === "number")
                return a.row - b.row;
            return typeof a.row === "undefined" ? -1 : 1;
        })
            .forEach((h) => {
            output.element.appendChild(Object.assign(_reified_Reified__WEBPACK_IMPORTED_MODULE_0__.html `<div class="cad-heuristic"></div>`, {
                textContent: `${typeof h.row === "undefined" ? "Table:" : `Row ${h.row}`} ${h.message}`,
            }));
        });
    }
    // disable the button if there are problems with the input
    table.querySelector(".cad-control").disabled = !!heuristics.length;
}


/***/ }),

/***/ "./src/cad/table.ts":
/*!**************************!*\
  !*** ./src/cad/table.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseTable": () => (/* binding */ parseTable),
/* harmony export */   "typeInTextarea": () => (/* binding */ typeInTextarea),
/* harmony export */   "validTable": () => (/* binding */ validTable)
/* harmony export */ });
/** utility to insert text where the caret is in a textarea */
function typeInTextarea(content, element) {
    const start = element.selectionStart;
    const end = element.selectionEnd;
    const text = element.value;
    const before = text.slice(0, start);
    const after = text.slice(end, text.length);
    element.value = before + content + after;
    element.selectionStart = start + content.length;
    element.selectionEnd = start + content.length;
    return element.focus();
}
// checks if the given input is a valid truth table
function validTable(string) {
    const heuristics = [];
    if (!string.trim())
        return heuristics;
    const rows = string
        .split("\n")
        .map((line) => line.trim())
        .filter(Boolean);
    // first row defines how many inputs and outputs the following rows should have
    const definedParts = rows[0].split(":");
    const definedInputs = definedParts[0]?.length ?? 0;
    const definedOutputs = definedParts[1]?.length ?? 0;
    rows.forEach((row, i) => {
        const rowParts = row.split(":");
        if (rowParts.length !== 2)
            heuristics.push({ row: i + 1, message: "needs exactly 2 columns" });
        const rowInputs = rowParts[0]?.length ?? 0;
        const rowOutputs = rowParts[1]?.length ?? 0;
        if (rowInputs !== definedInputs)
            heuristics.push({ row: i + 1, message: `must have ${definedInputs} inputs` });
        if (rowOutputs !== definedOutputs)
            heuristics.push({ row: i + 1, message: `must have ${definedOutputs} outputs` });
    });
    if (rows.length !== Math.pow(2, definedInputs))
        heuristics.push({
            message: `${Math.pow(2, definedInputs)} entries are needed for ${definedInputs} inputs, but ${rows.length} were given`,
        });
    const inputs = rows.map((row) => row.split(":")?.[0]).filter(Boolean);
    if (inputs.length !== new Set(inputs).size)
        heuristics.push({
            message: "can't have duplicate entries",
        });
    return heuristics;
}
/** converts a (hopefully valid) input into a truth table */
function parseTable(string) {
    return string
        .split("\n")
        .map((line) => line.trim())
        .filter(Boolean)
        .map((row) => row.split(":").map((io) => io.split("").map((bit) => !!+bit)));
}


/***/ }),

/***/ "./src/circular.ts":
/*!*************************!*\
  !*** ./src/circular.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IS_MAC_OS": () => (/* binding */ IS_MAC_OS),
/* harmony export */   "assertNever": () => (/* binding */ assertNever)
/* harmony export */ });
// this file only exists to break circular dependencies
const IS_MAC_OS = typeof navigator !== "undefined"
    ? [navigator.userAgentData?.platform, navigator.platform].some((platform) => platform?.toLowerCase().includes("mac") ?? false)
    : false;
function assertNever(...args) {
    if (!args.length)
        throw new Error();
    return args[0];
}


/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ACTIVATED_CSS_COLOR": () => (/* binding */ ACTIVATED_CSS_COLOR),
/* harmony export */   "APP_NAME": () => (/* binding */ APP_NAME),
/* harmony export */   "CHIP_COMPONENT_CSS_HEIGHT": () => (/* binding */ CHIP_COMPONENT_CSS_HEIGHT),
/* harmony export */   "CHIP_COMPONENT_CSS_WIDTH": () => (/* binding */ CHIP_COMPONENT_CSS_WIDTH),
/* harmony export */   "CHIP_INPUT_CSS_SIZE": () => (/* binding */ CHIP_INPUT_CSS_SIZE),
/* harmony export */   "CHIP_OUTPUT_CSS_SIZE": () => (/* binding */ CHIP_OUTPUT_CSS_SIZE),
/* harmony export */   "COUNTER_GENERATOR": () => (/* binding */ COUNTER_GENERATOR),
/* harmony export */   "DARKER_GRAY_CSS_COLOR": () => (/* binding */ DARKER_GRAY_CSS_COLOR),
/* harmony export */   "DARK_ACTIVATED_CSS_COLOR": () => (/* binding */ DARK_ACTIVATED_CSS_COLOR),
/* harmony export */   "DARK_GRAY_CSS_COLOR": () => (/* binding */ DARK_GRAY_CSS_COLOR),
/* harmony export */   "DELAY": () => (/* binding */ DELAY),
/* harmony export */   "EVEN_DARKER_GRAY_CSS_COLOR": () => (/* binding */ EVEN_DARKER_GRAY_CSS_COLOR),
/* harmony export */   "EVEN_LIGHTER_GRAY_CSS_COLOR": () => (/* binding */ EVEN_LIGHTER_GRAY_CSS_COLOR),
/* harmony export */   "GET_ACTIVATED_COLOR": () => (/* binding */ GET_ACTIVATED_COLOR),
/* harmony export */   "GET_BACKGROUND_CANVAS_CTX": () => (/* binding */ GET_BACKGROUND_CANVAS_CTX),
/* harmony export */   "GET_BIN_PERMS": () => (/* binding */ GET_BIN_PERMS),
/* harmony export */   "GET_FOREGROUND_CANVAS_CTX": () => (/* binding */ GET_FOREGROUND_CANVAS_CTX),
/* harmony export */   "GET_GRAY_COLOR": () => (/* binding */ GET_GRAY_COLOR),
/* harmony export */   "GRID_SIZE": () => (/* binding */ GRID_SIZE),
/* harmony export */   "INPUT_COMPONENT_CSS_SIZE": () => (/* binding */ INPUT_COMPONENT_CSS_SIZE),
/* harmony export */   "IN_DEBUG_MODE": () => (/* binding */ IN_DEBUG_MODE),
/* harmony export */   "KINDA_DARK_GRAY_CSS_COLOR": () => (/* binding */ KINDA_DARK_GRAY_CSS_COLOR),
/* harmony export */   "KINDA_LIGHT_GRAY_CSS_COLOR": () => (/* binding */ KINDA_LIGHT_GRAY_CSS_COLOR),
/* harmony export */   "LIGHTER_GRAY_CSS_COLOR": () => (/* binding */ LIGHTER_GRAY_CSS_COLOR),
/* harmony export */   "LIGHT_GRAY_CSS_COLOR": () => (/* binding */ LIGHT_GRAY_CSS_COLOR),
/* harmony export */   "LOCKED_FOR_TESTING": () => (/* binding */ LOCKED_FOR_TESTING),
/* harmony export */   "MID_GRAY_CSS_COLOR": () => (/* binding */ MID_GRAY_CSS_COLOR),
/* harmony export */   "NOT_REALLY_DARK_GRAY_CSS_COLOR": () => (/* binding */ NOT_REALLY_DARK_GRAY_CSS_COLOR),
/* harmony export */   "NO_RENDERING": () => (/* binding */ NO_RENDERING),
/* harmony export */   "ONLY_A_HINT_OF_DARK_GRAY_CSS_COLOR": () => (/* binding */ ONLY_A_HINT_OF_DARK_GRAY_CSS_COLOR),
/* harmony export */   "ORIGIN_POINT": () => (/* binding */ ORIGIN_POINT),
/* harmony export */   "OUTPUT_COMPONENT_CSS_SIZE": () => (/* binding */ OUTPUT_COMPONENT_CSS_SIZE),
/* harmony export */   "QUICKPICK_SIZE": () => (/* binding */ QUICKPICK_SIZE),
/* harmony export */   "ROUND_TO_NEAREST": () => (/* binding */ ROUND_TO_NEAREST),
/* harmony export */   "SCUFFED_UUID": () => (/* binding */ SCUFFED_UUID),
/* harmony export */   "SLIGHTLY_DARKER_GRAY_CSS_COLOR": () => (/* binding */ SLIGHTLY_DARKER_GRAY_CSS_COLOR),
/* harmony export */   "SUPER_GRAY_CSS_COLOR": () => (/* binding */ SUPER_GRAY_CSS_COLOR),
/* harmony export */   "TOAST_DURATION": () => (/* binding */ TOAST_DURATION)
/* harmony export */ });
/* harmony import */ var _managers_DarkmodeManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./managers/DarkmodeManager */ "./src/managers/DarkmodeManager.ts");
/* harmony import */ var _managers_ModalManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./managers/ModalManager */ "./src/managers/ModalManager.ts");


const INPUT_COMPONENT_CSS_SIZE = 24;
const OUTPUT_COMPONENT_CSS_SIZE = 24;
const CHIP_COMPONENT_CSS_WIDTH = 120;
const CHIP_COMPONENT_CSS_HEIGHT = 40;
const CHIP_INPUT_CSS_SIZE = 16;
const CHIP_OUTPUT_CSS_SIZE = 16;
const ORIGIN_POINT = Object.freeze({ x: 0, y: 0 });
const IN_DEBUG_MODE = new URL(location.href).searchParams.has("debug");
const NO_RENDERING = new URL(location.href).searchParams.has("norender");
const LOCKED_FOR_TESTING = () => _managers_ModalManager__WEBPACK_IMPORTED_MODULE_1__.ModalManager.alert("The diagram is currently locked. No changes can be made.");
const DELAY = (delay = 0) => new Promise((resolve) => setTimeout(resolve, delay));
const GET_BACKGROUND_CANVAS_CTX = () => document.querySelector("canvas.background-canvas").getContext("2d");
const GET_FOREGROUND_CANVAS_CTX = () => document.querySelector("canvas.foreground-canvas").getContext("2d");
const COUNTER_GENERATOR = function* (i = 0) {
    while (true)
        yield i++;
};
const SCUFFED_UUID = () => Date.now().toString(36) + Number(Date.now().toString().split("").reverse().join("")).toString(36);
const ROUND_TO_NEAREST = (x, n) => Math.round(x / n) * n;
const GET_ACTIVATED_COLOR = () => _managers_DarkmodeManager__WEBPACK_IMPORTED_MODULE_0__.DarkmodeManager.darkmodeEnabled ? DARK_ACTIVATED_CSS_COLOR : ACTIVATED_CSS_COLOR;
const GET_GRAY_COLOR = () => _managers_DarkmodeManager__WEBPACK_IMPORTED_MODULE_0__.DarkmodeManager.darkmodeEnabled ? ONLY_A_HINT_OF_DARK_GRAY_CSS_COLOR : LIGHT_GRAY_CSS_COLOR;
const GET_BIN_PERMS = (n) => Array.from({ length: Math.pow(2, n) }, (_, y) => Array.from({ length: n }, (_, x) => !!((y >> x) & 1)));
const ACTIVATED_CSS_COLOR = "#ff2626";
const DARK_ACTIVATED_CSS_COLOR = "#dd1111";
const EVEN_DARKER_GRAY_CSS_COLOR = "#0a0a0c";
const SLIGHTLY_DARKER_GRAY_CSS_COLOR = "#101012";
const DARKER_GRAY_CSS_COLOR = "#16161f";
const DARK_GRAY_CSS_COLOR = "#1c1c24";
const KINDA_DARK_GRAY_CSS_COLOR = "#24242e";
const NOT_REALLY_DARK_GRAY_CSS_COLOR = "#2e2e3f";
const ONLY_A_HINT_OF_DARK_GRAY_CSS_COLOR = "#3c3c4f";
const MID_GRAY_CSS_COLOR = "#40404f";
const SUPER_GRAY_CSS_COLOR = "#bbbbbb";
const KINDA_LIGHT_GRAY_CSS_COLOR = "#cdcdcd";
const LIGHT_GRAY_CSS_COLOR = "#dedede";
const LIGHTER_GRAY_CSS_COLOR = "#eaeaea";
const EVEN_LIGHTER_GRAY_CSS_COLOR = "#efefef";
const TOAST_DURATION = 2500;
const GRID_SIZE = 15;
const QUICKPICK_SIZE = 75;
const APP_NAME = (new URL(location.href).searchParams.get("app") ?? "sim").toLowerCase();


/***/ }),

/***/ "./src/contextmenu/debug.ts":
/*!**********************************!*\
  !*** ./src/contextmenu/debug.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debug": () => (/* binding */ debug)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _managers_CanvasManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/CanvasManager */ "./src/managers/CanvasManager.ts");
/* harmony import */ var _managers_ModalManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/ModalManager */ "./src/managers/ModalManager.ts");
/* harmony import */ var _managers_StorageManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/StorageManager */ "./src/managers/StorageManager.ts");
/* harmony import */ var _managers_ToastManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../managers/ToastManager */ "./src/managers/ToastManager.ts");





const debug = (_constants__WEBPACK_IMPORTED_MODULE_0__.IN_DEBUG_MODE
    ? [
        {
            "test-alert": {
                label: "Test alert",
                callback: async () => {
                    console.log(await _managers_ModalManager__WEBPACK_IMPORTED_MODULE_2__.ModalManager.alert("This is an alert."));
                },
            },
            "test-confirm": {
                label: "Test confirm",
                callback: async () => {
                    console.log(await _managers_ModalManager__WEBPACK_IMPORTED_MODULE_2__.ModalManager.confirm("This is a confirmation."));
                },
            },
            "test-prompt": {
                label: "Test prompt",
                callback: async () => {
                    console.log(await _managers_ModalManager__WEBPACK_IMPORTED_MODULE_2__.ModalManager.prompt("This is a prompt."));
                },
            },
            "test-toast": {
                label: "Test toast",
                callback: async () => {
                    console.log(await _managers_ToastManager__WEBPACK_IMPORTED_MODULE_4__.ToastManager.toast({
                        message: "This is a toast.",
                        color: _constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR,
                        duration: _constants__WEBPACK_IMPORTED_MODULE_0__.TOAST_DURATION,
                    }));
                },
            },
        },
        {
            "wipe-storage": {
                label: "Wipe storage",
                callback: () => {
                    _managers_StorageManager__WEBPACK_IMPORTED_MODULE_3__.StorageManager.storage.clear();
                },
            },
            "wipe-save": {
                label: "Wipe named save",
                callback: async () => {
                    const save = await _managers_ModalManager__WEBPACK_IMPORTED_MODULE_2__.ModalManager.prompt("");
                    if (save) {
                        if (!_managers_StorageManager__WEBPACK_IMPORTED_MODULE_3__.StorageManager.has("saves:" + save))
                            return _managers_ToastManager__WEBPACK_IMPORTED_MODULE_4__.ToastManager.toast({
                                message: "No saves exist with that name.",
                                color: _constants__WEBPACK_IMPORTED_MODULE_0__.ACTIVATED_CSS_COLOR,
                                duration: _constants__WEBPACK_IMPORTED_MODULE_0__.TOAST_DURATION,
                            });
                        _managers_StorageManager__WEBPACK_IMPORTED_MODULE_3__.StorageManager["delete"]("saves:" + save);
                        location.reload();
                    }
                },
            },
        },
        {
            "stop-render": {
                label: "Stop rendering",
                callback: () => {
                    _managers_CanvasManager__WEBPACK_IMPORTED_MODULE_1__.CanvasManager.stop();
                },
            },
            "start-render": {
                label: "Start rendering",
                callback: () => {
                    _managers_CanvasManager__WEBPACK_IMPORTED_MODULE_1__.CanvasManager.start();
                },
            },
        },
    ]
    : []);


/***/ }),

/***/ "./src/contextmenu/insert.ts":
/*!***********************************!*\
  !*** ./src/contextmenu/insert.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "insert": () => (/* binding */ insert)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _managers_ModalManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/ModalManager */ "./src/managers/ModalManager.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/SelectionManager */ "./src/managers/SelectionManager.ts");
/* harmony import */ var _managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../managers/TestingManager */ "./src/managers/TestingManager.ts");
/* harmony import */ var _reified_Component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reified/Component */ "./src/reified/Component.ts");
/* harmony import */ var _reified_Display__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../reified/Display */ "./src/reified/Display.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _reified_chips__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../reified/chips */ "./src/reified/chips.ts");









const insert = {
    "insert-component": {
        label: "Insert component",
        keybind: "A",
        callback: async (e, n) => {
            if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__.TestingManager.testing)
                return (0,_constants__WEBPACK_IMPORTED_MODULE_0__.LOCKED_FOR_TESTING)();
            const name = typeof n === "string" ? n : await _managers_ModalManager__WEBPACK_IMPORTED_MODULE_1__.ModalManager.prompt("Enter the component's name:");
            if (typeof name !== "string" || !name.trim())
                return;
            const chip = _reified_chips__WEBPACK_IMPORTED_MODULE_8__.chips.get(name.toUpperCase());
            const component = chip
                ? new _reified_Component__WEBPACK_IMPORTED_MODULE_5__.Component(Reflect.construct(chip, []), _constants__WEBPACK_IMPORTED_MODULE_0__.ORIGIN_POINT)
                : name.toUpperCase() === "DISPLAY"
                    ? new _reified_Display__WEBPACK_IMPORTED_MODULE_6__.Display()
                    : undefined;
            if (!component)
                return _managers_ModalManager__WEBPACK_IMPORTED_MODULE_1__.ModalManager.alert("No component was found with that name.");
            const selection = _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.clone(true);
            return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.pushHistory(() => {
                _reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active.add(component);
                if (_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active.has(component)) {
                    component.attach();
                    const { width, height } = getComputedStyle(component.element);
                    component.move({
                        x: e.clientX - parseFloat(width) / 2,
                        y: e.clientY - parseFloat(height) / 2,
                    });
                    _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.select(component);
                }
            }, () => {
                _reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active["delete"](component);
                component.detach();
                _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected = selection;
            });
        },
    },
};


/***/ }),

/***/ "./src/contextmenu/io.ts":
/*!*******************************!*\
  !*** ./src/contextmenu/io.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "io": () => (/* binding */ io)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/SelectionManager */ "./src/managers/SelectionManager.ts");
/* harmony import */ var _managers_TestingManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/TestingManager */ "./src/managers/TestingManager.ts");
/* harmony import */ var _reified_Input__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../reified/Input */ "./src/reified/Input.ts");
/* harmony import */ var _reified_Output__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reified/Output */ "./src/reified/Output.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");







const io = {
    "new-input": {
        label: "New input",
        keybind: "I",
        callback: (e) => {
            if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_3__.TestingManager.testing)
                return (0,_constants__WEBPACK_IMPORTED_MODULE_0__.LOCKED_FOR_TESTING)();
            const input = new _reified_Input__WEBPACK_IMPORTED_MODULE_4__.Input({
                x: e.clientX - _constants__WEBPACK_IMPORTED_MODULE_0__.INPUT_COMPONENT_CSS_SIZE / 2,
                y: e.clientY - _constants__WEBPACK_IMPORTED_MODULE_0__.INPUT_COMPONENT_CSS_SIZE / 2,
            });
            const selection = _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_2__.SelectionManager.selected.clone(true);
            return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.pushHistory(() => {
                _reified_Reified__WEBPACK_IMPORTED_MODULE_6__.Reified.active.add(input);
                if (_reified_Reified__WEBPACK_IMPORTED_MODULE_6__.Reified.active.has(input)) {
                    input.attach();
                    _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_2__.SelectionManager.select(input);
                }
            }, () => {
                _reified_Reified__WEBPACK_IMPORTED_MODULE_6__.Reified.active["delete"](input);
                input.detach();
                _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_2__.SelectionManager.selected = selection;
            });
        },
    },
    "new-output": {
        label: "New output",
        keybind: "O",
        callback: (e) => {
            if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_3__.TestingManager.testing)
                return (0,_constants__WEBPACK_IMPORTED_MODULE_0__.LOCKED_FOR_TESTING)();
            const output = new _reified_Output__WEBPACK_IMPORTED_MODULE_5__.Output({
                x: e.clientX - _constants__WEBPACK_IMPORTED_MODULE_0__.OUTPUT_COMPONENT_CSS_SIZE / 2,
                y: e.clientY - _constants__WEBPACK_IMPORTED_MODULE_0__.OUTPUT_COMPONENT_CSS_SIZE / 2,
            });
            const selection = _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_2__.SelectionManager.selected.clone(true);
            return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.pushHistory(() => {
                _reified_Reified__WEBPACK_IMPORTED_MODULE_6__.Reified.active.add(output);
                if (_reified_Reified__WEBPACK_IMPORTED_MODULE_6__.Reified.active.has(output)) {
                    output.attach();
                    _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_2__.SelectionManager.select(output);
                }
            }, () => {
                _reified_Reified__WEBPACK_IMPORTED_MODULE_6__.Reified.active["delete"](output);
                output.detach();
                _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_2__.SelectionManager.selected = selection;
            });
        },
    },
};


/***/ }),

/***/ "./src/contextmenu/menu.ts":
/*!*********************************!*\
  !*** ./src/contextmenu/menu.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "menu": () => (/* binding */ menu)
/* harmony export */ });
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug */ "./src/contextmenu/debug.ts");
/* harmony import */ var _insert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./insert */ "./src/contextmenu/insert.ts");
/* harmony import */ var _io__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./io */ "./src/contextmenu/io.ts");
/* harmony import */ var _serde__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./serde */ "./src/contextmenu/serde.ts");




const menu = [_insert__WEBPACK_IMPORTED_MODULE_1__.insert, _io__WEBPACK_IMPORTED_MODULE_2__.io, _serde__WEBPACK_IMPORTED_MODULE_3__.serde, ..._debug__WEBPACK_IMPORTED_MODULE_0__.debug];


/***/ }),

/***/ "./src/contextmenu/serde.ts":
/*!**********************************!*\
  !*** ./src/contextmenu/serde.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "serde": () => (/* binding */ serde)
/* harmony export */ });
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../circular */ "./src/circular.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _files__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../files */ "./src/files.ts");
/* harmony import */ var _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../keybinds/keybinds */ "./src/keybinds/keybinds.ts");
/* harmony import */ var _managers_ModalManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../managers/ModalManager */ "./src/managers/ModalManager.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _managers_StorageManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../managers/StorageManager */ "./src/managers/StorageManager.ts");
/* harmony import */ var _managers_ToastManager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../managers/ToastManager */ "./src/managers/ToastManager.ts");
/* harmony import */ var _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../managers/WiringManager */ "./src/managers/WiringManager.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./menu */ "./src/contextmenu/menu.ts");











const serde = {
    "save-to": {
        label: "Save with name",
        keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⌘ S" : "Ctrl S",
        callback: async () => {
            const save = await _managers_ModalManager__WEBPACK_IMPORTED_MODULE_4__.ModalManager.prompt("What should be the name of this save?");
            if (typeof save !== "string")
                return;
            await _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.saveTo(save);
            const hrefAsUrl = new URL(location.href);
            hrefAsUrl.searchParams.set("save", save);
            history.pushState(undefined, "", hrefAsUrl);
        },
    },
    "load-from": {
        label: "Load from saves",
        keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⌘ O" : "Ctrl O",
        callback: async () => {
            const save = await _managers_ModalManager__WEBPACK_IMPORTED_MODULE_4__.ModalManager.prompt("Which save would you like to load?");
            if (typeof save !== "string")
                return;
            if (!_managers_StorageManager__WEBPACK_IMPORTED_MODULE_6__.StorageManager.has("saves:" + save))
                return _managers_ModalManager__WEBPACK_IMPORTED_MODULE_4__.ModalManager.alert("No save was found with that name.");
            _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.reset();
            _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.setup({ keybinds: _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_3__.keybinds, menu: _menu__WEBPACK_IMPORTED_MODULE_10__.menu, save });
            const hrefAsUrl = new URL(location.href);
            hrefAsUrl.searchParams.set("save", save);
            history.pushState(undefined, "", hrefAsUrl);
        },
    },
    "save-as": {
        label: "Save as file",
        keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ ⌘ S" : "Ctrl Shift S",
        callback: () => {
            Object.assign(document.createElement("a"), {
                href: URL.createObjectURL(new Blob([(0,_files__WEBPACK_IMPORTED_MODULE_2__.saveDiagram)([..._reified_Reified__WEBPACK_IMPORTED_MODULE_9__.Reified.active], [..._managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires])], {
                    type: "application/json",
                })),
                download: `${_managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.savedName ?? "sandbox"}.gatesim.json`,
            }).click();
        },
    },
    "import-from": {
        label: "Import from file",
        keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ ⌘ O" : "Ctrl Shift O",
        callback: async () => {
            const input = Object.assign(document.createElement("input"), { type: "file" });
            input.click();
            const file = await new Promise((resolve) => {
                input.onchange = () => resolve(input.files?.[0] ?? undefined);
                input.onerror = () => resolve(undefined);
            });
            if (!file)
                return _managers_ToastManager__WEBPACK_IMPORTED_MODULE_7__.ToastManager.toast({
                    message: "No file was provided.",
                    color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                    duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                });
            const reader = new FileReader();
            reader.readAsText(file);
            const raw = await new Promise((resolve) => {
                reader.onload = () => resolve(reader.result?.toString() ?? undefined);
                reader.onerror = () => resolve(undefined);
            });
            if (!raw)
                return _managers_ToastManager__WEBPACK_IMPORTED_MODULE_7__.ToastManager.toast({
                    message: "Unable to read the file.",
                    color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                    duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                });
            const { error, result: [settings, components, wires], } = (0,_files__WEBPACK_IMPORTED_MODULE_2__.fromFile)(raw);
            if (error)
                return _managers_ToastManager__WEBPACK_IMPORTED_MODULE_7__.ToastManager.toast({
                    message: error,
                    color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                    duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                });
            _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.reset();
            const save = file.name.split(".").slice(0, -1).join(".");
            _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.setup({
                keybinds: _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_3__.keybinds,
                menu: _menu__WEBPACK_IMPORTED_MODULE_10__.menu,
                save: save.endsWith(".gatesim") ? save.slice(0, -".gatesim".length) : save,
                initial: [components, wires],
                overrideSaveIfExists: true,
                settings: {},
            });
            _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.applyRawSettings(settings);
            _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.forceSave();
        },
    },
};


/***/ }),

/***/ "./src/files.ts":
/*!**********************!*\
  !*** ./src/files.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromFile": () => (/* binding */ fromFile),
/* harmony export */   "saveDiagram": () => (/* binding */ saveDiagram)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./src/constants.ts");
/* harmony import */ var _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./managers/DraggingManager */ "./src/managers/DraggingManager.ts");
/* harmony import */ var _managers_ToastManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./managers/ToastManager */ "./src/managers/ToastManager.ts");
/* harmony import */ var _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./managers/WiringManager */ "./src/managers/WiringManager.ts");
/* harmony import */ var _reified_Component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reified/Component */ "./src/reified/Component.ts");
/* harmony import */ var _reified_Display__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reified/Display */ "./src/reified/Display.ts");
/* harmony import */ var _reified_Input__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reified/Input */ "./src/reified/Input.ts");
/* harmony import */ var _reified_Output__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./reified/Output */ "./src/reified/Output.ts");
/* harmony import */ var _reified_chips__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./reified/chips */ "./src/reified/chips.ts");









function saveDiagram(components, wires) {
    const id = (0,_constants__WEBPACK_IMPORTED_MODULE_0__.COUNTER_GENERATOR)();
    const ids = new Map();
    const data = {
        settings: {
            ["DraggingManager.snapToGrid"]: _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_1__.DraggingManager.snapToGrid,
        },
        components: components.map((component, reified) => {
            if (component instanceof _reified_Input__WEBPACK_IMPORTED_MODULE_6__.Input) {
                ids.set(component.element, id.next().value);
                return {
                    reified,
                    permanent: component.permanence,
                    type: "INPUT",
                    activated: component.element.classList.contains("activated"),
                    id: ids.get(component.element),
                    x: parseFloat(component.element.style.left),
                    y: parseFloat(component.element.style.top),
                };
            }
            if (component instanceof _reified_Output__WEBPACK_IMPORTED_MODULE_7__.Output) {
                ids.set(component.element, id.next().value);
                return {
                    reified,
                    permanent: component.permanence,
                    type: "OUTPUT",
                    activated: component.element.classList.contains("activated"),
                    id: ids.get(component.element),
                    x: parseFloat(component.element.style.left),
                    y: parseFloat(component.element.style.top),
                };
            }
            if (component instanceof _reified_Component__WEBPACK_IMPORTED_MODULE_4__.Component) {
                return {
                    reified,
                    permanent: component.permanence,
                    type: "COMPONENT",
                    name: component.chip.name,
                    inputs: component.inputs.map((i) => {
                        ids.set(i, id.next().value);
                        return { id: ids.get(i), activated: i.classList.contains("activated") };
                    }),
                    outputs: component.outputs.map((o) => {
                        ids.set(o, id.next().value);
                        return { id: ids.get(o), activated: o.classList.contains("activated") };
                    }),
                    x: parseFloat(component.element.style.left),
                    y: parseFloat(component.element.style.top),
                    angle: component.angle,
                    complementary: component.complementary,
                    joins: component.joins,
                };
            }
            if (component instanceof _reified_Display__WEBPACK_IMPORTED_MODULE_5__.Display) {
                return {
                    reified,
                    permanent: component.permanence,
                    type: "DISPLAY",
                    inputs: component.inputs.map((i) => {
                        ids.set(i, id.next().value);
                        return { id: ids.get(i), activated: i.classList.contains("activated") };
                    }),
                    outputs: component.outputs.map((o) => {
                        ids.set(o, id.next().value);
                        return { id: ids.get(o), activated: o.classList.contains("activated") };
                    }),
                    radix: component.radix,
                    x: parseFloat(component.element.style.left),
                    y: parseFloat(component.element.style.top),
                    angle: component.angle,
                };
            }
            _managers_ToastManager__WEBPACK_IMPORTED_MODULE_2__.ToastManager.toast({
                message: "Unable to serialize diagram.",
                color: _constants__WEBPACK_IMPORTED_MODULE_0__.ACTIVATED_CSS_COLOR,
                duration: _constants__WEBPACK_IMPORTED_MODULE_0__.TOAST_DURATION,
            });
            throw new Error("Unknown Reified component type.");
        }),
        wires: wires
            .filter((wire) => !wire.destroyed)
            .map((wire) => ({
            from: ids.get(wire.from),
            to: ids.get(wire.to),
        })),
    };
    return JSON.stringify(data, undefined, _constants__WEBPACK_IMPORTED_MODULE_0__.IN_DEBUG_MODE ? 4 : undefined);
}
function fromFile(file) {
    try {
        const data = JSON.parse(file);
        validate(data);
        const elements = new Map();
        const reified = data.components.map((raw) => {
            if (raw.type === "INPUT") {
                const input = new _reified_Input__WEBPACK_IMPORTED_MODULE_6__.Input(raw);
                input.element.classList.toggle("activated", raw.activated);
                elements.set(raw.id, input.element);
                return raw.permanent ? input.permanent() : input;
            }
            if (raw.type === "OUTPUT") {
                const output = new _reified_Output__WEBPACK_IMPORTED_MODULE_7__.Output(raw);
                output.element.classList.toggle("activated", raw.activated);
                elements.set(raw.id, output.element);
                return raw.permanent ? output.permanent() : output;
            }
            if (raw.type === "DISPLAY") {
                const display = new _reified_Display__WEBPACK_IMPORTED_MODULE_5__.Display(raw, raw.inputs.length, raw.radix).rotate(raw.angle);
                display.inputs.forEach((input, index) => {
                    input.classList.toggle("activated", raw.inputs[index].activated);
                    elements.set(raw.inputs[index].id, input);
                });
                display.outputs.forEach((output, index) => {
                    output.classList.toggle("activated", raw.outputs[index].activated);
                    elements.set(raw.outputs[index].id, output);
                });
                return raw.permanent ? display.permanent() : display;
            }
            const component = new _reified_Component__WEBPACK_IMPORTED_MODULE_4__.Component(new (_reified_chips__WEBPACK_IMPORTED_MODULE_8__.chips.get(raw.name))(), raw, raw.complementary, raw.joins).rotate(raw.angle);
            component.inputs.forEach((input, index) => {
                input.classList.toggle("activated", raw.inputs[index].activated);
                elements.set(raw.inputs[index].id, input);
            });
            component.outputs.forEach((output, index) => {
                output.classList.toggle("activated", raw.outputs[index].activated);
                elements.set(raw.outputs[index].id, output);
            });
            return raw.permanent ? component.permanent() : component;
        });
        const wires = data.wires.map(({ from, to }) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(elements.get(from), elements.get(to)));
        return { result: [data.settings, reified, wires], error: undefined };
    }
    catch (e) {
        if (e instanceof Error)
            return { error: e.message, result: [] };
        return { error: "Failed to process file.", result: [] };
    }
}
// giant mess to make sure the provided data matches the expected type
function validate(data) {
    if (!data || typeof data !== "object")
        throw new Error("Data is not an object.");
    if (!("settings" in data))
        throw new Error("Data is missing project settings.");
    if (typeof data.settings !== "object" || !data.settings)
        throw new Error("Project settings should be an object.");
    if (!("components" in data))
        throw new Error("Data is missing components.");
    if (!Array.isArray(data.components))
        throw new Error("Components data is not an array.");
    if (!("wires" in data))
        throw new Error("Data is missing wires.");
    if (!Array.isArray(data.wires))
        throw new Error("Wires data is not an array.");
    if (!("DraggingManager.snapToGrid" in data.settings))
        throw new Error("Missing setting 'DraggingManager.snapToGrid'.");
    for (const component of data.components) {
        if (!component || typeof component !== "object")
            throw new Error("Component data must an object.");
        if (!("reified" in component))
            throw new Error("Components data is missing reified id.");
        if (typeof component.reified !== "number")
            throw new Error("Reified id must be a number.");
        if (!("permanent" in component))
            throw new Error("Components data is missing permanence status.");
        if (typeof component.permanent !== "boolean")
            throw new Error("Component permanence must be a boolean.");
        if (!("type" in component))
            throw new Error("Components data is missing a type.");
        if (typeof component.type !== "string" || !["INPUT", "OUTPUT", "COMPONENT", "DISPLAY"].includes(component.type))
            throw new Error("Invalid component type.");
        if (!("x" in component))
            throw new Error("Components data is missing a x coordinate.");
        if (typeof component.x !== "number")
            throw new Error("Component x coordinate must be a number.");
        if (!("y" in component))
            throw new Error("Components data is missing a y coordinate.");
        if (typeof component.y !== "number")
            throw new Error("Component y coordinate must be a number.");
        switch (component.type) {
            case "INPUT":
            case "OUTPUT": {
                if (!("id" in component))
                    throw new Error("I/O data is missing ids.");
                if (typeof component.id !== "number")
                    throw new Error("I/O id must be a number.");
                if (!("activated" in component))
                    throw new Error("I/O data is missing activation status.");
                if (typeof component.activated !== "boolean")
                    throw new Error("Activation status must be a boolean.");
                break;
            }
            case "COMPONENT": {
                if (!("angle" in component))
                    throw new Error("Component data is missing rotation angle.");
                if (typeof component.angle !== "number")
                    throw new Error("Rotation angle must be a number.");
                if (!("complementary" in component))
                    throw new Error("Component data is missing complementary output.");
                if (typeof component.complementary !== "boolean")
                    throw new Error("Complementary output must be a boolean.");
                if (!("joins" in component))
                    throw new Error("Component data is missing joins.");
                if (typeof component.joins !== "number")
                    throw new Error("Joins count must be a number.");
                if (!("inputs" in component))
                    throw new Error("Component data is missing inputs.");
                if (!Array.isArray(component.inputs))
                    throw new Error("Component inputs data must be an array.");
                if (!("outputs" in component))
                    throw new Error("Component data is missing outputs.");
                if (!Array.isArray(component.outputs))
                    throw new Error("Component outputs data must be an array.");
                if (!("name" in component))
                    throw new Error("Component data is missing chip name.");
                if (typeof component.name !== "string")
                    throw new Error("Chip name must be a string.");
                if (!_reified_chips__WEBPACK_IMPORTED_MODULE_8__.chips.has(component.name.trim().toUpperCase()))
                    throw new Error("Chip name doesn't exist.");
                const Chip = _reified_chips__WEBPACK_IMPORTED_MODULE_8__.chips.get(component.name.trim().toUpperCase());
                if (component.inputs.length !==
                    (component.joins !== Chip.INPUTS ? component.inputs.length : Chip.INPUTS))
                    throw new Error("Component inputs does not match chip inputs.");
                if (component.outputs.length !== (component.complementary ? Chip.OUTPUTS + 1 : Chip.OUTPUTS))
                    throw new Error("Component outputs does not match chip outputs.");
                for (const input of component.inputs) {
                    if (!input || typeof input !== "object")
                        throw new Error("Input data must be an object");
                    if (!("id" in input))
                        throw new Error("Input data is missing id.");
                    if (typeof input.id !== "number")
                        throw new Error("Input data id must be a number.");
                    if (!("activated" in input))
                        throw new Error("Input data is missing activation status.");
                    if (typeof input.activated !== "boolean")
                        throw new Error("Activation status must be a boolean.");
                }
                for (const output of component.outputs) {
                    if (!output || typeof output !== "object")
                        throw new Error("Input data must be an object");
                    if (!("id" in output))
                        throw new Error("Input data is missing id.");
                    if (typeof output.id !== "number")
                        throw new Error("Input data id must be a number.");
                    if (!("activated" in output))
                        throw new Error("Input data is missing activation status.");
                    if (typeof output.activated !== "boolean")
                        throw new Error("Activation status must be a boolean.");
                }
                break;
            }
            case "DISPLAY": {
                if (!("angle" in component))
                    throw new Error("Display data is missing rotation angle.");
                if (typeof component.angle !== "number")
                    throw new Error("Rotation angle must be a number.");
                if (!("radix" in component))
                    throw new Error("Display data is missing display radix.");
                if (typeof component.radix !== "number")
                    throw new Error("Display radix must be a number.");
                if (!("inputs" in component))
                    throw new Error("Display data is missing inputs.");
                if (!Array.isArray(component.inputs))
                    throw new Error("Display inputs data must be an array.");
                if (!("outputs" in component))
                    throw new Error("Display data is missing outputs.");
                if (!Array.isArray(component.outputs))
                    throw new Error("Display outputs data must be an array.");
                for (const input of component.inputs) {
                    if (!input || typeof input !== "object")
                        throw new Error("Input data must be an object");
                    if (!("id" in input))
                        throw new Error("Input data is missing id.");
                    if (typeof input.id !== "number")
                        throw new Error("Input data id must be a number.");
                    if (!("activated" in input))
                        throw new Error("Input data is missing activation status.");
                    if (typeof input.activated !== "boolean")
                        throw new Error("Activation status must be a boolean.");
                }
                for (const output of component.outputs) {
                    if (!output || typeof output !== "object")
                        throw new Error("Input data must be an object");
                    if (!("id" in output))
                        throw new Error("Input data is missing id.");
                    if (typeof output.id !== "number")
                        throw new Error("Input data id must be a number.");
                    if (!("activated" in output))
                        throw new Error("Input data is missing activation status.");
                    if (typeof output.activated !== "boolean")
                        throw new Error("Activation status must be a boolean.");
                }
            }
        }
    }
    const ids = data.components.flatMap((component) => component.type === "COMPONENT" || component.type === "DISPLAY"
        ? [
            ...component.inputs.map(({ id }) => id),
            ...component.outputs.map(({ id }) => id),
        ]
        : component.id);
    for (const wire of data.wires) {
        if (!wire || typeof wire !== "object")
            throw new Error("Wire data must be an object.");
        if (!("from" in wire))
            throw new Error("Wire data is missing the component it starts from.");
        if (typeof wire.from !== "number")
            throw new Error("Wire data must reference numeric ids.");
        if (!("to" in wire))
            throw new Error("Wire data is missing the target component.");
        if (typeof wire.to !== "number")
            throw new Error("Wire data must reference numeric ids.");
        if (!ids.includes(wire.from) || !ids.includes(wire.to))
            throw new Error("Wire data references invalid ids.");
    }
}


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./src/constants.ts");
//@ts-nocheck

// using ts extension because of webpack things
switch (_constants__WEBPACK_IMPORTED_MODULE_0__.APP_NAME) {
    case "alg":
    case "algebra": {
        await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./algebra/index.ts */ "./src/algebra/index.ts"));
        console.log("%cGATESIM ALGEBRA", `color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.ACTIVATED_CSS_COLOR}; font-size: 2rem;`);
        console.log("Enter in a list of expressions (boolean algebra).");
        console.log("This app transforms the expressions into a circuit.");
        break;
    }
    case "cad": {
        await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cad/index.ts */ "./src/cad/index.ts"));
        console.log("%cGATESIM CAD", `color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.ACTIVATED_CSS_COLOR}; font-size: 2rem;`);
        console.log("Input a truth table to get started.");
        console.log("The program will find a circuit that matches the table.");
        break;
    }
    case "sim": {
        await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./app.ts */ "./src/app.ts"));
        console.log("%cGATESIM", `color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.ACTIVATED_CSS_COLOR}; font-size: 2rem;`);
        console.log("Right click to get started.");
        console.log("Press '?' for help.");
        break;
    }
    default: {
        console.log("%cUNKNOWN APP", `color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.ACTIVATED_CSS_COLOR}; font-size: 2rem;`);
    }
}

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } }, 1);

/***/ }),

/***/ "./src/keybinds/backspace.ts":
/*!***********************************!*\
  !*** ./src/keybinds/backspace.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "backspace": () => (/* binding */ backspace)
/* harmony export */ });
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../circular */ "./src/circular.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/KeybindsManager */ "./src/managers/KeybindsManager.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../managers/SelectionManager */ "./src/managers/SelectionManager.ts");
/* harmony import */ var _managers_TestingManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../managers/TestingManager */ "./src/managers/TestingManager.ts");
/* harmony import */ var _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../managers/WiringManager */ "./src/managers/WiringManager.ts");
/* harmony import */ var _reified_Component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../reified/Component */ "./src/reified/Component.ts");
/* harmony import */ var _reified_Display__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../reified/Display */ "./src/reified/Display.ts");
/* harmony import */ var _reified_Input__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../reified/Input */ "./src/reified/Input.ts");
/* harmony import */ var _reified_Output__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../reified/Output */ "./src/reified/Output.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");












const backspace = {
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__.KeybindsManager.assign("Control+X", () => {
        if (_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        backspace["Backspace"]();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__.KeybindsManager.assign("Meta+X", () => {
        if (!_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        backspace["Backspace"]();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__.KeybindsManager.assign("Control+Shift+X", () => {
        if (_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        backspace["Shift+Backspace"]();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__.KeybindsManager.assign("Meta+Shift+X", () => {
        if (!_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        backspace["Shift+Backspace"]();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__.KeybindsManager.assign("Shift+Backspace", () => {
        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_5__.TestingManager.testing)
            return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
        if (!_managers_SelectionManager__WEBPACK_IMPORTED_MODULE_4__.SelectionManager.selected.size)
            return;
        const selected = _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_4__.SelectionManager.selected.clone(true);
        const deleted = [];
        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_3__.SandboxManager.pushHistory(() => {
            selected.forEach((component) => {
                if (component instanceof _reified_Input__WEBPACK_IMPORTED_MODULE_9__.Input) {
                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.forEach((wire) => {
                        if (wire.from === component.element) {
                            wire.destroy();
                            wire.to.classList.remove("activated");
                            deleted.push([wire.from, wire.to]);
                        }
                    });
                }
                else if (component instanceof _reified_Output__WEBPACK_IMPORTED_MODULE_10__.Output) {
                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.forEach((wire) => {
                        if (wire.to === component.element) {
                            wire.destroy();
                            deleted.push([wire.from, wire.to]);
                        }
                    });
                    component.element.classList.remove("activated");
                }
                else if (component instanceof _reified_Component__WEBPACK_IMPORTED_MODULE_7__.Component || component instanceof _reified_Display__WEBPACK_IMPORTED_MODULE_8__.Display) {
                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.forEach((wire) => {
                        if (component.inputs.some((i) => wire.to === i) ||
                            component.outputs.some((o) => wire.from === o)) {
                            wire.destroy();
                            wire.to.classList.remove("activated");
                            deleted.push([wire.from, wire.to]);
                        }
                    });
                    component.inputs.forEach((i) => i.classList.remove("activated"));
                }
                else {
                    throw new Error("Unknown component type.");
                }
            });
        }, () => {
            _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.addAll(deleted.splice(0, deleted.length).map(([from, to]) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.Wiring(from, to)));
            _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_4__.SelectionManager.selected = selected.clone(true);
        });
    }),
    ["Backspace"]: () => {
        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_5__.TestingManager.testing)
            return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
        if (!_managers_SelectionManager__WEBPACK_IMPORTED_MODULE_4__.SelectionManager.selected.size)
            return;
        const selected = _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_4__.SelectionManager.selected.clone(true);
        const deleted = [];
        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_3__.SandboxManager.pushHistory(() => {
            selected.forEach((component) => {
                _reified_Reified__WEBPACK_IMPORTED_MODULE_11__.Reified.active["delete"](component);
                component.detach();
                if (component instanceof _reified_Input__WEBPACK_IMPORTED_MODULE_9__.Input) {
                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.forEach((wire) => {
                        if (wire.from === component.element) {
                            wire.destroy();
                            wire.to.classList.remove("activated");
                            deleted.push([wire.from, wire.to]);
                        }
                    });
                }
                else if (component instanceof _reified_Output__WEBPACK_IMPORTED_MODULE_10__.Output) {
                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.forEach((wire) => {
                        if (wire.to === component.element) {
                            wire.destroy();
                            deleted.push([wire.from, wire.to]);
                        }
                    });
                    component.element.classList.remove("activated");
                }
                else if (component instanceof _reified_Component__WEBPACK_IMPORTED_MODULE_7__.Component || component instanceof _reified_Display__WEBPACK_IMPORTED_MODULE_8__.Display) {
                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.forEach((wire) => {
                        if (component.inputs.some((i) => wire.to === i) ||
                            component.outputs.some((o) => wire.from === o)) {
                            wire.destroy();
                            wire.to.classList.remove("activated");
                            deleted.push([wire.from, wire.to]);
                        }
                    });
                    component.inputs.forEach((i) => i.classList.remove("activated"));
                }
                else {
                    throw new Error("Unknown component type.");
                }
            });
            _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_4__.SelectionManager.selected.clear();
        }, () => {
            selected.forEach((component) => {
                _reified_Reified__WEBPACK_IMPORTED_MODULE_11__.Reified.active.add(component);
                component.attach();
            });
            _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.addAll(deleted.splice(0, deleted.length).map(([from, to]) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.Wiring(from, to)));
            _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_4__.SelectionManager.selected = selected.clone(true);
        });
    },
};


/***/ }),

/***/ "./src/keybinds/behavior.ts":
/*!**********************************!*\
  !*** ./src/keybinds/behavior.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "behavior": () => (/* binding */ behavior)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/DraggingManager */ "./src/managers/DraggingManager.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/SelectionManager */ "./src/managers/SelectionManager.ts");
/* harmony import */ var _managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../managers/TestingManager */ "./src/managers/TestingManager.ts");
/* harmony import */ var _managers_ToastManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../managers/ToastManager */ "./src/managers/ToastManager.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");







const behavior = {
    ["ArrowLeft"]: () => {
        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__.TestingManager.testing)
            return (0,_constants__WEBPACK_IMPORTED_MODULE_0__.LOCKED_FOR_TESTING)();
        if (!_managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.size)
            return;
        const selected = _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.clone(true);
        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.pushHistory(() => {
            selected.forEach((component) => {
                component.move({ x: -_constants__WEBPACK_IMPORTED_MODULE_0__.GRID_SIZE, relative: true });
            });
        }, () => {
            selected.forEach((component) => {
                component.move({ x: _constants__WEBPACK_IMPORTED_MODULE_0__.GRID_SIZE, relative: true });
            });
        });
    },
    ["ArrowRight"]: () => {
        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__.TestingManager.testing)
            return (0,_constants__WEBPACK_IMPORTED_MODULE_0__.LOCKED_FOR_TESTING)();
        if (!_managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.size)
            return;
        const selected = _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.clone(true);
        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.pushHistory(() => {
            selected.forEach((component) => {
                component.move({ x: _constants__WEBPACK_IMPORTED_MODULE_0__.GRID_SIZE, relative: true });
            });
        }, () => {
            selected.forEach((component) => {
                component.move({ x: -_constants__WEBPACK_IMPORTED_MODULE_0__.GRID_SIZE, relative: true });
            });
        });
    },
    ["ArrowUp"]: () => {
        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__.TestingManager.testing)
            return (0,_constants__WEBPACK_IMPORTED_MODULE_0__.LOCKED_FOR_TESTING)();
        if (!_managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.size)
            return;
        const selected = _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.clone(true);
        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.pushHistory(() => {
            selected.forEach((component) => {
                component.move({ y: -_constants__WEBPACK_IMPORTED_MODULE_0__.GRID_SIZE, relative: true });
            });
        }, () => {
            selected.forEach((component) => {
                component.move({ y: _constants__WEBPACK_IMPORTED_MODULE_0__.GRID_SIZE, relative: true });
            });
        });
    },
    ["ArrowDown"]: () => {
        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__.TestingManager.testing)
            return (0,_constants__WEBPACK_IMPORTED_MODULE_0__.LOCKED_FOR_TESTING)();
        if (!_managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.size)
            return;
        const selected = _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.clone(true);
        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.pushHistory(() => {
            selected.forEach((component) => {
                component.move({ y: _constants__WEBPACK_IMPORTED_MODULE_0__.GRID_SIZE, relative: true });
            });
        }, () => {
            selected.forEach((component) => {
                component.move({ y: -_constants__WEBPACK_IMPORTED_MODULE_0__.GRID_SIZE, relative: true });
            });
        });
    },
    ["KeyG"]: () => {
        const components = [..._reified_Reified__WEBPACK_IMPORTED_MODULE_6__.Reified.active];
        const positions = components.map(({ pos }) => pos);
        const size = _constants__WEBPACK_IMPORTED_MODULE_0__.GRID_SIZE;
        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.pushHistory(() => {
            _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_1__.DraggingManager.snapToGrid = !_managers_DraggingManager__WEBPACK_IMPORTED_MODULE_1__.DraggingManager.snapToGrid;
            components.forEach((component) => {
                component.move({
                    x: Math.floor(component.pos.x / size) * size,
                    y: Math.floor(component.pos.y / size) * size,
                });
            });
            _managers_ToastManager__WEBPACK_IMPORTED_MODULE_5__.ToastManager.toast({
                message: `Toggled snap to grid (now ${_managers_DraggingManager__WEBPACK_IMPORTED_MODULE_1__.DraggingManager.snapToGrid}) [G].`,
                color: _constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR,
                duration: _constants__WEBPACK_IMPORTED_MODULE_0__.TOAST_DURATION,
            });
        }, () => {
            _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_1__.DraggingManager.snapToGrid = !_managers_DraggingManager__WEBPACK_IMPORTED_MODULE_1__.DraggingManager.snapToGrid;
            components.forEach((component, i) => {
                component.move(positions[i]);
            });
        });
    },
};


/***/ }),

/***/ "./src/keybinds/history.ts":
/*!*********************************!*\
  !*** ./src/keybinds/history.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "history": () => (/* binding */ history)
/* harmony export */ });
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../circular */ "./src/circular.ts");
/* harmony import */ var _managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/KeybindsManager */ "./src/managers/KeybindsManager.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");



const undo = () => {
    _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.popHistory();
};
const redo = () => {
    _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.redoHistory();
};
const history = {
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_1__.KeybindsManager.assign("Control+Shift+Z", () => {
        if (_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        redo();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_1__.KeybindsManager.assign("Meta+Shift+Z", () => {
        if (!_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        redo();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_1__.KeybindsManager.assign("Control+Z", () => {
        if (_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        undo();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_1__.KeybindsManager.assign("Meta+Z", () => {
        if (!_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        undo();
    }),
};


/***/ }),

/***/ "./src/keybinds/howtouse.ts":
/*!**********************************!*\
  !*** ./src/keybinds/howtouse.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "howtouse": () => (/* binding */ howtouse)
/* harmony export */ });
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../circular */ "./src/circular.ts");
/* harmony import */ var _managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/KeybindsManager */ "./src/managers/KeybindsManager.ts");
/* harmony import */ var _managers_ModalManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/ModalManager */ "./src/managers/ModalManager.ts");
/* harmony import */ var _managers_SettingsManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/SettingsManager */ "./src/managers/SettingsManager.ts");
/* harmony import */ var _managers_StorageManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../managers/StorageManager */ "./src/managers/StorageManager.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");






const howtouse = {
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_1__.KeybindsManager.assign("Shift+Slash", async () => {
        await _managers_ModalManager__WEBPACK_IMPORTED_MODULE_2__.ModalManager.popup(_reified_Reified__WEBPACK_IMPORTED_MODULE_5__.html `
            <div class="help">
                <h1>gatesim</h1>

                <p>
                    This is a logical circuits playground that is lightweight and tunable, including a suite of useful
                    tools. However, it has a steeper learning curve compared to other playgrounds.
                </p>

                <p>Right click on the blank screen to get started. Press '/' to bring up a cheatsheet for keybinds.</p>

                <p>
                    If there are performance problems, you may want to increase gate delay, or disable fancy wires in
                    the settings.
                </p>

                <details>
                    <summary>Examples</summary>
                    <ul>
                        <li><a href="?premade=example:halfadder">Half adder</a></li>
                        <li><a href="?premade=example:fulladder">Full adder</a></li>
                    </ul>
                </details>

                <details>
                    <summary>Exercises</summary>
                    <ul>
                        <li><a href="?premade=nand:not">NAND-only NOT</a></li>
                        <li><a href="?premade=nand:and">NAND-only AND</a></li>
                        <li><a href="?premade=nand:or">NAND-only OR</a></li>
                        <li><a href="?premade=nand:xor">NAND-only XOR</a></li>
                    </ul>
                </details>
            </div>
        `);
        _managers_StorageManager__WEBPACK_IMPORTED_MODULE_4__.StorageManager.set("usedhelp", "true");
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_1__.KeybindsManager.assign("Slash", async () => {
        await _managers_ModalManager__WEBPACK_IMPORTED_MODULE_2__.ModalManager.popup(_reified_Reified__WEBPACK_IMPORTED_MODULE_5__.html `
            <div class="help">
                <h1>keybinds</h1>

                <table>
                    <thead>
                        <tr>
                            <td><b>Description</b></td>
                            <td><b>Action</b></td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Create selection</td>
                            <td>Hold + drag</td>
                        </tr>
                        <tr>
                            <td>Add to selection</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⌘ + click" : "Ctrl + click"}</td>
                        </tr>
                        <tr>
                            <td>Select all</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⌘ A" : "Ctrl A"}</td>
                        </tr>
                        <tr>
                            <td>Undo</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⌘ Z" : "Ctrl Z"}</td>
                        </tr>
                        <tr>
                            <td>Redo</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ ⌘ Z" : "Ctrl Shift Z"}</td>
                        </tr>
                        <tr>
                            <td>Create connection</td>
                            <td>Q + click</td>
                        </tr>
                        <tr>
                            <td>Insert logic gate</td>
                            <td>A + click</td>
                        </tr>
                        <tr>
                            <td>Insert miscellaneous component</td>
                            <td>S + click</td>
                        </tr>
                        <tr>
                            <td>Insert input</td>
                            <td>I</td>
                        </tr>
                        <tr>
                            <td>Insert output</td>
                            <td>O</td>
                        </tr>
                        <tr>
                            <td>Delete component</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⌘ X" : "Ctrl X"}</td>
                        </tr>
                        <tr>
                            <td>Delete connections</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ ⌘ X" : "Ctrl Shift X"}</td>
                        </tr>
                        <tr>
                            <td>Move selected components up</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "▲" : "↑"}</td>
                        </tr>
                        <tr>
                            <td>Move selected components down</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "▼" : "↓"}</td>
                        </tr>
                        <tr>
                            <td>Move selected components left</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "◀" : "←"}</td>
                        </tr>
                        <tr>
                            <td>Move selected components right</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "▶" : "→"}</td>
                        </tr>
                        <tr>
                            <td>Rotate selected components clockwise</td>
                            <td>R</td>
                        </tr>
                        <tr>
                            <td>Rotate selected components counterclockwise</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ R" : "Shift R"}</td>
                        </tr>
                        <tr>
                            <td>Delete selected components</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "Delete" : "Backspace"}</td>
                        </tr>
                        <tr>
                            <td>Delete selected component's connections</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ Delete" : "Shift Backspace"}</td>
                        </tr>
                        <tr>
                            <td>Open help</td>
                            <td>?</td>
                        </tr>
                        <tr>
                            <td>Open this cheatsheet</td>
                            <td>/</td>
                        </tr>
                        <tr>
                            <td>Copy link</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⌘ K" : "Ctrl K"}</td>
                        </tr>
                        <tr>
                            <td>Save under name</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⌘ S" : "Ctrl S"}</td>
                        </tr>
                        <tr>
                            <td>Load save</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⌘ O" : "Ctrl O"}</td>
                        </tr>
                        <tr>
                            <td>Save as file</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ ⌘ S" : "Ctrl Shift S"}</td>
                        </tr>
                        <tr>
                            <td>Import from file</td>
                            <td>${_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ ⌘ O" : "Ctrl Shift O"}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        `);
    }),
    ["Backslash"]: async () => {
        await _managers_SettingsManager__WEBPACK_IMPORTED_MODULE_3__.SettingsManager.bringUpForm();
    },
};


/***/ }),

/***/ "./src/keybinds/io.ts":
/*!****************************!*\
  !*** ./src/keybinds/io.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "io": () => (/* binding */ io)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _managers_MouseManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/MouseManager */ "./src/managers/MouseManager.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/SelectionManager */ "./src/managers/SelectionManager.ts");
/* harmony import */ var _managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../managers/TestingManager */ "./src/managers/TestingManager.ts");
/* harmony import */ var _reified_Input__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reified/Input */ "./src/reified/Input.ts");
/* harmony import */ var _reified_Output__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../reified/Output */ "./src/reified/Output.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");








const io = {
    ["KeyI"]: () => {
        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__.TestingManager.testing)
            return (0,_constants__WEBPACK_IMPORTED_MODULE_0__.LOCKED_FOR_TESTING)();
        const input = new _reified_Input__WEBPACK_IMPORTED_MODULE_5__.Input({
            x: _managers_MouseManager__WEBPACK_IMPORTED_MODULE_1__.MouseManager.mouse.x - _constants__WEBPACK_IMPORTED_MODULE_0__.INPUT_COMPONENT_CSS_SIZE / 2,
            y: _managers_MouseManager__WEBPACK_IMPORTED_MODULE_1__.MouseManager.mouse.y - _constants__WEBPACK_IMPORTED_MODULE_0__.INPUT_COMPONENT_CSS_SIZE / 2,
        });
        const selection = _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.clone(true);
        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.pushHistory(() => {
            _reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active.add(input);
            if (_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active.has(input)) {
                input.attach();
                _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.select(input);
            }
        }, () => {
            _reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active["delete"](input);
            input.detach();
            _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected = selection;
        });
    },
    ["KeyO"]: () => {
        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__.TestingManager.testing)
            return (0,_constants__WEBPACK_IMPORTED_MODULE_0__.LOCKED_FOR_TESTING)();
        const output = new _reified_Output__WEBPACK_IMPORTED_MODULE_6__.Output({
            x: _managers_MouseManager__WEBPACK_IMPORTED_MODULE_1__.MouseManager.mouse.x - _constants__WEBPACK_IMPORTED_MODULE_0__.OUTPUT_COMPONENT_CSS_SIZE / 2,
            y: _managers_MouseManager__WEBPACK_IMPORTED_MODULE_1__.MouseManager.mouse.y - _constants__WEBPACK_IMPORTED_MODULE_0__.OUTPUT_COMPONENT_CSS_SIZE / 2,
        });
        const selection = _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.clone(true);
        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.pushHistory(() => {
            _reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active.add(output);
            if (_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active.has(output)) {
                output.attach();
                _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.select(output);
            }
        }, () => {
            _reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active["delete"](output);
            output.detach();
            _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected = selection;
        });
    },
};


/***/ }),

/***/ "./src/keybinds/keybinds.ts":
/*!**********************************!*\
  !*** ./src/keybinds/keybinds.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "keybinds": () => (/* binding */ keybinds)
/* harmony export */ });
/* harmony import */ var _backspace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backspace */ "./src/keybinds/backspace.ts");
/* harmony import */ var _behavior__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./behavior */ "./src/keybinds/behavior.ts");
/* harmony import */ var _history__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./history */ "./src/keybinds/history.ts");
/* harmony import */ var _howtouse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./howtouse */ "./src/keybinds/howtouse.ts");
/* harmony import */ var _io__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./io */ "./src/keybinds/io.ts");
/* harmony import */ var _rotate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./rotate */ "./src/keybinds/rotate.ts");
/* harmony import */ var _select__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./select */ "./src/keybinds/select.ts");
/* harmony import */ var _serde__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./serde */ "./src/keybinds/serde.ts");








const keybinds = Object.assign({}, _backspace__WEBPACK_IMPORTED_MODULE_0__.backspace, _behavior__WEBPACK_IMPORTED_MODULE_1__.behavior, _history__WEBPACK_IMPORTED_MODULE_2__.history, _howtouse__WEBPACK_IMPORTED_MODULE_3__.howtouse, _io__WEBPACK_IMPORTED_MODULE_4__.io, _rotate__WEBPACK_IMPORTED_MODULE_5__.rotate, _select__WEBPACK_IMPORTED_MODULE_6__.select, _serde__WEBPACK_IMPORTED_MODULE_7__.serde);


/***/ }),

/***/ "./src/keybinds/rotate.ts":
/*!********************************!*\
  !*** ./src/keybinds/rotate.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rotate": () => (/* binding */ rotate)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/KeybindsManager */ "./src/managers/KeybindsManager.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/SelectionManager */ "./src/managers/SelectionManager.ts");
/* harmony import */ var _managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../managers/TestingManager */ "./src/managers/TestingManager.ts");
/* harmony import */ var _reified_Component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reified/Component */ "./src/reified/Component.ts");
/* harmony import */ var _reified_Display__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../reified/Display */ "./src/reified/Display.ts");







const rotate = {
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_1__.KeybindsManager.assign("Shift+R", () => {
        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__.TestingManager.testing)
            return (0,_constants__WEBPACK_IMPORTED_MODULE_0__.LOCKED_FOR_TESTING)();
        if (!_managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.size)
            return;
        const selected = _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.clone(true);
        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.pushHistory(() => {
            selected.forEach((component) => {
                if (component instanceof _reified_Component__WEBPACK_IMPORTED_MODULE_5__.Component || component instanceof _reified_Display__WEBPACK_IMPORTED_MODULE_6__.Display) {
                    component.angle -= 90;
                }
            });
        }, () => {
            selected.forEach((component) => {
                if (component instanceof _reified_Component__WEBPACK_IMPORTED_MODULE_5__.Component || component instanceof _reified_Display__WEBPACK_IMPORTED_MODULE_6__.Display) {
                    component.angle += 90;
                }
            });
        });
    }),
    ["KeyR"]: () => {
        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__.TestingManager.testing)
            return (0,_constants__WEBPACK_IMPORTED_MODULE_0__.LOCKED_FOR_TESTING)();
        if (!_managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.size)
            return;
        const selected = _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.clone(true);
        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.pushHistory(() => {
            selected.forEach((component) => {
                if (component instanceof _reified_Component__WEBPACK_IMPORTED_MODULE_5__.Component || component instanceof _reified_Display__WEBPACK_IMPORTED_MODULE_6__.Display) {
                    component.angle += 90;
                }
            });
        }, () => {
            selected.forEach((component) => {
                if (component instanceof _reified_Component__WEBPACK_IMPORTED_MODULE_5__.Component || component instanceof _reified_Display__WEBPACK_IMPORTED_MODULE_6__.Display) {
                    component.angle -= 90;
                }
            });
        });
    },
};


/***/ }),

/***/ "./src/keybinds/select.ts":
/*!********************************!*\
  !*** ./src/keybinds/select.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "select": () => (/* binding */ select)
/* harmony export */ });
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../circular */ "./src/circular.ts");
/* harmony import */ var _managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/KeybindsManager */ "./src/managers/KeybindsManager.ts");
/* harmony import */ var _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/SelectionManager */ "./src/managers/SelectionManager.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");




const select = {
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_1__.KeybindsManager.assign("Control+A", () => {
        if (_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.active.forEach((component) => _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_2__.SelectionManager.addSelection(component));
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_1__.KeybindsManager.assign("Meta+A", () => {
        if (!_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.active.forEach((component) => _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_2__.SelectionManager.addSelection(component));
    }),
};


/***/ }),

/***/ "./src/keybinds/serde.ts":
/*!*******************************!*\
  !*** ./src/keybinds/serde.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "serde": () => (/* binding */ serde)
/* harmony export */ });
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../circular */ "./src/circular.ts");
/* harmony import */ var _contextmenu_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contextmenu/serde */ "./src/contextmenu/serde.ts");
/* harmony import */ var _managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/KeybindsManager */ "./src/managers/KeybindsManager.ts");
/* harmony import */ var _managers_ToolsManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/ToolsManager */ "./src/managers/ToolsManager.ts");




const serde = {
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__.KeybindsManager.assign("Control+K", (e) => {
        if (_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        e.preventDefault();
        _managers_ToolsManager__WEBPACK_IMPORTED_MODULE_3__.ToolsManager.actions[0]["copy-url"].callback();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__.KeybindsManager.assign("Meta+K", (e) => {
        if (!_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        e.preventDefault();
        _managers_ToolsManager__WEBPACK_IMPORTED_MODULE_3__.ToolsManager.actions[0]["copy-url"].callback();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__.KeybindsManager.assign("Control+S", (e) => {
        if (_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        e.preventDefault();
        _contextmenu_serde__WEBPACK_IMPORTED_MODULE_1__.serde["save-to"].callback();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__.KeybindsManager.assign("Meta+S", (e) => {
        if (!_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        e.preventDefault();
        _contextmenu_serde__WEBPACK_IMPORTED_MODULE_1__.serde["save-to"].callback();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__.KeybindsManager.assign("Control+O", (e) => {
        if (_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        e.preventDefault();
        _contextmenu_serde__WEBPACK_IMPORTED_MODULE_1__.serde["load-from"].callback();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__.KeybindsManager.assign("Meta+O", (e) => {
        if (!_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        e.preventDefault();
        _contextmenu_serde__WEBPACK_IMPORTED_MODULE_1__.serde["load-from"].callback();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__.KeybindsManager.assign("Control+Shift+S", (e) => {
        if (_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        e.preventDefault();
        _contextmenu_serde__WEBPACK_IMPORTED_MODULE_1__.serde["save-as"].callback();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__.KeybindsManager.assign("Meta+Shift+S", (e) => {
        if (!_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        e.preventDefault();
        _contextmenu_serde__WEBPACK_IMPORTED_MODULE_1__.serde["save-as"].callback();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__.KeybindsManager.assign("Control+Shift+O", (e) => {
        if (_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        e.preventDefault();
        _contextmenu_serde__WEBPACK_IMPORTED_MODULE_1__.serde["import-from"].callback();
    }),
    ..._managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_2__.KeybindsManager.assign("Meta+Shift+O", (e) => {
        if (!_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            return;
        e.preventDefault();
        _contextmenu_serde__WEBPACK_IMPORTED_MODULE_1__.serde["import-from"].callback();
    }),
};


/***/ }),

/***/ "./src/managers/CanvasManager.ts":
/*!***************************************!*\
  !*** ./src/managers/CanvasManager.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CanvasManager": () => (/* binding */ CanvasManager)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");

class CanvasManager {
    static #jobs = new Set();
    static #rAF = -1;
    static #render() {
        if (_constants__WEBPACK_IMPORTED_MODULE_0__.NO_RENDERING)
            return;
        const bg = (0,_constants__WEBPACK_IMPORTED_MODULE_0__.GET_BACKGROUND_CANVAS_CTX)();
        const fg = (0,_constants__WEBPACK_IMPORTED_MODULE_0__.GET_FOREGROUND_CANVAS_CTX)();
        bg.canvas.width = window.innerWidth;
        bg.canvas.height = window.innerHeight;
        fg.canvas.width = window.innerWidth;
        fg.canvas.height = window.innerHeight;
        this.#jobs.forEach((job) => {
            job.call(undefined, { bg, fg });
        });
    }
    static start() {
        if (_constants__WEBPACK_IMPORTED_MODULE_0__.NO_RENDERING)
            return;
        this.#render();
        const id = requestAnimationFrame(this.start.bind(this));
        this.#rAF = id;
    }
    static stop() {
        if (_constants__WEBPACK_IMPORTED_MODULE_0__.NO_RENDERING)
            return;
        cancelAnimationFrame(this.#rAF);
    }
    static addJob(job) {
        if (_constants__WEBPACK_IMPORTED_MODULE_0__.NO_RENDERING)
            return;
        this.#jobs.add(job);
    }
    static deleteJob(job) {
        if (_constants__WEBPACK_IMPORTED_MODULE_0__.NO_RENDERING)
            return;
        this.#jobs.delete(job);
    }
}


/***/ }),

/***/ "./src/managers/DarkmodeManager.ts":
/*!*****************************************!*\
  !*** ./src/managers/DarkmodeManager.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DarkmodeManager": () => (/* binding */ DarkmodeManager)
/* harmony export */ });
/* harmony import */ var _StorageManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StorageManager */ "./src/managers/StorageManager.ts");

class DarkmodeManager {
    static #changes = new Set();
    static #darkmodeKey = "settings.darkmode";
    static #darkmodeModalsKey = "settings.darkmodeModals";
    static get darkmodeEnabled() {
        return _StorageManager__WEBPACK_IMPORTED_MODULE_0__.StorageManager.get(this.#darkmodeKey) ?? false;
    }
    static set darkmodeEnabled(value) {
        _StorageManager__WEBPACK_IMPORTED_MODULE_0__.StorageManager.set(this.#darkmodeKey, value);
        this.#element.innerText = value ? "🌕" : "🌑";
        this.#changes.forEach((run) => run.call(undefined));
        document.body.classList.toggle("darkmode", value);
    }
    static get darkmodeModalsEnabled() {
        return _StorageManager__WEBPACK_IMPORTED_MODULE_0__.StorageManager.get(this.#darkmodeModalsKey) ?? false;
    }
    static set darkmodeModalsEnabled(value) {
        _StorageManager__WEBPACK_IMPORTED_MODULE_0__.StorageManager.set(this.#darkmodeModalsKey, value);
        this.#element.innerText = value ? "🌕" : "🌑";
        this.#changes.forEach((run) => run.call(undefined));
        document.body.classList.toggle("darkmode-modals", value);
    }
    static get #element() {
        return document.querySelector("button.darkmode");
    }
    static onChange(run) {
        this.#changes.add(run);
        return this;
    }
    static offChange(run) {
        this.#changes.delete(run);
        return this;
    }
    static #listener = () => {
        this.darkmodeEnabled = !this.darkmodeEnabled;
        const buttons = document.querySelectorAll("button.tools, button.settings, button.darkmode");
        buttons.forEach((b) => {
            b.style.transition = "none";
        });
        requestAnimationFrame(() => {
            buttons.forEach((b) => {
                b.style.transition = "";
            });
        });
    };
    static listen() {
        // trigger setters to set up initial state
        this.darkmodeEnabled = this.darkmodeEnabled;
        this.darkmodeModalsEnabled = this.darkmodeModalsEnabled;
        this.#element.innerText = this.darkmodeEnabled ? "🌕" : "🌑";
        this.#element.addEventListener("click", this.#listener);
        return this;
    }
    static stop() {
        this.#element.removeEventListener("click", this.#listener);
        return this;
    }
    static toggleDarkmode(value) {
        this.darkmodeEnabled = typeof value === "boolean" ? value : !this.darkmodeEnabled;
    }
    static toggleDarkmodeModals(value) {
        this.darkmodeModalsEnabled = typeof value === "boolean" ? value : !this.darkmodeModalsEnabled;
    }
}


/***/ }),

/***/ "./src/managers/DraggingManager.ts":
/*!*****************************************!*\
  !*** ./src/managers/DraggingManager.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DraggingManager": () => (/* binding */ DraggingManager)
/* harmony export */ });
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../circular */ "./src/circular.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _quickpicks_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../quickpicks/components */ "./src/quickpicks/components.ts");
/* harmony import */ var _quickpicks_gates__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../quickpicks/gates */ "./src/quickpicks/gates.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _CanvasManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CanvasManager */ "./src/managers/CanvasManager.ts");
/* harmony import */ var _DarkmodeManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./DarkmodeManager */ "./src/managers/DarkmodeManager.ts");
/* harmony import */ var _KeybindsManager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./KeybindsManager */ "./src/managers/KeybindsManager.ts");
/* harmony import */ var _MouseManager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./MouseManager */ "./src/managers/MouseManager.ts");
/* harmony import */ var _SandboxManager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _SelectionManager__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./SelectionManager */ "./src/managers/SelectionManager.ts");











class DraggingManager {
    static #dragged;
    static #watched = new Map();
    static #mouse = { x: -1, y: -1, ox: -1, oy: -1, ix: -1, iy: -1, down: false };
    static #topleft;
    static #original;
    static #downpos = { x: -1, y: -1 };
    static #positions;
    static #snapToGrid = false;
    static get snapToGrid() {
        return this.#snapToGrid;
    }
    static set snapToGrid(value) {
        this.#snapToGrid = value;
        this.snapToGridBasedUpdate();
        _SandboxManager__WEBPACK_IMPORTED_MODULE_9__.SandboxManager.forceSave();
    }
    static snapToGridBasedUpdate({ forceClear = false, onlyUpdateColor = false } = {
        forceClear: false,
        onlyUpdateColor: false,
    }) {
        if (this.snapToGrid && !forceClear) {
            if (!onlyUpdateColor)
                requestAnimationFrame(() => {
                    _reified_Reified__WEBPACK_IMPORTED_MODULE_4__.Reified.active.forEach((component) => {
                        component.element.style.minWidth = "";
                        component.element.style.minHeight = "";
                        requestAnimationFrame(() => {
                            const style = getComputedStyle(component.element);
                            const top = parseFloat(style.top);
                            const left = parseFloat(style.left);
                            const width = parseFloat(style.width);
                            const height = parseFloat(style.height);
                            component.move({
                                x: Math.floor(left / _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE) * _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE,
                                y: Math.floor(top / _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE) * _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE,
                            });
                            component.element.style.minWidth = Math.ceil(width / _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE) * _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE + "px";
                            component.element.style.minHeight = Math.ceil(height / _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE) * _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE + "px";
                        });
                    });
                });
            document.body.style.backgroundSize = _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE + "px " + _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE + "px";
            if (_DarkmodeManager__WEBPACK_IMPORTED_MODULE_6__.DarkmodeManager.darkmodeEnabled) {
                document.body.style.backgroundImage = `linear-gradient(to right, ${_constants__WEBPACK_IMPORTED_MODULE_1__.EVEN_DARKER_GRAY_CSS_COLOR} 1px, transparent 1px), linear-gradient(to bottom, ${_constants__WEBPACK_IMPORTED_MODULE_1__.EVEN_DARKER_GRAY_CSS_COLOR} 1px, transparent 1px)`;
            }
            else {
                document.body.style.backgroundImage = `linear-gradient(to right, ${_constants__WEBPACK_IMPORTED_MODULE_1__.EVEN_LIGHTER_GRAY_CSS_COLOR} 1px, transparent 1px), linear-gradient(to bottom, ${_constants__WEBPACK_IMPORTED_MODULE_1__.EVEN_LIGHTER_GRAY_CSS_COLOR} 1px, transparent 1px)`;
            }
        }
        else {
            requestAnimationFrame(() => {
                _reified_Reified__WEBPACK_IMPORTED_MODULE_4__.Reified.active.forEach((component) => {
                    component.element.style.minWidth = "";
                    component.element.style.minHeight = "";
                });
            });
            document.body.style.backgroundSize = "";
            document.body.style.background = "";
        }
    }
    static watch(element, target = element) {
        element.dataset.watched = "true";
        const mousedown = (e) => {
            this.#dragged = element;
            this.#dragged.dataset.dragged = "true";
            this.#dragged.style.cursor = "grabbing";
            const rect = this.#dragged.getBoundingClientRect();
            this.#mouse.x = e.clientX;
            this.#mouse.y = e.clientY;
            this.#mouse.ix = e.clientX;
            this.#mouse.iy = e.clientY;
            if (!_SelectionManager__WEBPACK_IMPORTED_MODULE_10__.SelectionManager.isSelected(element) &&
                !((_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS && (_KeybindsManager__WEBPACK_IMPORTED_MODULE_7__.KeybindsManager.isKeyDown("MetaLeft") || _KeybindsManager__WEBPACK_IMPORTED_MODULE_7__.KeybindsManager.isKeyDown("MetaRight"))) ||
                    (!_circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS &&
                        (_KeybindsManager__WEBPACK_IMPORTED_MODULE_7__.KeybindsManager.isKeyDown("ControlLeft") || _KeybindsManager__WEBPACK_IMPORTED_MODULE_7__.KeybindsManager.isKeyDown("ControlRight")))))
                _SelectionManager__WEBPACK_IMPORTED_MODULE_10__.SelectionManager.selected.clear();
            if (_SelectionManager__WEBPACK_IMPORTED_MODULE_10__.SelectionManager.selected.size <= 1) {
                this.#mouse.ox = e.clientX - rect.left;
                this.#mouse.oy = e.clientY - rect.top;
            }
            else {
                this.#positions = [..._SelectionManager__WEBPACK_IMPORTED_MODULE_10__.SelectionManager.selected].map((target) => target.pos);
                // store most top left element as an anchor for the others
                const topleft = [..._SelectionManager__WEBPACK_IMPORTED_MODULE_10__.SelectionManager.selected].sort((a, b) => {
                    const ax = parseFloat(a.element.style.left);
                    const ay = parseFloat(a.element.style.top);
                    const bx = parseFloat(b.element.style.left);
                    const by = parseFloat(b.element.style.top);
                    const ad = Math.sqrt(ax * ax + ay * ay);
                    const bd = Math.sqrt(bx * bx + by * by);
                    return ad - bd;
                })[0].element;
                const bounds = topleft.getBoundingClientRect();
                this.#mouse.ox = e.clientX - bounds.x;
                this.#mouse.oy = e.clientY - bounds.y;
                this.#topleft = topleft;
            }
            this.#original = { x: rect.left, y: rect.top };
        };
        const touchstart = (e) => mousedown(e.touches[0]);
        target.addEventListener("mousedown", mousedown, { capture: true });
        target.addEventListener("touchstart", touchstart, { capture: true });
        this.#watched.set(target, { mousedown, touchstart });
    }
    static forget(element, force) {
        const listener = this.#watched.get(element);
        if (!listener && !force)
            throw new Error(`Element is not currently being watched.`);
        if (listener) {
            delete element.dataset.watched;
            element.removeEventListener("mousedown", listener.mousedown, { capture: true });
            element.removeEventListener("touchstart", listener.touchstart, { capture: true });
            this.#watched.delete(element);
        }
    }
    static reset() {
        this.#watched.forEach((_, element) => this.forget(element));
        this.#mouse = { x: -1, y: -1, ox: -1, oy: -1, ix: -1, iy: -1, down: false };
        this.#downpos = { x: -1, y: -1 };
        this.#topleft = undefined;
        this.#dragged = undefined;
        this.#original = undefined;
        this.#positions = undefined;
        this.deafen();
    }
    static render({ fg }) {
        if (DraggingManager.downpos.x !== -1 &&
            DraggingManager.downpos.y !== -1 &&
            _MouseManager__WEBPACK_IMPORTED_MODULE_8__.MouseManager.mouse.x !== -1 &&
            _MouseManager__WEBPACK_IMPORTED_MODULE_8__.MouseManager.mouse.y !== -1) {
            fg.strokeStyle = (0,_constants__WEBPACK_IMPORTED_MODULE_1__.GET_ACTIVATED_COLOR)();
            fg.lineWidth = 2.5;
            fg.lineJoin = "miter";
            fg.strokeRect(DraggingManager.downpos.x, DraggingManager.downpos.y, _MouseManager__WEBPACK_IMPORTED_MODULE_8__.MouseManager.mouse.x - DraggingManager.downpos.x, _MouseManager__WEBPACK_IMPORTED_MODULE_8__.MouseManager.mouse.y - DraggingManager.downpos.y);
        }
    }
    static listen() {
        this.snapToGridBasedUpdate();
        _CanvasManager__WEBPACK_IMPORTED_MODULE_5__.CanvasManager.addJob(this.render.bind(this));
        document.body.addEventListener("mousemove", this.#mousemove);
        window.addEventListener("mousedown", this.#mousedown);
        window.addEventListener("mouseup", this.#mouseup);
        document.body.addEventListener("touchmove", this.#touchmove);
        document.body.addEventListener("touchstart", this.#touchstart);
        document.body.addEventListener("touchend", this.#touchend);
    }
    static deafen() {
        this.snapToGridBasedUpdate({ forceClear: true });
        document.body.removeEventListener("mousemove", this.#mousemove);
        window.removeEventListener("mousedown", this.#mousedown);
        window.removeEventListener("mouseup", this.#mouseup);
        document.body.removeEventListener("touchmove", this.#touchmove);
        document.body.removeEventListener("touchstart", this.#touchstart);
        document.body.removeEventListener("touchend", this.#touchend);
    }
    static #mousemove = (e) => {
        this.#mouse.x = e.clientX;
        this.#mouse.y = e.clientY;
        if (this.#dragged) {
            this.#dragged.style.transformOrigin = (0,_reified_Reified__WEBPACK_IMPORTED_MODULE_4__.computeTransformOrigin)(this.#dragged);
            if (DraggingManager.snapToGrid) {
                if (_SelectionManager__WEBPACK_IMPORTED_MODULE_10__.SelectionManager.selected.size <= 1) {
                    this.#dragged.style.left =
                        Math.floor((this.#mouse.x - this.#mouse.ox) / _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE) * _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE + "px";
                    this.#dragged.style.top =
                        Math.floor((this.#mouse.y - this.#mouse.oy) / _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE) * _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE + "px";
                }
                else if (this.#topleft) {
                    const topleft = this.#topleft.getBoundingClientRect();
                    _SelectionManager__WEBPACK_IMPORTED_MODULE_10__.SelectionManager.selected.forEach((component) => {
                        const offset = component.element.getBoundingClientRect();
                        component.move({
                            x: Math.floor((this.#mouse.x - this.#mouse.ox) / _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE) * _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE +
                                offset.left -
                                topleft.left,
                            y: Math.floor((this.#mouse.y - this.#mouse.oy) / _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE) * _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE +
                                offset.top -
                                topleft.top,
                        });
                    });
                }
            }
            else {
                if (_SelectionManager__WEBPACK_IMPORTED_MODULE_10__.SelectionManager.selected.size <= 1) {
                    this.#dragged.style.left = this.#mouse.x - this.#mouse.ox + "px";
                    this.#dragged.style.top = this.#mouse.y - this.#mouse.oy + "px";
                }
                else if (this.#topleft) {
                    const topleft = this.#topleft.getBoundingClientRect();
                    _SelectionManager__WEBPACK_IMPORTED_MODULE_10__.SelectionManager.selected.forEach((component) => {
                        const offset = component.element.getBoundingClientRect();
                        component.move({
                            x: this.#mouse.x - this.#mouse.ox + offset.left - topleft.left,
                            y: this.#mouse.y - this.#mouse.oy + offset.top - topleft.top,
                        });
                    });
                }
            }
        }
    };
    static #mousedown = (e) => {
        const m = e instanceof MouseEvent ? e : e.touches[0];
        this.#mouse.x = m.clientX;
        this.#mouse.y = m.clientY;
        this.#mouse.ix = m.clientX;
        this.#mouse.iy = m.clientY;
        const target = e.target;
        const isOnInvalidTarget = [
            target.closest("button.board-input"),
            target.closest("button.board-output"),
            target.closest("div.component"),
            target.closest("div.display"),
            target.closest("div.contextmenu"),
        ].find((element) => element !== null);
        if (e instanceof MouseEvent) {
            if (!isOnInvalidTarget && e.button === 0) {
                if (_KeybindsManager__WEBPACK_IMPORTED_MODULE_7__.KeybindsManager.isKeyDown("KeyA") && _KeybindsManager__WEBPACK_IMPORTED_MODULE_7__.KeybindsManager.isKeyDown("KeyS")) {
                }
                else if (_KeybindsManager__WEBPACK_IMPORTED_MODULE_7__.KeybindsManager.isKeyDown("KeyA")) {
                    (0,_quickpicks_gates__WEBPACK_IMPORTED_MODULE_3__.quickpickGates)(e);
                }
                else if (_KeybindsManager__WEBPACK_IMPORTED_MODULE_7__.KeybindsManager.isKeyDown("KeyS")) {
                    (0,_quickpicks_components__WEBPACK_IMPORTED_MODULE_2__.quickpickComponents)(e);
                }
                else {
                    this.#downpos.x = m.clientX;
                    this.#downpos.y = m.clientY;
                }
            }
        }
        else {
            if (!isOnInvalidTarget) {
                this.#downpos.x = m.clientX;
                this.#downpos.y = m.clientY;
            }
        }
        this.#mouse.down = true;
    };
    static #mouseup = (e) => {
        this.#mouse.x = e.clientX;
        this.#mouse.y = e.clientY;
        if (this.#dragged) {
            document.querySelectorAll('[data-dragged="true"]').forEach((e) => {
                delete e.dataset.dragged;
                e.style.cursor = "";
            });
            if (_SelectionManager__WEBPACK_IMPORTED_MODULE_10__.SelectionManager.selected.size <= 1) {
                const target = this.#dragged;
                const mouse = this.#mouse;
                const original = this.#original;
                const size = _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE;
                if (mouse.x !== mouse.ix || mouse.y !== mouse.iy)
                    if (DraggingManager.snapToGrid)
                        _SandboxManager__WEBPACK_IMPORTED_MODULE_9__.SandboxManager.pushHistory(() => {
                            target.style.transformOrigin = (0,_reified_Reified__WEBPACK_IMPORTED_MODULE_4__.computeTransformOrigin)(target);
                            target.style.left = Math.floor((mouse.x - mouse.ox - 1) / size) * size + "px";
                            target.style.top = Math.floor((mouse.y - mouse.oy - 1) / size) * size + "px";
                        }, () => {
                            target.style.transformOrigin = (0,_reified_Reified__WEBPACK_IMPORTED_MODULE_4__.computeTransformOrigin)(target);
                            target.style.left = Math.floor((original.x - 1) / size) * size + "px";
                            target.style.top = Math.floor((original.y - 1) / size) * size + "px";
                        });
                    else
                        _SandboxManager__WEBPACK_IMPORTED_MODULE_9__.SandboxManager.pushHistory(() => {
                            target.style.transformOrigin = (0,_reified_Reified__WEBPACK_IMPORTED_MODULE_4__.computeTransformOrigin)(target);
                            target.style.left = mouse.x - mouse.ox - 1 + "px";
                            target.style.top = mouse.y - mouse.oy - 1 + "px";
                        }, () => {
                            target.style.transformOrigin = (0,_reified_Reified__WEBPACK_IMPORTED_MODULE_4__.computeTransformOrigin)(target);
                            target.style.left = original.x - 1 + "px";
                            target.style.top = original.y - 1 + "px";
                        });
            }
            else if (this.#topleft) {
                const mouse = this.#mouse;
                const targets = [..._SelectionManager__WEBPACK_IMPORTED_MODULE_10__.SelectionManager.selected];
                const positions = this.#positions;
                const topleft = this.#topleft.getBoundingClientRect();
                const size = _constants__WEBPACK_IMPORTED_MODULE_1__.GRID_SIZE;
                if (mouse.x !== mouse.ix || mouse.y !== mouse.iy)
                    if (DraggingManager.snapToGrid)
                        _SandboxManager__WEBPACK_IMPORTED_MODULE_9__.SandboxManager.pushHistory(() => {
                            targets.forEach((component) => {
                                const offset = component.element.getBoundingClientRect();
                                component.move({
                                    x: Math.floor((mouse.x - mouse.ox) / size) * size + offset.left - topleft.left,
                                    y: Math.floor((mouse.y - mouse.oy) / size) * size + offset.top - topleft.top,
                                });
                            });
                        }, () => {
                            targets.forEach((component, i) => {
                                component.move(positions[i]);
                            });
                        });
                    else
                        _SandboxManager__WEBPACK_IMPORTED_MODULE_9__.SandboxManager.pushHistory(() => {
                            targets.forEach((component) => {
                                const offset = component.element.getBoundingClientRect();
                                component.move({
                                    x: mouse.x - mouse.ox + offset.left - topleft.left,
                                    y: mouse.y - mouse.oy + offset.top - topleft.top,
                                });
                            });
                        }, () => {
                            targets.forEach((component, i) => {
                                component.move(positions[i]);
                            });
                        });
            }
        }
        if (this.#downpos.x !== -1 &&
            this.#downpos.y !== -1 &&
            _MouseManager__WEBPACK_IMPORTED_MODULE_8__.MouseManager.mouse.x !== -1 &&
            _MouseManager__WEBPACK_IMPORTED_MODULE_8__.MouseManager.mouse.y !== -1)
            _SelectionManager__WEBPACK_IMPORTED_MODULE_10__.SelectionManager.selectAllIn(DraggingManager.#downpos, _MouseManager__WEBPACK_IMPORTED_MODULE_8__.MouseManager.mouse);
        this.#mouse = { x: -1, y: -1, ox: -1, oy: -1, ix: -1, iy: -1, down: false };
        this.#downpos = { x: -1, y: -1 };
        this.#topleft = undefined;
        this.#dragged = undefined;
        this.#original = undefined;
        this.#positions = undefined;
    };
    static #touchmove = (e) => this.#mousemove(e.touches[0]);
    static #touchstart = (e) => this.#mousedown(e);
    static #touchend = (e) => this.#mouseup(e.touches[0]);
    static get downpos() {
        return { ...this.#downpos };
    }
}


/***/ }),

/***/ "./src/managers/KeybindsManager.ts":
/*!*****************************************!*\
  !*** ./src/managers/KeybindsManager.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KeybindsManager": () => (/* binding */ KeybindsManager)
/* harmony export */ });
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../circular */ "./src/circular.ts");
/* harmony import */ var _SandboxManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SandboxManager */ "./src/managers/SandboxManager.ts");


class KeybindsManager {
    static #keymap = new Map();
    static #keychords = new Array();
    static #keydown = (e) => {
        this.#keymap.set(e.code, true);
        if (e.metaKey && (e.code === "ShiftLeft" || e.code === "ShiftRight") && _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            this.#keymap = new Map([...this.#keymap.entries()].filter(([key]) => !key.startsWith("Key")));
        if (document.activeElement === document.body) {
            const [chord, runs] = this.#keychords.find(([chord]) => {
                let keys = chord.split("+");
                const checkShift = keys.includes("ShiftLeft") || keys.includes("ShiftRight");
                const checkCtrl = keys.includes("ControlLeft") || keys.includes("ControlRight");
                const checkAlt = keys.includes("AltLeft") || keys.includes("AltRight");
                const checkMeta = keys.includes("MetaLeft") || keys.includes("MetaRight");
                if (!checkShift && e.shiftKey)
                    return false;
                if (!checkCtrl && e.ctrlKey)
                    return false;
                if (!checkAlt && e.altKey)
                    return false;
                if (!checkMeta && e.metaKey)
                    return false;
                if (checkShift)
                    keys = keys.filter((key) => key !== "ShiftLeft" && key !== "ShiftRight");
                if (checkCtrl)
                    keys = keys.filter((key) => key !== "ControlLeft" && key !== "ControlRight");
                if (checkAlt)
                    keys = keys.filter((key) => key !== "AltLeft" && key !== "AltRight");
                if (checkMeta)
                    keys = keys.filter((key) => key !== "MetaLeft" && key !== "MetaRight");
                return ((checkShift ? e.shiftKey : true) &&
                    (checkCtrl ? e.ctrlKey : true) &&
                    (checkAlt ? e.altKey : true) &&
                    (checkMeta ? e.metaKey : true) &&
                    keys.every((key) => this.#keymap.get(key)));
            }) ?? [];
            if (runs) {
                _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.killMenu();
                runs.forEach((run) => run.call(undefined, e));
                chord.split("+").forEach((key) => {
                    if (key.startsWith("Key"))
                        this.#keymap.delete(key);
                });
            }
        }
    };
    static #keyup = (e) => {
        this.#keymap.delete(e.code);
        if (!e.metaKey && (e.code === "MetaLeft" || e.code === "MetaRight") && _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS)
            this.#keymap.clear();
    };
    static #blur = () => {
        this.#keymap.clear();
    };
    static listen() {
        document.addEventListener("keydown", this.#keydown);
        document.addEventListener("keyup", this.#keyup);
        document.addEventListener("blur", this.#blur);
        return this;
    }
    static deafen() {
        document.removeEventListener("keydown", this.#keydown);
        document.removeEventListener("keyup", this.#keyup);
        document.removeEventListener("blur", this.#blur);
        return this;
    }
    static onKeyChord(chord, run) {
        chord = chord.split("+").sort().join("+");
        if (!this.#keychords.find(([key]) => key === chord)?.[1].push(run))
            this.#keychords.push([chord, [run]]);
        return this;
    }
    static isKeyDownAndNoFocus(key) {
        return !!this.#keymap.get(key) && document.activeElement === document.body;
    }
    static isKeyDown(key) {
        return !!this.#keymap.get(key);
    }
    static reset() {
        this.#keymap.clear();
        this.#keychords = [];
        this.deafen();
        return this;
    }
    static expand(chord) {
        const [key, ...rest] = chord.split("+");
        if (key === "Shift" || key === "Control" || key === "Alt" || key === "Meta")
            return rest.length
                ? this.expand(rest.join("+")).flatMap((keys) => [
                    [`${key}Left`, keys].join("+"),
                    [`${key}Right`, keys].join("+"),
                ])
                : [`${key}Left`, `${key}Right`];
        if (key.length === 1 && key === key.toUpperCase())
            return rest.length
                ? this.expand(rest.join("+")).flatMap((keys) => [[`Key${key}`, keys].join("+")])
                : [`Key${key}`];
        return [chord];
    }
    static assign(chord, run) {
        return Object.fromEntries(this.expand(chord)
            .map((keys) => [keys, run])
            .concat([[chord, run]]));
    }
}


/***/ }),

/***/ "./src/managers/MenuManager.ts":
/*!*************************************!*\
  !*** ./src/managers/MenuManager.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MenuManager": () => (/* binding */ MenuManager)
/* harmony export */ });
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");

class MenuManager {
    static #elements = new Map();
    static #opened;
    static use(element, actions) {
        const menu = _reified_Reified__WEBPACK_IMPORTED_MODULE_0__.html `<div class="contextmenu"></div>`;
        const clicks = new Map();
        const setup = (actions) => {
            clicks.clear();
            const keys = actions.flatMap((record) => Object.keys(record));
            if (keys.length !== new Set(keys).size)
                throw new Error("Duplicate keys in menu actions.");
            menu.innerHTML = actions
                .map((record) => Object.entries(record)
                .map(([name, { label, keybind }]) => keybind
                ? `<button class="${name}">${label}<p class="menu-keybind">${keybind
                    .split(" ")
                    .map((key) => `<span>${key}</span>`)
                    .join("")}</p></button>`
                : `<button class="${name}">${label}</button>`)
                .join(""))
                .join('<div class="br"></div>');
            actions.forEach((record) => {
                Object.keys(record).forEach((key) => {
                    const click = record[key].callback.bind(undefined);
                    const listener = (e) => {
                        click(this.#opened);
                        if (record[key].stopPropagation)
                            e.stopPropagation();
                    };
                    menu.querySelector("." + key).addEventListener("mousedown", listener);
                    clicks.set(key, listener);
                });
            });
        };
        let context;
        const getActions = () => {
            if (context) {
                const actions = context;
                context = undefined;
                return actions;
            }
            return actions;
        };
        setup(getActions());
        menu.style.left = "0px";
        menu.style.top = "0px";
        menu.style.display = "none";
        document.body.appendChild(menu);
        const mousedown = (e) => {
            setup(getActions());
            this.#opened = e;
            menu.style.left = "0px";
            menu.style.top = "0px";
            menu.style.display = "none";
        };
        const contextmenu = (e) => {
            e.preventDefault();
            setup(getActions());
            menu.style.display = "";
            menu.style.left = e.clientX + "px";
            menu.style.top = e.clientY + "px";
        };
        const click = (e) => {
            e.preventDefault();
            setup(getActions());
            menu.style.left = "0px";
            menu.style.top = "0px";
            menu.style.display = "none";
        };
        element.addEventListener("mousedown", mousedown);
        element.addEventListener("contextmenu", contextmenu);
        menu.addEventListener("click", click);
        menu.addEventListener("contextmenu", click);
        this.#elements.set(element, { menu, clicks, listeners: { mousedown, contextmenu, click } });
        return [
            (newContext) => {
                context = newContext.call(undefined, [...actions]);
            },
            () => {
                setup(getActions());
                menu.style.left = "0px";
                menu.style.top = "0px";
                menu.style.display = "none";
            },
        ];
    }
    static remove(element) {
        const { menu, clicks, listeners } = this.#elements.get(element) ?? {};
        if (!menu || !clicks || !listeners)
            throw new Error(`Elements are not being affected.`);
        element.removeEventListener("mousedown", listeners.mousedown);
        element.removeEventListener("contextmenu", listeners.contextmenu);
        menu.removeEventListener("click", listeners.click);
        menu.removeEventListener("contextmenu", listeners.click);
        Array.from(clicks).forEach(([key, listener]) => {
            menu.querySelector("." + key).removeEventListener("mousedown", listener);
        });
        menu.remove();
        return this;
    }
}


/***/ }),

/***/ "./src/managers/ModalManager.ts":
/*!**************************************!*\
  !*** ./src/managers/ModalManager.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModalManager": () => (/* binding */ ModalManager)
/* harmony export */ });
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _SandboxManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SandboxManager */ "./src/managers/SandboxManager.ts");


class ModalManager {
    static #abort;
    static get container() {
        return document.querySelector(".modal-container");
    }
    static #onModalMount() {
        _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.killMenu();
        if (this.container.childElementCount <= 0) {
            this.container.classList.remove("modal-inactive");
            if (this.#abort)
                this.#abort.abort();
            requestAnimationFrame(() => {
                this.container.style.opacity = "1";
            });
        }
        else
            this.container.lastElementChild.classList.add("modal-inactive");
    }
    static #onModalUnmount() {
        if (this.container.childElementCount <= 0) {
            requestAnimationFrame(() => {
                this.container.style.opacity = "0";
                this.#abort = new AbortController();
                this.container.addEventListener("transitionend", () => {
                    this.container.classList.add("modal-inactive");
                }, { once: true, signal: this.#abort.signal });
            });
        }
        else {
            this.container.lastElementChild.classList.remove("modal-inactive");
            if (this.container.lastElementChild.classList.contains("modal-alert")) {
                this.container.lastElementChild.querySelector(".modal-ok").focus();
            }
        }
    }
    static async alert(content) {
        this.#onModalMount();
        const alert = _reified_Reified__WEBPACK_IMPORTED_MODULE_0__.html `
            <div class="modal modal-alert">
                <p class="modal-message"></p>
                <div class="button-container">
                    <button class="modal-ok">Ok</button>
                </div>
            </div>
        `;
        if (typeof content === "string") {
            alert.children[0].textContent = content;
        }
        else {
            alert.children[0].appendChild(content);
        }
        this.container.appendChild(alert);
        alert.querySelector(".modal-ok").focus();
        return new Promise((resolve) => {
            const finish = () => resolve(undefined);
            _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.watchedUnresolvedPromises.add(finish);
            const done = () => {
                alert.remove();
                this.#onModalUnmount();
                _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.watchedUnresolvedPromises["delete"](finish);
                return finish();
            };
            const esc = (e) => {
                if (e.code === "Escape") {
                    e.preventDefault();
                    document.removeEventListener("keydown", esc);
                    done();
                }
            };
            document.addEventListener("keydown", esc);
            const clickout = (e) => {
                const target = e.target;
                if (target !== this.container || this.container.lastElementChild !== alert)
                    return;
                this.container.removeEventListener("mousedown", clickout);
                done();
            };
            this.container.addEventListener("mousedown", clickout);
            alert.querySelector(".modal-ok").addEventListener("click", done);
        });
    }
    static async confirm(content) {
        this.#onModalMount();
        const confirm = _reified_Reified__WEBPACK_IMPORTED_MODULE_0__.html `
            <div class="modal modal-confirm">
                <p class="modal-message"></p>
                <div class="button-container">
                    <button class="modal-ok">Ok</button>
                    <button class="modal-cancel">Cancel</button>
                </div>
            </div>
        `;
        if (typeof content === "string") {
            confirm.children[0].textContent = content;
        }
        else {
            confirm.children[0].appendChild(content);
        }
        this.container.appendChild(confirm);
        confirm.querySelector(".modal-ok").focus();
        return new Promise((resolve) => {
            const finish = () => resolve(false);
            _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.watchedUnresolvedPromises.add(finish);
            const handler = (value) => () => {
                confirm.remove();
                this.#onModalUnmount();
                _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.watchedUnresolvedPromises["delete"](finish);
                return resolve(value);
            };
            const esc = (e) => {
                if (e.code === "Escape") {
                    e.preventDefault();
                    document.removeEventListener("keydown", esc);
                    confirm.remove();
                    this.#onModalUnmount();
                    _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.watchedUnresolvedPromises["delete"](finish);
                    resolve(false);
                }
            };
            document.addEventListener("keydown", esc);
            const clickout = (e) => {
                const target = e.target;
                if (target !== this.container || this.container.lastElementChild !== confirm)
                    return;
                this.container.removeEventListener("mousedown", clickout);
                confirm.remove();
                this.#onModalUnmount();
                _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.watchedUnresolvedPromises["delete"](finish);
                return resolve(false);
            };
            this.container.addEventListener("mousedown", clickout);
            confirm.querySelector(".modal-cancel").addEventListener("click", handler(false));
            confirm.querySelector(".modal-ok").addEventListener("click", handler(true));
        });
    }
    static async prompt(content) {
        this.#onModalMount();
        const prompt = _reified_Reified__WEBPACK_IMPORTED_MODULE_0__.html `
            <div class="modal modal-prompt">
                <p class="modal-message"></p>
                <input class="modal-input" type="text" />
                <div class="button-container">
                    <button class="modal-ok">Ok</button>
                    <button class="modal-cancel">Cancel</button>
                </div>
            </div>
        `;
        if (typeof content === "string") {
            prompt.children[0].textContent = content;
        }
        else {
            prompt.children[0].appendChild(content);
        }
        this.container.appendChild(prompt);
        prompt.querySelector(".modal-input").focus();
        return new Promise((resolve) => {
            const finish = () => resolve(undefined);
            _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.watchedUnresolvedPromises.add(finish);
            const done = () => {
                prompt.remove();
                this.#onModalUnmount();
                _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.watchedUnresolvedPromises["delete"](finish);
            };
            const esc = (e) => {
                if (e.code === "Escape") {
                    e.preventDefault();
                    document.removeEventListener("keydown", esc);
                    done();
                    finish();
                }
            };
            document.addEventListener("keydown", esc);
            const clickout = (e) => {
                const target = e.target;
                if (target !== this.container || this.container.lastElementChild !== prompt)
                    return;
                this.container.removeEventListener("mousedown", clickout);
                done();
                resolve(undefined);
            };
            this.container.addEventListener("mousedown", clickout);
            prompt.querySelector(".modal-input").addEventListener("keydown", (e) => {
                if (e.key === "Enter") {
                    e.preventDefault();
                    done();
                    return resolve(prompt.querySelector(".modal-input").value);
                }
            });
            prompt.querySelector(".modal-cancel").addEventListener("click", () => {
                done();
                return finish();
            });
            prompt.querySelector(".modal-ok").addEventListener("click", () => {
                done();
                return resolve(prompt.querySelector(".modal-input").value);
            });
        });
    }
    static async popup(content, onMount, onUnmount) {
        this.#onModalMount();
        const popup = _reified_Reified__WEBPACK_IMPORTED_MODULE_0__.html `
            <div class="modal modal-alert modal-popup">
                <div class="modal-message"></div>
                <div class="button-container">
                    <button class="modal-ok">Ok</button>
                </div>
            </div>
        `;
        if (typeof content === "string") {
            popup.children[0].textContent = content;
        }
        else {
            popup.children[0].appendChild(content);
        }
        this.container.appendChild(popup);
        popup.querySelector(".modal-ok").focus();
        requestAnimationFrame(() => onMount?.call(undefined));
        let close;
        const out = [
            new Promise((resolve) => {
                const finish = () => resolve(undefined);
                _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.watchedUnresolvedPromises.add(finish);
                const done = () => {
                    popup.remove();
                    requestAnimationFrame(() => onUnmount?.call(undefined));
                    this.#onModalUnmount();
                    _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.watchedUnresolvedPromises["delete"](finish);
                    return finish();
                };
                close = done;
                const esc = (e) => {
                    if (e.code === "Escape") {
                        e.preventDefault();
                        document.removeEventListener("keydown", esc);
                        done();
                    }
                };
                document.addEventListener("keydown", esc);
                const clickout = (e) => {
                    const target = e.target;
                    if (target !== this.container || this.container.lastElementChild !== popup)
                        return;
                    this.container.removeEventListener("mousedown", clickout);
                    done();
                };
                this.container.addEventListener("mousedown", clickout);
                popup.querySelector(".modal-ok").addEventListener("click", done);
            }),
        ];
        out.push(close);
        return out;
    }
}


/***/ }),

/***/ "./src/managers/MouseManager.ts":
/*!**************************************!*\
  !*** ./src/managers/MouseManager.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MouseManager": () => (/* binding */ MouseManager)
/* harmony export */ });
class MouseManager {
    static #mouse = { x: 0, y: 0 };
    static #mousedowns = new Set();
    static #mouseups = new Set();
    static #touchstarts = new Set();
    static #touchends = new Set();
    static #mousemove = (e) => {
        this.#mouse.x = e.clientX;
        this.#mouse.y = e.clientY;
    };
    static #mousedown = (e) => {
        this.#mouse.x = e.clientX;
        this.#mouse.y = e.clientY;
        this.#mousedowns.forEach((l) => l.call(undefined, e));
    };
    static #mouseup = (e) => {
        this.#mouse.x = e.clientX;
        this.#mouse.y = e.clientY;
        this.#mouseups.forEach((l) => l.call(undefined, e));
    };
    static #touchmove = (e) => {
        this.#mouse.x = e.touches[0].clientX;
        this.#mouse.y = e.touches[0].clientY;
    };
    static #touchstart = (e) => {
        this.#mouse.x = e.touches[0].clientX;
        this.#mouse.y = e.touches[0].clientY;
        this.#touchstarts.forEach((l) => l.call(undefined, e));
    };
    static #touchend = (e) => {
        this.#mouse.x = e.changedTouches[0].clientX;
        this.#mouse.y = e.changedTouches[0].clientY;
        this.#touchends.forEach((l) => l.call(undefined, e));
    };
    static start() {
        document.addEventListener("mousemove", this.#mousemove);
        document.addEventListener("mousedown", this.#mousedown);
        document.addEventListener("mouseup", this.#mouseup);
        document.addEventListener("touchmove", this.#touchmove);
        document.addEventListener("touchstart", this.#touchstart);
        document.addEventListener("touchend", this.#touchend);
        return this;
    }
    static stop() {
        document.removeEventListener("mousemove", this.#mousemove);
        document.removeEventListener("mousedown", this.#mousedown);
        document.removeEventListener("mouseup", this.#mouseup);
        document.removeEventListener("touchmove", this.#touchmove);
        document.removeEventListener("touchstart", this.#touchstart);
        document.removeEventListener("touchend", this.#touchend);
        this.#mouse = { x: 0, y: 0 };
        return this;
    }
    static reset() {
        this.stop();
        this.#mousedowns.clear();
        this.#mouseups.clear();
        return this;
    }
    static onMouseDown(handler) {
        this.#mousedowns.add(handler);
        return this;
    }
    static onMouseUp(handler) {
        this.#mouseups.add(handler);
        return this;
    }
    static offMouseDown(handler) {
        this.#mousedowns.delete(handler);
        return this;
    }
    static offMouseUp(handler) {
        this.#mouseups.delete(handler);
        return this;
    }
    static onTouchStart(handler) {
        this.#touchstarts.add(handler);
        return this;
    }
    static onTouchEnd(handler) {
        this.#touchends.add(handler);
        return this;
    }
    static offTouchStart(handler) {
        this.#touchstarts.delete(handler);
        return this;
    }
    static offTouchEnd(handler) {
        this.#touchends.delete(handler);
        return this;
    }
    static get mouse() {
        return { ...this.#mouse };
    }
}


/***/ }),

/***/ "./src/managers/QuickPickManager.ts":
/*!******************************************!*\
  !*** ./src/managers/QuickPickManager.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "QuickPickManager": () => (/* binding */ QuickPickManager)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _CanvasManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CanvasManager */ "./src/managers/CanvasManager.ts");



class QuickPickManager {
    static #line;
    static async activate(event, actions) {
        const quickpick = _reified_Reified__WEBPACK_IMPORTED_MODULE_1__.html `<div class="quickpick"></div>`;
        const keys = actions.map(({ label }) => label);
        if (keys.length !== new Set(keys).size)
            throw new Error("Duplicate labels in quickpick actions.");
        quickpick.innerHTML = actions
            .map(({ label }, i) => `<div class="quickpick-item index-${i}">${label}</div>`)
            .join("");
        requestAnimationFrame(() => {
            const circle = _reified_Reified__WEBPACK_IMPORTED_MODULE_1__.html `
                <svg
                    class="quickpick-circle"
                    width="${_constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE * 2}"
                    height="${_constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE * 2}"
                    version="1.1"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    <circle
                        cx="${_constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE}"
                        cy="${_constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE}"
                        r="${_constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE / 2 - 1 - 1}"
                        stroke="${(0,_constants__WEBPACK_IMPORTED_MODULE_0__.GET_GRAY_COLOR)()}"
                        stroke-width="2px"
                        fill="none"
                    />
                    ${actions.map((_, i) => {
                const angle = ((2 * Math.PI) / actions.length) * i - Math.PI / 2 - Math.PI / actions.length;
                const linePath = `M${Math.cos(angle) * (_constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE - 1 - 1) + _constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE},${Math.sin(angle) * (_constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE - 1 - 1) + _constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE} L${Math.cos(angle) * (_constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE / 2 - 1 - 1) + _constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE},${Math.sin(angle) * (_constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE / 2 - 1 - 1) + _constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE}`;
                return `<path d="${linePath}" style="stroke: ${(0,_constants__WEBPACK_IMPORTED_MODULE_0__.GET_GRAY_COLOR)()}; stroke-width: 2px; fill: none;" />`;
            })}
                </svg>
            `;
            quickpick.appendChild(circle);
            requestAnimationFrame(() => {
                const { width, height } = circle.getBoundingClientRect();
                circle.style.left = event.clientX - width / 2 + "px";
                circle.style.top = event.clientY - height / 2 + "px";
            });
            actions.forEach((_, i) => {
                const angle = ((2 * Math.PI) / actions.length) * i - Math.PI / 2;
                const x = Math.cos(angle) * _constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE;
                const y = Math.sin(angle) * _constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE;
                const item = quickpick.querySelector(".index-" + i);
                const { width, height } = item.getBoundingClientRect();
                item.style.transitionDelay = i * (200 / actions.length) + "ms";
                item.style.animationDelay = i * (200 / actions.length) + "ms";
                item.style.left = event.clientX + (2 * x) / 3 - width / 2 + "px";
                item.style.top = event.clientY + (2 * y) / 3 - height / 2 + "px";
                requestAnimationFrame(() => {
                    item.style.left = event.clientX + x - width / 2 + "px";
                    item.style.top = event.clientY + y - height / 2 + "px";
                });
            });
        });
        document.body.appendChild(quickpick);
        this.#line = [event, event];
        const mousemove = (e) => (this.#line = [event, e]);
        document.body.addEventListener("mousemove", mousemove);
        document.body.addEventListener("mouseup", (e) => {
            const distance = Math.hypot(e.clientX - event.clientX, e.clientY - event.clientY);
            if (distance >= _constants__WEBPACK_IMPORTED_MODULE_0__.QUICKPICK_SIZE / 2) {
                const angle = Math.atan2(e.clientY - event.clientY, e.clientX - event.clientX) + Math.PI / 2;
                const closest = (Math.round(angle / ((2 * Math.PI) / actions.length)) + actions.length) % actions.length;
                actions[closest].callback.call(undefined, event);
            }
            quickpick.remove();
            document.body.removeEventListener("mousemove", mousemove);
            this.#line = undefined;
        }, { once: true });
        document.body.addEventListener("mouseleave", () => {
            quickpick.remove();
            document.body.removeEventListener("mousemove", mousemove);
            this.#line = undefined;
        }, { once: true });
    }
    static render({ fg }) {
        if (this.#line) {
            const [from, to] = this.#line;
            fg.fillStyle = (0,_constants__WEBPACK_IMPORTED_MODULE_0__.GET_GRAY_COLOR)();
            fg.strokeStyle = (0,_constants__WEBPACK_IMPORTED_MODULE_0__.GET_GRAY_COLOR)();
            fg.lineWidth = 1;
            fg.beginPath();
            fg.arc(from.clientX, from.clientY, 2, 0, Math.PI * 2);
            fg.closePath();
            fg.fill();
            fg.beginPath();
            fg.moveTo(from.clientX, from.clientY);
            fg.lineTo(to.clientX, to.clientY);
            fg.closePath();
            fg.stroke();
            fg.beginPath();
            fg.arc(to.clientX, to.clientY, 2, 0, Math.PI * 2);
            fg.closePath();
            fg.fill();
        }
    }
    static init() {
        _CanvasManager__WEBPACK_IMPORTED_MODULE_2__.CanvasManager.addJob(this.render.bind(this));
    }
}


/***/ }),

/***/ "./src/managers/SandboxManager.ts":
/*!****************************************!*\
  !*** ./src/managers/SandboxManager.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SandboxManager": () => (/* binding */ SandboxManager)
/* harmony export */ });
/* harmony import */ var _augments_WatchedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../augments/WatchedSet */ "./src/augments/WatchedSet.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _files__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../files */ "./src/files.ts");
/* harmony import */ var _reified_Component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reified/Component */ "./src/reified/Component.ts");
/* harmony import */ var _reified_Display__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../reified/Display */ "./src/reified/Display.ts");
/* harmony import */ var _reified_Input__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reified/Input */ "./src/reified/Input.ts");
/* harmony import */ var _reified_Output__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../reified/Output */ "./src/reified/Output.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _CanvasManager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./CanvasManager */ "./src/managers/CanvasManager.ts");
/* harmony import */ var _DarkmodeManager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./DarkmodeManager */ "./src/managers/DarkmodeManager.ts");
/* harmony import */ var _DraggingManager__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./DraggingManager */ "./src/managers/DraggingManager.ts");
/* harmony import */ var _KeybindsManager__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./KeybindsManager */ "./src/managers/KeybindsManager.ts");
/* harmony import */ var _MenuManager__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./MenuManager */ "./src/managers/MenuManager.ts");
/* harmony import */ var _ModalManager__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ModalManager */ "./src/managers/ModalManager.ts");
/* harmony import */ var _MouseManager__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./MouseManager */ "./src/managers/MouseManager.ts");
/* harmony import */ var _QuickPickManager__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./QuickPickManager */ "./src/managers/QuickPickManager.ts");
/* harmony import */ var _SelectionManager__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./SelectionManager */ "./src/managers/SelectionManager.ts");
/* harmony import */ var _SettingsManager__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./SettingsManager */ "./src/managers/SettingsManager.ts");
/* harmony import */ var _StorageManager__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./StorageManager */ "./src/managers/StorageManager.ts");
/* harmony import */ var _ToastManager__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ToastManager */ "./src/managers/ToastManager.ts");
/* harmony import */ var _ToolsManager__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ToolsManager */ "./src/managers/ToolsManager.ts");
/* harmony import */ var _UndoRedoManager__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./UndoRedoManager */ "./src/managers/UndoRedoManager.ts");
/* harmony import */ var _WiringManager__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./WiringManager */ "./src/managers/WiringManager.ts");























const calculateReifiedTotals = (set) => [...set].reduce((map, item) => {
    if (item instanceof _reified_Input__WEBPACK_IMPORTED_MODULE_5__.Input) {
        map.inputsTotal++;
    }
    else if (item instanceof _reified_Output__WEBPACK_IMPORTED_MODULE_6__.Output) {
        map.outputsTotal++;
    }
    else if (item instanceof _reified_Component__WEBPACK_IMPORTED_MODULE_3__.Component) {
        map.chipsTotal++;
        map.chips.set(item.chip.name, (map.chips.get(item.chip.name) ?? 0) + 1);
    }
    else if (item instanceof _reified_Display__WEBPACK_IMPORTED_MODULE_4__.Display) {
    }
    else {
        throw new Error("Unknown component type.");
    }
    return map;
}, {
    inputsTotal: 0,
    outputsTotal: 0,
    chipsTotal: 0,
    chips: new Map(),
});
class SandboxManager {
    static queueNewContext;
    static killMenu;
    static watchedUnresolvedPromises = new Set();
    static #interval = -1;
    static #observer;
    static #history = new Array();
    static #redos = new Array();
    static #config;
    static setup(config) {
        if (this.#observer)
            this.#observer.disconnect();
        clearInterval(this.#interval);
        this.#config = config;
        document.body.innerHTML = "";
        document.body.appendChild(_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.html `<div class="modal-container modal-inactive"></div>`);
        document.body.appendChild(_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.html `<div class="reified-root"></div>`);
        document.body.appendChild(_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.html `<canvas class="background-canvas"></canvas>`);
        document.body.appendChild(_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.html `<canvas class="foreground-canvas"></canvas>`);
        document.body.appendChild(_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.html `<div class="toasts-container"></div>`);
        document.body.appendChild(_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.html `<button class="tools"></button>`);
        document.body.appendChild(_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.html `<button class="settings"></button>`);
        document.body.appendChild(_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.html `<button class="darkmode"></button>`);
        document.body.appendChild(_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.html `<button class="undo"></button>`);
        document.body.appendChild(_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.html `<button class="redo"></button>`);
        _MouseManager__WEBPACK_IMPORTED_MODULE_14__.MouseManager.start();
        _KeybindsManager__WEBPACK_IMPORTED_MODULE_11__.KeybindsManager.listen();
        _SelectionManager__WEBPACK_IMPORTED_MODULE_16__.SelectionManager.listen();
        _DraggingManager__WEBPACK_IMPORTED_MODULE_10__.DraggingManager.listen();
        _WiringManager__WEBPACK_IMPORTED_MODULE_22__.WiringManager.init();
        _QuickPickManager__WEBPACK_IMPORTED_MODULE_15__.QuickPickManager.init();
        _CanvasManager__WEBPACK_IMPORTED_MODULE_8__.CanvasManager.start();
        _ToolsManager__WEBPACK_IMPORTED_MODULE_20__.ToolsManager.listen();
        _SettingsManager__WEBPACK_IMPORTED_MODULE_17__.SettingsManager.listen();
        _DarkmodeManager__WEBPACK_IMPORTED_MODULE_9__.DarkmodeManager.listen().onChange(() => _DraggingManager__WEBPACK_IMPORTED_MODULE_10__.DraggingManager.snapToGridBasedUpdate({ onlyUpdateColor: true }));
        _UndoRedoManager__WEBPACK_IMPORTED_MODULE_21__.UndoRedoManager.listen();
        const createReifiedActive = (components) => new _augments_WatchedSet__WEBPACK_IMPORTED_MODULE_0__.WatchedSet()
            .onAdd((item, set) => {
            const totals = calculateReifiedTotals(set.clone().add(item));
            if (totals.chipsTotal + totals.inputsTotal + totals.outputsTotal >
                (this.#config.limits?.componentsTotal ?? Infinity)) {
                _ToastManager__WEBPACK_IMPORTED_MODULE_19__.ToastManager.toast({
                    message: "Exceeded total components limit.",
                    color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                    duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                });
                return false;
            }
            if (totals.inputsTotal > (this.#config.limits?.inputs ?? Infinity)) {
                _ToastManager__WEBPACK_IMPORTED_MODULE_19__.ToastManager.toast({
                    message: "Exceeded total inputs limit.",
                    color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                    duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                });
                return false;
            }
            if (totals.outputsTotal > (this.#config.limits?.outputs ?? Infinity)) {
                _ToastManager__WEBPACK_IMPORTED_MODULE_19__.ToastManager.toast({
                    message: "Exceeded total outputs limit.",
                    color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                    duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                });
                return false;
            }
            if (totals.chipsTotal > (this.#config.limits?.chipsTotal ?? Infinity)) {
                _ToastManager__WEBPACK_IMPORTED_MODULE_19__.ToastManager.toast({
                    message: "Exceeded total chips limit.",
                    color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                    duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                });
                return false;
            }
            if (item instanceof _reified_Component__WEBPACK_IMPORTED_MODULE_3__.Component &&
                totals.chips.has(item.chip.name) &&
                totals.chips.get(item.chip.name) > (this.#config.limits?.chips?.[item.chip.name] ?? Infinity)) {
                _ToastManager__WEBPACK_IMPORTED_MODULE_19__.ToastManager.toast({
                    message: `Exceeded total '${item.chip.name}' limit.`,
                    color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                    duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                });
                return false;
            }
            return true;
        })
            .onAdd(() => {
            _DraggingManager__WEBPACK_IMPORTED_MODULE_10__.DraggingManager.snapToGridBasedUpdate();
            return true;
        })
            .addAll(components);
        const createWiringsSet = (wirings) => new _augments_WatchedSet__WEBPACK_IMPORTED_MODULE_0__.WatchedSet()
            .onAdd((_, set) => {
            if (set.size + 1 > (this.#config.limits?.wirings ?? Infinity)) {
                _ToastManager__WEBPACK_IMPORTED_MODULE_19__.ToastManager.toast({
                    message: "Exceeded total wirings limit.",
                    color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                    duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                });
                return false;
            }
            return true;
        })
            .addAll(wirings);
        if (typeof this.#config.menu !== "undefined")
            [this.queueNewContext, this.killMenu] = _MenuManager__WEBPACK_IMPORTED_MODULE_12__.MenuManager.use(_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.root, this.#config.menu);
        if (typeof this.#config.keybinds !== "undefined")
            Object.entries(this.#config.keybinds).forEach(([chord, run]) => _KeybindsManager__WEBPACK_IMPORTED_MODULE_11__.KeybindsManager.onKeyChord(chord, run));
        if (typeof this.#config.initial !== "undefined") {
            this.clear();
            _reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active = createReifiedActive(this.#config.initial[0]);
            _reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active.forEach((component) => component.attach());
            _WiringManager__WEBPACK_IMPORTED_MODULE_22__.WiringManager.wires = createWiringsSet(this.#config.initial[1]);
        }
        if (typeof this.#config.save !== "undefined") {
            const file = _StorageManager__WEBPACK_IMPORTED_MODULE_18__.StorageManager.get("saves:" + this.#config.save);
            if (file) {
                const { error, result: [settings, components, wires], } = (0,_files__WEBPACK_IMPORTED_MODULE_2__.fromFile)(file);
                if (error) {
                    _StorageManager__WEBPACK_IMPORTED_MODULE_18__.StorageManager["delete"]("saves:" + this.#config.save);
                    if (_constants__WEBPACK_IMPORTED_MODULE_1__.IN_DEBUG_MODE)
                        console.error("Failed to read from saves:", error);
                    _ToastManager__WEBPACK_IMPORTED_MODULE_19__.ToastManager.toast({
                        message: "Unable to read from saves.",
                        color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                        duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                    });
                }
                else {
                    if (!this.#config.overrideSaveIfExists) {
                        this.clear();
                        this.applyRawSettings(settings);
                        _reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active = createReifiedActive(components);
                        _reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active.forEach((component) => component.attach());
                        _WiringManager__WEBPACK_IMPORTED_MODULE_22__.WiringManager.wires = createWiringsSet(wires);
                    }
                    _StorageManager__WEBPACK_IMPORTED_MODULE_18__.StorageManager.set("saves:" + this.#config.save, (0,_files__WEBPACK_IMPORTED_MODULE_2__.saveDiagram)([..._reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active], [..._WiringManager__WEBPACK_IMPORTED_MODULE_22__.WiringManager.wires]));
                }
            }
        }
        this.#observer = new MutationObserver(() => {
            if (typeof this.#config.save !== "undefined")
                _StorageManager__WEBPACK_IMPORTED_MODULE_18__.StorageManager.set("saves:" + this.#config.save, (0,_files__WEBPACK_IMPORTED_MODULE_2__.saveDiagram)([..._reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active], [..._WiringManager__WEBPACK_IMPORTED_MODULE_22__.WiringManager.wires]));
        });
        this.#observer.observe(_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.root, {
            attributes: true,
            attributeOldValue: true,
            characterData: true,
            characterDataOldValue: true,
            subtree: true,
        });
        this.#interval = setInterval(() => {
            const check = this.#config.checkState?.(_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active.clone(), _WiringManager__WEBPACK_IMPORTED_MODULE_22__.WiringManager.wires.clone()) ?? false;
            if (check)
                this.#config.ifStateChecked?.();
        }, this.#config.checkInterval ?? 50);
        if (!_StorageManager__WEBPACK_IMPORTED_MODULE_18__.StorageManager.get("usedhelp"))
            _ToastManager__WEBPACK_IMPORTED_MODULE_19__.ToastManager.toast({
                message: "Press '?' for help.",
                color: _constants__WEBPACK_IMPORTED_MODULE_1__.LIGHT_GRAY_CSS_COLOR,
                duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
            });
        requestAnimationFrame(() => _DraggingManager__WEBPACK_IMPORTED_MODULE_10__.DraggingManager.snapToGridBasedUpdate());
        return this;
    }
    static forceSave() {
        if (typeof this.#config.save !== "undefined")
            _StorageManager__WEBPACK_IMPORTED_MODULE_18__.StorageManager.set("saves:" + this.#config.save, (0,_files__WEBPACK_IMPORTED_MODULE_2__.saveDiagram)([..._reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active], [..._WiringManager__WEBPACK_IMPORTED_MODULE_22__.WiringManager.wires]));
        return this;
    }
    static reset() {
        if (this.#observer) {
            this.#observer.disconnect();
            this.#observer = undefined;
        }
        clearInterval(this.#interval);
        this.#interval = -1;
        _MouseManager__WEBPACK_IMPORTED_MODULE_14__.MouseManager.reset();
        _KeybindsManager__WEBPACK_IMPORTED_MODULE_11__.KeybindsManager.reset();
        _SelectionManager__WEBPACK_IMPORTED_MODULE_16__.SelectionManager.reset();
        _DraggingManager__WEBPACK_IMPORTED_MODULE_10__.DraggingManager.reset();
        _CanvasManager__WEBPACK_IMPORTED_MODULE_8__.CanvasManager.stop();
        _ToolsManager__WEBPACK_IMPORTED_MODULE_20__.ToolsManager.stop();
        _SettingsManager__WEBPACK_IMPORTED_MODULE_17__.SettingsManager.stop();
        _DarkmodeManager__WEBPACK_IMPORTED_MODULE_9__.DarkmodeManager.stop();
        _UndoRedoManager__WEBPACK_IMPORTED_MODULE_21__.UndoRedoManager.stop();
        _MenuManager__WEBPACK_IMPORTED_MODULE_12__.MenuManager.remove(_reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.root);
        this.clear();
        this.watchedUnresolvedPromises.forEach((finish) => finish.call(undefined));
        this.watchedUnresolvedPromises.clear();
        document.body.innerHTML = "";
        this.#config = {};
        this.#history = [];
        this.#redos = [];
        return this;
    }
    static clear() {
        _reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active.forEach((component) => component.detach());
        _WiringManager__WEBPACK_IMPORTED_MODULE_22__.WiringManager.wires.forEach((wire) => wire.destroy());
        _SelectionManager__WEBPACK_IMPORTED_MODULE_16__.SelectionManager.selected.clear();
        return this;
    }
    static pushHistory(command, undo) {
        this.#redos.length = 0;
        command.call(undefined);
        this.#history.push([command, undo]);
        return this;
    }
    static popHistory() {
        if (!this.#history.length) {
            _ToastManager__WEBPACK_IMPORTED_MODULE_19__.ToastManager.toast({
                message: "Nothing to undo.",
                color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
            });
            return this;
        }
        const [redo, undo] = this.#history.pop();
        this.#redos.push([redo, undo]);
        undo.call(undefined);
        return this;
    }
    static redoHistory() {
        if (!this.#redos.length) {
            _ToastManager__WEBPACK_IMPORTED_MODULE_19__.ToastManager.toast({
                message: "Nothing to redo.",
                color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
            });
            return this;
        }
        const [command, undo] = this.#redos.pop();
        this.#history.push([command, undo]);
        command.call(undefined);
        return this;
    }
    static applySettings(settings) {
        _DraggingManager__WEBPACK_IMPORTED_MODULE_10__.DraggingManager.snapToGrid = settings.snapToGrid ?? false;
        return this;
    }
    static applyRawSettings(settings) {
        _DraggingManager__WEBPACK_IMPORTED_MODULE_10__.DraggingManager.snapToGrid = settings["DraggingManager.snapToGrid"];
        return this;
    }
    static get savedName() {
        return this.#config.save;
    }
    static async saveTo(save) {
        this.#config.save = save;
        if (_StorageManager__WEBPACK_IMPORTED_MODULE_18__.StorageManager.has("saves:" + this.#config.save) &&
            !(await _ModalManager__WEBPACK_IMPORTED_MODULE_13__.ModalManager.confirm("There is already a save with this name. Are you sure you want to replace it?")))
            return;
        _StorageManager__WEBPACK_IMPORTED_MODULE_18__.StorageManager.set("saves:" + this.#config.save, (0,_files__WEBPACK_IMPORTED_MODULE_2__.saveDiagram)([..._reified_Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active], [..._WiringManager__WEBPACK_IMPORTED_MODULE_22__.WiringManager.wires]));
        return this;
    }
}


/***/ }),

/***/ "./src/managers/SelectionManager.ts":
/*!******************************************!*\
  !*** ./src/managers/SelectionManager.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectionManager": () => (/* binding */ SelectionManager)
/* harmony export */ });
/* harmony import */ var _augments_WatchedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../augments/WatchedSet */ "./src/augments/WatchedSet.ts");
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../circular */ "./src/circular.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _files__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../files */ "./src/files.ts");
/* harmony import */ var _reified_Component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../reified/Component */ "./src/reified/Component.ts");
/* harmony import */ var _reified_Display__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reified/Display */ "./src/reified/Display.ts");
/* harmony import */ var _reified_Input__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../reified/Input */ "./src/reified/Input.ts");
/* harmony import */ var _reified_Output__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../reified/Output */ "./src/reified/Output.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _CanvasManager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./CanvasManager */ "./src/managers/CanvasManager.ts");
/* harmony import */ var _DraggingManager__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./DraggingManager */ "./src/managers/DraggingManager.ts");
/* harmony import */ var _KeybindsManager__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./KeybindsManager */ "./src/managers/KeybindsManager.ts");
/* harmony import */ var _MouseManager__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./MouseManager */ "./src/managers/MouseManager.ts");
/* harmony import */ var _SandboxManager__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _ToastManager__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ToastManager */ "./src/managers/ToastManager.ts");
/* harmony import */ var _WiringManager__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./WiringManager */ "./src/managers/WiringManager.ts");
















class SelectionManager {
    static selected = new _augments_WatchedSet__WEBPACK_IMPORTED_MODULE_0__.WatchedSet();
    static #mousedown = (e) => {
        const target = e.target;
        const element = [
            target.closest("button.board-input"),
            target.closest("button.board-output"),
            target.closest("div.component"),
            target.closest("div.display"),
        ].find((element) => element !== null);
        const reified = [..._reified_Reified__WEBPACK_IMPORTED_MODULE_8__.Reified.active].find((component) => component.element === element);
        if (reified) {
            if ((_circular__WEBPACK_IMPORTED_MODULE_1__.IS_MAC_OS && (_KeybindsManager__WEBPACK_IMPORTED_MODULE_11__.KeybindsManager.isKeyDown("MetaLeft") || _KeybindsManager__WEBPACK_IMPORTED_MODULE_11__.KeybindsManager.isKeyDown("MetaRight"))) ||
                (!_circular__WEBPACK_IMPORTED_MODULE_1__.IS_MAC_OS && (_KeybindsManager__WEBPACK_IMPORTED_MODULE_11__.KeybindsManager.isKeyDown("ControlLeft") || _KeybindsManager__WEBPACK_IMPORTED_MODULE_11__.KeybindsManager.isKeyDown("ControlRight"))))
                this.addSelection(reified);
            else if (!this.selected.has(reified))
                this.select(reified);
        }
        else {
            this.selected.clear();
        }
    };
    static #copy = async (e) => {
        if (this.selected.size) {
            e.preventDefault();
            const array = [...this.selected];
            const data = (0,_files__WEBPACK_IMPORTED_MODULE_3__.saveDiagram)(array, [..._WiringManager__WEBPACK_IMPORTED_MODULE_15__.WiringManager.wires].filter((wiring) => array.some((component) => {
                if (component instanceof _reified_Input__WEBPACK_IMPORTED_MODULE_6__.Input)
                    return wiring.from === component.element;
                if (component instanceof _reified_Output__WEBPACK_IMPORTED_MODULE_7__.Output)
                    return false;
                if (component instanceof _reified_Component__WEBPACK_IMPORTED_MODULE_4__.Component || component instanceof _reified_Display__WEBPACK_IMPORTED_MODULE_5__.Display)
                    return component.outputs.some((output) => wiring.from === output);
                throw new Error("Unknown component type.");
            }) &&
                array.some((component) => {
                    if (component instanceof _reified_Input__WEBPACK_IMPORTED_MODULE_6__.Input)
                        return false;
                    if (component instanceof _reified_Output__WEBPACK_IMPORTED_MODULE_7__.Output)
                        return wiring.to === component.element;
                    if (component instanceof _reified_Component__WEBPACK_IMPORTED_MODULE_4__.Component || component instanceof _reified_Display__WEBPACK_IMPORTED_MODULE_5__.Display)
                        return component.inputs.some((input) => wiring.to === input);
                    throw new Error("Unknown component type.");
                })));
            await navigator.clipboard.writeText(data);
        }
    };
    static #paste = async () => {
        const { error, result: [, components, wirings], } = (0,_files__WEBPACK_IMPORTED_MODULE_3__.fromFile)(await navigator.clipboard.readText());
        if (error)
            return _ToastManager__WEBPACK_IMPORTED_MODULE_14__.ToastManager.toast({
                message: "Unable to paste diagram data.",
                color: _constants__WEBPACK_IMPORTED_MODULE_2__.ACTIVATED_CSS_COLOR,
                duration: _constants__WEBPACK_IMPORTED_MODULE_2__.TOAST_DURATION,
            });
        const mouse = { ..._MouseManager__WEBPACK_IMPORTED_MODULE_12__.MouseManager.mouse };
        const selection = this.selected.clone(true);
        _SandboxManager__WEBPACK_IMPORTED_MODULE_13__.SandboxManager.pushHistory(() => {
            _reified_Reified__WEBPACK_IMPORTED_MODULE_8__.Reified.active.addAll(components);
            if (components.every((component) => _reified_Reified__WEBPACK_IMPORTED_MODULE_8__.Reified.active.has(component))) {
                components.forEach((component) => {
                    component.attach();
                    if (component instanceof _reified_Component__WEBPACK_IMPORTED_MODULE_4__.Component || component instanceof _reified_Display__WEBPACK_IMPORTED_MODULE_5__.Display) {
                        component.inputs.forEach((input) => input.classList.remove("activated"));
                        requestAnimationFrame(() => component.update());
                    }
                    if (component instanceof _reified_Output__WEBPACK_IMPORTED_MODULE_7__.Output) {
                        component.element.classList.remove("activated");
                    }
                });
                if (_MouseManager__WEBPACK_IMPORTED_MODULE_12__.MouseManager.mouse.x !== -1 && _MouseManager__WEBPACK_IMPORTED_MODULE_12__.MouseManager.mouse.y !== -1) {
                    const topleft = components
                        .sort((a, b) => {
                        const ax = parseFloat(a.element.style.left);
                        const ay = parseFloat(a.element.style.top);
                        const bx = parseFloat(b.element.style.left);
                        const by = parseFloat(b.element.style.top);
                        const ad = Math.sqrt(ax * ax + ay * ay);
                        const bd = Math.sqrt(bx * bx + by * by);
                        return ad - bd;
                    })[0]
                        .element.getBoundingClientRect();
                    components.forEach((component) => {
                        const offset = component.element.getBoundingClientRect();
                        component.move({
                            x: mouse.x + offset.left - topleft.left,
                            y: mouse.y + offset.top - topleft.top,
                        });
                    });
                }
                _WiringManager__WEBPACK_IMPORTED_MODULE_15__.WiringManager.wires.addAll(wirings);
                this.selected.clear();
                components.forEach((component) => this.addSelection(component));
                _DraggingManager__WEBPACK_IMPORTED_MODULE_10__.DraggingManager.snapToGridBasedUpdate();
            }
        }, () => {
            _reified_Reified__WEBPACK_IMPORTED_MODULE_8__.Reified.active.deleteAll(components);
            components.forEach((component) => {
                component.detach();
            });
            _WiringManager__WEBPACK_IMPORTED_MODULE_15__.WiringManager.wires.deleteAll(wirings);
            this.selected.clear();
            selection.forEach((component) => this.addSelection(component));
        });
    };
    static select(reified) {
        this.selected.clear();
        this.selected.add(reified);
        _reified_Reified__WEBPACK_IMPORTED_MODULE_8__.Reified.active.forEach((component) => (component.element.style.zIndex = "100"));
        reified.element.style.zIndex = "1000";
        return this;
    }
    static selectAllIn(from, to) {
        this.selected.clear();
        const reified = [..._reified_Reified__WEBPACK_IMPORTED_MODULE_8__.Reified.active].filter((component) => (0,_reified_Reified__WEBPACK_IMPORTED_MODULE_8__.overlappedBounds)(component.element.getBoundingClientRect(), from, to));
        this.selected.addAll(reified);
        _reified_Reified__WEBPACK_IMPORTED_MODULE_8__.Reified.active.forEach((component) => (component.element.style.zIndex = "100"));
        reified.forEach((component) => (component.element.style.zIndex = "1000"));
        return this;
    }
    static addSelection(reified) {
        this.selected.add(reified);
        _reified_Reified__WEBPACK_IMPORTED_MODULE_8__.Reified.active.forEach((component) => (component.element.style.zIndex = "100"));
        reified.element.style.zIndex = "1000";
        return this;
    }
    static isSelected(element) {
        return [...this.selected].some((component) => {
            if (component instanceof _reified_Input__WEBPACK_IMPORTED_MODULE_6__.Input)
                return element === component.element;
            if (component instanceof _reified_Output__WEBPACK_IMPORTED_MODULE_7__.Output)
                return element === component.element;
            if (component instanceof _reified_Component__WEBPACK_IMPORTED_MODULE_4__.Component || component instanceof _reified_Display__WEBPACK_IMPORTED_MODULE_5__.Display)
                return (component.inputs.some((input) => element === input) ||
                    component.outputs.some((output) => element === output) ||
                    element === component.element);
            throw new Error("Unknown component type.");
        });
    }
    static render({ fg }) {
        SelectionManager.selected.forEach((component) => {
            const rect = component.element.getBoundingClientRect();
            fg.strokeStyle = (0,_constants__WEBPACK_IMPORTED_MODULE_2__.GET_ACTIVATED_COLOR)();
            fg.lineWidth = 1;
            fg.lineJoin = "miter";
            fg.strokeRect(rect.left - 15, rect.top - 15, rect.width + 15 + 15, rect.height + 15 + 15);
        });
    }
    static listen() {
        _CanvasManager__WEBPACK_IMPORTED_MODULE_9__.CanvasManager.addJob(this.render.bind(this));
        document.body.addEventListener("mousedown", this.#mousedown);
        document.addEventListener("copy", this.#copy);
        document.addEventListener("paste", this.#paste);
        return this;
    }
    static deafen() {
        document.body.removeEventListener("mousedown", this.#mousedown);
        document.removeEventListener("copy", this.#copy);
        document.removeEventListener("paste", this.#paste);
        return this;
    }
    static reset() {
        this.selected.clear();
        this.deafen();
        return this;
    }
}


/***/ }),

/***/ "./src/managers/SettingsManager.ts":
/*!*****************************************!*\
  !*** ./src/managers/SettingsManager.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SettingsManager": () => (/* binding */ SettingsManager)
/* harmony export */ });
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _DarkmodeManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DarkmodeManager */ "./src/managers/DarkmodeManager.ts");
/* harmony import */ var _DraggingManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DraggingManager */ "./src/managers/DraggingManager.ts");
/* harmony import */ var _ModalManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ModalManager */ "./src/managers/ModalManager.ts");
/* harmony import */ var _WiringManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./WiringManager */ "./src/managers/WiringManager.ts");





class SettingsManager {
    static #changes = new Set();
    static get #element() {
        return document.querySelector("button.settings");
    }
    static onChange(run) {
        this.#changes.add(run);
        return this;
    }
    static offChange(run) {
        this.#changes.delete(run);
        return this;
    }
    static #listener = async () => {
        const form = _reified_Reified__WEBPACK_IMPORTED_MODULE_0__.html `
            <div class="settings-form">
                <h1>settings</h1>

                <p>Settings are saved automatically.</p>

                <div>
                    <label class="settings-control" for="darkmode">
                        <input name="darkmode" type="checkbox" ${_DarkmodeManager__WEBPACK_IMPORTED_MODULE_1__.DarkmodeManager.darkmodeEnabled ? "checked" : ""} />
                        dark mode
                    </label>

                    <label class="settings-control" for="darkmodeModals">
                        <input
                            name="darkmodeModals"
                            type="checkbox"
                            ${_DarkmodeManager__WEBPACK_IMPORTED_MODULE_1__.DarkmodeManager.darkmodeModalsEnabled ? "checked" : ""}
                        />
                        dark mode modals
                    </label>
                </div>

                <label class="settings-control" for="snapToGrid">
                    <input name="snapToGrid" type="checkbox" ${_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.snapToGrid ? "checked" : ""} />
                    snap to grid
                </label>

                <div>
                    <label class="settings-control" for="fancyWires">
                        <input name="fancyWires" type="checkbox" ${_WiringManager__WEBPACK_IMPORTED_MODULE_4__.WiringManager.FANCY_WIRES ? "checked" : ""} />
                        fancy wires
                    </label>

                    <label class="settings-control" for="fancierWires">
                        <input name="fancierWires" type="checkbox" ${_WiringManager__WEBPACK_IMPORTED_MODULE_4__.WiringManager.FANCIER_WIRES ? "checked" : ""} />
                        fancier wires
                    </label>
                </div>

                <div>
                    <label class="settings-control" for="gateDelay">
                        <input
                            name="gateDelay"
                            type="range"
                            min="0"
                            max="250"
                            step="25"
                            value="${_reified_Reified__WEBPACK_IMPORTED_MODULE_0__.Reified.GATE_DELAY}"
                        />
                        gate delay (0-250/25)
                    </label>

                    <label class="settings-control" for="gateDelayVariation">
                        <input
                            name="gateDelayVariation"
                            type="range"
                            min="0"
                            max="100"
                            step="5"
                            value="${_reified_Reified__WEBPACK_IMPORTED_MODULE_0__.Reified.GATE_DELAY_VARIATION}"
                        />
                        gate delay variation (0-100/5)
                    </label>
                </div>

                <button style="width: 60px;">reset</button>
            </div>
        `;
        let reset = false;
        form.querySelector("button").addEventListener("click", () => {
            _DarkmodeManager__WEBPACK_IMPORTED_MODULE_1__.DarkmodeManager.darkmodeEnabled = false;
            _DarkmodeManager__WEBPACK_IMPORTED_MODULE_1__.DarkmodeManager.darkmodeModalsEnabled = false;
            _DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.snapToGrid = false;
            _reified_Reified__WEBPACK_IMPORTED_MODULE_0__.Reified.GATE_DELAY = 100;
            _reified_Reified__WEBPACK_IMPORTED_MODULE_0__.Reified.GATE_DELAY_VARIATION = 25;
            reset = true;
            close();
        });
        const [closed, close] = await _ModalManager__WEBPACK_IMPORTED_MODULE_3__.ModalManager.popup(form);
        await closed;
        if (!reset) {
            _DarkmodeManager__WEBPACK_IMPORTED_MODULE_1__.DarkmodeManager.darkmodeEnabled = form.querySelector("input[name=darkmode]").checked;
            _DarkmodeManager__WEBPACK_IMPORTED_MODULE_1__.DarkmodeManager.darkmodeModalsEnabled =
                form.querySelector("input[name=darkmodeModals]").checked;
            _DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.snapToGrid = form.querySelector("input[name=snapToGrid]").checked;
            _WiringManager__WEBPACK_IMPORTED_MODULE_4__.WiringManager.FANCY_WIRES = form.querySelector("input[name=fancyWires]").checked;
            _reified_Reified__WEBPACK_IMPORTED_MODULE_0__.Reified.GATE_DELAY = form.querySelector("input[name=gateDelay]").valueAsNumber;
            _reified_Reified__WEBPACK_IMPORTED_MODULE_0__.Reified.GATE_DELAY_VARIATION = form.querySelector("input[name=gateDelayVariation]").valueAsNumber;
        }
        form.remove();
    };
    static listen() {
        this.#element.innerText = "⚙️";
        this.#element.addEventListener("click", this.#listener);
        return this;
    }
    static stop() {
        this.#element.removeEventListener("click", this.#listener);
        return this;
    }
    static bringUpForm() {
        return this.#listener();
    }
}


/***/ }),

/***/ "./src/managers/StorageManager.ts":
/*!****************************************!*\
  !*** ./src/managers/StorageManager.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StorageManager": () => (/* binding */ StorageManager)
/* harmony export */ });
class StorageManager {
    static prefix = "kelsny.gatesim:";
    static storage = typeof window !== "undefined"
        ? window.localStorage
        : ({
            clear() { },
            getItem: () => null,
            key: () => null,
            length: 0,
            removeItem() { },
            setItem() { },
        });
    static set(key, value) {
        this.storage.setItem(this.prefix + key, JSON.stringify(value));
        return value;
    }
    static get(key) {
        return JSON.parse(this.storage.getItem(this.prefix + key)) ?? undefined;
    }
    static has(key) {
        return this.storage.getItem(this.prefix + key) !== null;
    }
    static delete(key) {
        if (this.storage.getItem(this.prefix + key) === null)
            return false;
        this.storage.removeItem(this.prefix + key);
        return true;
    }
}


/***/ }),

/***/ "./src/managers/TestingManager.ts":
/*!****************************************!*\
  !*** ./src/managers/TestingManager.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TestingManager": () => (/* binding */ TestingManager)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _reified_Input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reified/Input */ "./src/reified/Input.ts");
/* harmony import */ var _reified_Output__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../reified/Output */ "./src/reified/Output.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _ModalManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ModalManager */ "./src/managers/ModalManager.ts");
/* harmony import */ var _ToastManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ToastManager */ "./src/managers/ToastManager.ts");
/* harmony import */ var _WiringManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./WiringManager */ "./src/managers/WiringManager.ts");







class TestingManager {
    static #testing = false;
    static async test(cases) {
        if (this.#testing)
            return _ModalManager__WEBPACK_IMPORTED_MODULE_4__.ModalManager.alert("Diagram is already under testing.");
        const inputs = [..._reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.active]
            .filter((component) => component instanceof _reified_Input__WEBPACK_IMPORTED_MODULE_1__.Input)
            .sort((a, b) => parseFloat(a.element.style.top) - parseFloat(b.element.style.top));
        const outputs = [..._reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.active]
            .filter((component) => component instanceof _reified_Output__WEBPACK_IMPORTED_MODULE_2__.Output)
            .sort((a, b) => parseFloat(a.element.style.top) - parseFloat(b.element.style.top));
        const components = [..._reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.active].filter((component) => !(component instanceof _reified_Input__WEBPACK_IMPORTED_MODULE_1__.Input) && !(component instanceof _reified_Output__WEBPACK_IMPORTED_MODULE_2__.Output));
        this.#testing = true;
        _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.active.lock();
        _WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.lock();
        const originalActivations = inputs.map((input) => input.element.classList.contains("activated"));
        const originalDelay = _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.GATE_DELAY;
        const originalVariation = _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.GATE_DELAY_VARIATION;
        _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.GATE_DELAY = 25;
        _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.GATE_DELAY_VARIATION = 5;
        for (const [givenInputs, expectedOutputs] of cases) {
            if (inputs.length !== givenInputs.length)
                throw new Error("Mismatched input lengths.");
            if (outputs.length !== expectedOutputs.length)
                throw new Error("Mismatched output lengths.");
            for (const [index, input] of inputs.entries()) {
                input.element.classList.toggle("activated", givenInputs[index]);
            }
            await (0,_constants__WEBPACK_IMPORTED_MODULE_0__.DELAY)(components.length * (25 + 5));
            const realOutputs = outputs.map((output) => output.element.classList.contains("activated"));
            if (!realOutputs.every((out, i) => out === expectedOutputs[i])) {
                await _ModalManager__WEBPACK_IMPORTED_MODULE_4__.ModalManager.alert(`Diagram failed to pass the test with inputs "${givenInputs
                    .map((boolean) => +boolean)
                    .join(" ")}".`);
                originalActivations.forEach((value, i) => inputs[i].element.classList.toggle("activated", value));
                _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.active.unlock();
                _WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.unlock();
                this.#testing = false;
                return false;
            }
            await (0,_constants__WEBPACK_IMPORTED_MODULE_0__.DELAY)();
        }
        await _ModalManager__WEBPACK_IMPORTED_MODULE_4__.ModalManager.alert("Diagram passed all the tests.");
        originalActivations.forEach((value, i) => inputs[i].element.classList.toggle("activated", value));
        _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.GATE_DELAY = originalDelay;
        _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.GATE_DELAY_VARIATION = originalVariation;
        _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.active.unlock();
        _WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.unlock();
        this.#testing = false;
        return true;
    }
    static get testing() {
        return this.#testing;
    }
    static async getTruthTable() {
        if (this.#testing)
            return _ModalManager__WEBPACK_IMPORTED_MODULE_4__.ModalManager.alert("Diagram is already under testing.");
        const inputs = [..._reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.active]
            .filter((component) => component instanceof _reified_Input__WEBPACK_IMPORTED_MODULE_1__.Input)
            .sort((a, b) => parseFloat(a.element.style.top) - parseFloat(b.element.style.top));
        const outputs = [..._reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.active]
            .filter((component) => component instanceof _reified_Output__WEBPACK_IMPORTED_MODULE_2__.Output)
            .sort((a, b) => parseFloat(a.element.style.top) - parseFloat(b.element.style.top));
        const components = [..._reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.active].filter((component) => !(component instanceof _reified_Input__WEBPACK_IMPORTED_MODULE_1__.Input) && !(component instanceof _reified_Output__WEBPACK_IMPORTED_MODULE_2__.Output));
        if (!inputs.length)
            return void _ToastManager__WEBPACK_IMPORTED_MODULE_5__.ToastManager.toast({
                message: "Can't create table without inputs.",
                color: _constants__WEBPACK_IMPORTED_MODULE_0__.ACTIVATED_CSS_COLOR,
                duration: _constants__WEBPACK_IMPORTED_MODULE_0__.TOAST_DURATION,
            });
        if (!outputs.length)
            return void _ToastManager__WEBPACK_IMPORTED_MODULE_5__.ToastManager.toast({
                message: "Can't create table without outputs.",
                color: _constants__WEBPACK_IMPORTED_MODULE_0__.ACTIVATED_CSS_COLOR,
                duration: _constants__WEBPACK_IMPORTED_MODULE_0__.TOAST_DURATION,
            });
        this.#testing = true;
        _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.active.lock();
        _WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.lock();
        const originalActivations = inputs.map((input) => input.element.classList.contains("activated"));
        const originalDelay = _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.GATE_DELAY;
        const originalVariation = _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.GATE_DELAY_VARIATION;
        _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.GATE_DELAY = 25;
        _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.GATE_DELAY_VARIATION = 5;
        const table = [];
        for (const perm of (0,_constants__WEBPACK_IMPORTED_MODULE_0__.GET_BIN_PERMS)(inputs.length)) {
            for (const [index, input] of inputs.entries()) {
                input.element.classList.toggle("activated", perm[index]);
            }
            await (0,_constants__WEBPACK_IMPORTED_MODULE_0__.DELAY)(components.length * (25 + 5));
            const realOutputs = outputs.map((output) => output.element.classList.contains("activated"));
            table.push([perm, realOutputs]);
        }
        originalActivations.forEach((value, i) => inputs[i].element.classList.toggle("activated", value));
        _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.GATE_DELAY = originalDelay;
        _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.GATE_DELAY_VARIATION = originalVariation;
        _reified_Reified__WEBPACK_IMPORTED_MODULE_3__.Reified.active.unlock();
        _WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.unlock();
        this.#testing = false;
        return table;
    }
}


/***/ }),

/***/ "./src/managers/ToastManager.ts":
/*!**************************************!*\
  !*** ./src/managers/ToastManager.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToastManager": () => (/* binding */ ToastManager)
/* harmony export */ });
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _SandboxManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SandboxManager */ "./src/managers/SandboxManager.ts");


class ToastManager {
    static get container() {
        return document.querySelector(".toasts-container");
    }
    static async toast({ message, color, duration }) {
        const toast = _reified_Reified__WEBPACK_IMPORTED_MODULE_0__.html `
            <div class="toast">
                <div class="toast-color"></div>
                <p class="toast-message">${message}</p>
                <button class="close-toast">╳</button>
            </div>
        `;
        toast.querySelector(".toast-color").style.backgroundColor = color;
        toast.style.animationDelay = duration + "ms";
        this.container.appendChild(toast);
        return new Promise((resolve) => {
            const finish = () => resolve(undefined);
            _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.watchedUnresolvedPromises.add(finish);
            const handler = () => {
                toast.remove();
                _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.watchedUnresolvedPromises["delete"](finish);
                return finish();
            };
            toast.querySelector(".close-toast").addEventListener("click", handler);
            toast.addEventListener("animationend", handler);
        });
    }
}


/***/ }),

/***/ "./src/managers/ToolsManager.ts":
/*!**************************************!*\
  !*** ./src/managers/ToolsManager.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToolsManager": () => (/* binding */ ToolsManager)
/* harmony export */ });
/* harmony import */ var _cad_files__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cad/files */ "./src/cad/files.ts");
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../circular */ "./src/circular.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _files__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../files */ "./src/files.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _ModalManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ModalManager */ "./src/managers/ModalManager.ts");
/* harmony import */ var _TestingManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TestingManager */ "./src/managers/TestingManager.ts");
/* harmony import */ var _ToastManager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ToastManager */ "./src/managers/ToastManager.ts");
/* harmony import */ var _WiringManager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./WiringManager */ "./src/managers/WiringManager.ts");









class ToolsManager {
    static #changes = new Set();
    static #listeners = new Map();
    static actions = [
        {
            "copy-url": {
                label: "Copy link",
                keybind: _circular__WEBPACK_IMPORTED_MODULE_1__.IS_MAC_OS ? "⌘ K" : "Ctrl K",
                callback: async () => {
                    const hrefAsUrl = new URL(location.href);
                    hrefAsUrl.searchParams.set("inline", btoa((0,_files__WEBPACK_IMPORTED_MODULE_3__.saveDiagram)([..._reified_Reified__WEBPACK_IMPORTED_MODULE_4__.Reified.active], [..._WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires])));
                    await navigator.clipboard.writeText(hrefAsUrl.href);
                    return _ToastManager__WEBPACK_IMPORTED_MODULE_7__.ToastManager.toast({
                        message: "Copied diagram link to clipboard.",
                        color: _constants__WEBPACK_IMPORTED_MODULE_2__.LIGHT_GRAY_CSS_COLOR,
                        duration: _constants__WEBPACK_IMPORTED_MODULE_2__.TOAST_DURATION,
                    });
                },
            },
        },
        {
            "open-cad": {
                label: "Open CAD",
                callback: () => {
                    const url = new URL(location.href);
                    url.search = "?app=cad";
                    location.href = url.href;
                },
            },
        },
        {
            "truth-table": {
                label: "Truth table from diagram",
                callback: async () => {
                    const table = await _TestingManager__WEBPACK_IMPORTED_MODULE_6__.TestingManager.getTruthTable();
                    if (table) {
                        const pre = _reified_Reified__WEBPACK_IMPORTED_MODULE_4__.html `
                            <pre><button>Copy</button> <button>Download</button> <button>Open in CAD</button><hr style="margin: 4px 0; border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_2__.LIGHT_GRAY_CSS_COLOR}" /><code style="font-family: Fira Code, monospace;">${table
                            .map((row) => row.map((io) => io.map((v) => +v).join("")).join(":"))
                            .join("\n")
                            .replaceAll(":", '<span style="color: gray;">:</span>')
                            .replaceAll("0", '<span style="color: red;">0</span>')
                            .replaceAll("1", '<span style="color: blue;">1</span>')}</code></pre>
                        `;
                        pre.children[0].addEventListener("click", async () => {
                            await navigator.clipboard.writeText(table.map((row) => row.map((io) => io.map((v) => +v).join("")).join(":")).join("\n"));
                        });
                        pre.children[1].addEventListener("click", async () => {
                            await (0,_cad_files__WEBPACK_IMPORTED_MODULE_0__.downloadFile)([
                                table.map((row) => row.map((io) => io.map((v) => +v).join("")).join(":")).join("\n"),
                            ]);
                        });
                        pre.children[2].addEventListener("click", () => {
                            const url = new URL(location.href);
                            url.search = `?app=cad&inline=${btoa(table.map((row) => row.map((io) => io.map((v) => +v).join("")).join(":")).join("\n"))}`;
                            location.href = url.href;
                        });
                        await _ModalManager__WEBPACK_IMPORTED_MODULE_5__.ModalManager.alert(pre);
                    }
                },
            },
        },
    ];
    static #actions = this.actions;
    static get #element() {
        return document.querySelector("button.tools");
    }
    static onChange(run) {
        this.#changes.add(run);
        return this;
    }
    static offChange(run) {
        this.#changes.delete(run);
        return this;
    }
    static #listener = () => {
        const menu = document.querySelector(".tools-menu");
        menu.style.display = menu.style.display === "none" ? "" : "none";
    };
    static listen() {
        this.#element.innerText = "🛠";
        const menu = _reified_Reified__WEBPACK_IMPORTED_MODULE_4__.html `<div class="tools-menu" style="display: none;"></div>`;
        menu.innerHTML = this.#actions
            .map((record) => Object.entries(record)
            .map(([name, { label, keybind }]) => keybind
            ? `<button class="${name}">${label}<p class="menu-keybind">${keybind
                .split(" ")
                .map((key) => `<span>${key}</span>`)
                .join("")}</p></button>`
            : `<button class="${name}">${label}</button>`)
            .join(""))
            .join('<div class="br"></div>');
        this.#actions.forEach((record) => {
            Object.keys(record).forEach((key) => {
                const click = record[key].callback.bind(undefined);
                const item = menu.querySelector("." + key);
                item.addEventListener("mousedown", click);
                this.#listeners.set(item, click);
            });
        });
        this.#element.after(menu);
        this.#element.addEventListener("click", this.#listener);
        const body = (e) => {
            if (e.target === this.#element || e.target.closest(".tools"))
                return;
            menu.style.display = "none";
        };
        document.body.addEventListener("mousedown", body);
        this.#listeners.set(document.body, body);
        return this;
    }
    static stop() {
        this.#listeners.forEach((listener, element) => {
            element.removeEventListener("mousedown", listener);
        });
        this.#element.removeEventListener("click", this.#listener);
        return this;
    }
}


/***/ }),

/***/ "./src/managers/UndoRedoManager.ts":
/*!*****************************************!*\
  !*** ./src/managers/UndoRedoManager.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UndoRedoManager": () => (/* binding */ UndoRedoManager)
/* harmony export */ });
/* harmony import */ var _DarkmodeManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DarkmodeManager */ "./src/managers/DarkmodeManager.ts");
/* harmony import */ var _SandboxManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SandboxManager */ "./src/managers/SandboxManager.ts");


class UndoRedoManager {
    static get #undoElement() {
        return document.querySelector("button.undo");
    }
    static get #redoElement() {
        return document.querySelector("button.redo");
    }
    static #undoListener = () => {
        _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.popHistory();
    };
    static #redoListener = () => {
        _SandboxManager__WEBPACK_IMPORTED_MODULE_1__.SandboxManager.redoHistory();
    };
    static listen() {
        _DarkmodeManager__WEBPACK_IMPORTED_MODULE_0__.DarkmodeManager.onChange(() => {
            this.#undoElement.style.transition = "none";
            this.#redoElement.style.transition = "none";
            requestAnimationFrame(() => {
                this.#undoElement.style.transition = "";
                this.#redoElement.style.transition = "";
            });
        });
        this.#undoElement.innerText = "UNDO";
        this.#redoElement.innerText = "REDO";
        this.#undoElement.addEventListener("click", this.#undoListener);
        this.#redoElement.addEventListener("click", this.#redoListener);
        return this;
    }
    static stop() {
        this.#undoElement.removeEventListener("click", this.#undoListener);
        this.#redoElement.removeEventListener("click", this.#redoListener);
        return this;
    }
}


/***/ }),

/***/ "./src/managers/WiringManager.ts":
/*!***************************************!*\
  !*** ./src/managers/WiringManager.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NewWireContext": () => (/* binding */ NewWireContext),
/* harmony export */   "Wiring": () => (/* binding */ Wiring),
/* harmony export */   "WiringManager": () => (/* binding */ WiringManager)
/* harmony export */ });
/* harmony import */ var _augments_WatchedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../augments/WatchedSet */ "./src/augments/WatchedSet.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _CanvasManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CanvasManager */ "./src/managers/CanvasManager.ts");
/* harmony import */ var _MouseManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MouseManager */ "./src/managers/MouseManager.ts");
/* harmony import */ var _SandboxManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _StorageManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./StorageManager */ "./src/managers/StorageManager.ts");
/* harmony import */ var _TestingManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TestingManager */ "./src/managers/TestingManager.ts");







class NewWireContext {
    static from;
    static {
        _MouseManager__WEBPACK_IMPORTED_MODULE_3__.MouseManager.onMouseDown((e) => {
            if (NewWireContext.from) {
                const { target } = e;
                if (target && target instanceof HTMLElement) {
                    if (target.classList.contains("board-output") ||
                        target.classList.contains("component-input-button")) {
                        if (_TestingManager__WEBPACK_IMPORTED_MODULE_6__.TestingManager.testing)
                            return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                        const from = NewWireContext.from;
                        _SandboxManager__WEBPACK_IMPORTED_MODULE_4__.SandboxManager.pushHistory(() => {
                            WiringManager.wires.add(new Wiring(from, target));
                        }, () => {
                            for (const wire of WiringManager.wires) {
                                if (wire.from === from && wire.to === target) {
                                    wire.destroy();
                                    break;
                                }
                            }
                        });
                    }
                }
                NewWireContext.from = undefined;
            }
            return undefined;
        });
    }
}
class Wiring {
    from;
    to;
    #destroyed = false;
    #observer;
    constructor(from, to) {
        this.from = from;
        this.to = to;
        this.#observer = new MutationObserver(() => {
            // make sure this wire is being tracked still before updating the elements
            if (!WiringManager.wires.has(this)) {
                if (![...WiringManager.wires].some((wire) => wire.to === this.to))
                    to.classList.remove("activated");
                return this.destroy();
            }
            to.classList.toggle("activated", from.classList.contains("activated"));
        });
        this.go();
    }
    destroy() {
        this.#destroyed = true;
        this.#observer.disconnect();
    }
    go() {
        this.#destroyed = false;
        this.#observer.observe(this.from, { attributeFilter: ["class"], attributes: true });
    }
    get destroyed() {
        return this.#destroyed;
    }
}
class WiringManager {
    static wires = new _augments_WatchedSet__WEBPACK_IMPORTED_MODULE_0__.WatchedSet();
    static render({ bg }) {
        this.wires.forEach((wire) => {
            if (wire.destroyed) {
                if (this.wires.locked)
                    wire.go();
                else
                    this.wires.delete(wire);
                return;
            }
            const from = wire.from.getBoundingClientRect();
            const to = wire.to.getBoundingClientRect();
            const sources = [...this.wires].filter((w) => w.to === wire.to);
            wire.to.classList.toggle("activated", sources.some((w) => w.from.classList.contains("activated")));
            bg.strokeStyle = wire.from.classList.contains("activated") ? (0,_constants__WEBPACK_IMPORTED_MODULE_1__.GET_ACTIVATED_COLOR)() : (0,_constants__WEBPACK_IMPORTED_MODULE_1__.GET_GRAY_COLOR)();
            bg.lineWidth = 5;
            bg.lineJoin = "round";
            const xaxis = from.x + from.width / 2 - (to.x + to.width / 2);
            const yaxis = from.y + from.height / 2 - (to.y + to.width / 2);
            const points = !this.#FANCY_WIRES || Math.abs(xaxis) < 10 || Math.abs(yaxis) < 10
                ? [
                    [from.x + from.width / 2, from.y + from.height / 2],
                    [to.x + to.width / 2, to.y + to.height / 2],
                ]
                : Math.abs(xaxis) > Math.abs(yaxis)
                    ? [
                        [from.x + from.width / 2, from.y + from.height / 2],
                        [from.x + from.width / 2 - xaxis / 2, from.y + from.height / 2],
                        [to.x + to.width / 2 + xaxis / 2, to.y + to.height / 2],
                        [to.x + to.width / 2, to.y + to.height / 2],
                    ]
                    : [
                        [from.x + from.width / 2, from.y + from.height / 2],
                        [from.x + from.width / 2, from.y + from.height / 2 - yaxis / 2],
                        [to.x + to.width / 2, to.y + to.height / 2 + yaxis / 2],
                        [to.x + to.width / 2, to.y + to.height / 2],
                    ];
            points.slice(0, -1).forEach((_, i) => {
                bg.beginPath();
                bg.moveTo(...points[i]);
                bg.lineTo(...points[i + 1]);
                bg.closePath();
                bg.stroke();
            });
        });
        if (NewWireContext.from) {
            const from = NewWireContext.from.getBoundingClientRect();
            bg.strokeStyle = NewWireContext.from.classList.contains("activated")
                ? (0,_constants__WEBPACK_IMPORTED_MODULE_1__.GET_ACTIVATED_COLOR)()
                : (0,_constants__WEBPACK_IMPORTED_MODULE_1__.GET_GRAY_COLOR)();
            bg.lineWidth = 5;
            bg.lineJoin = "round";
            const xaxis = from.x + from.width / 2 - _MouseManager__WEBPACK_IMPORTED_MODULE_3__.MouseManager.mouse.x;
            const yaxis = from.y + from.height / 2 - _MouseManager__WEBPACK_IMPORTED_MODULE_3__.MouseManager.mouse.y;
            const points = !this.#FANCY_WIRES || Math.abs(xaxis) < 10 || Math.abs(yaxis) < 10
                ? [
                    [from.x + from.width / 2, from.y + from.height / 2],
                    [_MouseManager__WEBPACK_IMPORTED_MODULE_3__.MouseManager.mouse.x, _MouseManager__WEBPACK_IMPORTED_MODULE_3__.MouseManager.mouse.y],
                ]
                : Math.abs(xaxis) > Math.abs(yaxis)
                    ? [
                        [from.x + from.width / 2, from.y + from.height / 2],
                        [from.x + from.width / 2 - xaxis / 2, from.y + from.height / 2],
                        [_MouseManager__WEBPACK_IMPORTED_MODULE_3__.MouseManager.mouse.x + xaxis / 2, _MouseManager__WEBPACK_IMPORTED_MODULE_3__.MouseManager.mouse.y],
                        [_MouseManager__WEBPACK_IMPORTED_MODULE_3__.MouseManager.mouse.x, _MouseManager__WEBPACK_IMPORTED_MODULE_3__.MouseManager.mouse.y],
                    ]
                    : [
                        [from.x + from.width / 2, from.y + from.height / 2],
                        [from.x + from.width / 2, from.y + from.height / 2 - yaxis / 2],
                        [_MouseManager__WEBPACK_IMPORTED_MODULE_3__.MouseManager.mouse.x, _MouseManager__WEBPACK_IMPORTED_MODULE_3__.MouseManager.mouse.y + yaxis / 2],
                        [_MouseManager__WEBPACK_IMPORTED_MODULE_3__.MouseManager.mouse.x, _MouseManager__WEBPACK_IMPORTED_MODULE_3__.MouseManager.mouse.y],
                    ];
            points.slice(0, -1).forEach((_, i) => {
                bg.beginPath();
                bg.moveTo(...points[i]);
                bg.lineTo(...points[i + 1]);
                bg.closePath();
                bg.stroke();
            });
        }
    }
    static init() {
        _CanvasManager__WEBPACK_IMPORTED_MODULE_2__.CanvasManager.addJob(this.render.bind(this));
    }
    static #FANCY_WIRES = true;
    static #FANCIER_WIRES = true;
    static get FANCY_WIRES() {
        return this.#FANCY_WIRES;
    }
    static get FANCIER_WIRES() {
        return this.#FANCIER_WIRES;
    }
    static set FANCY_WIRES(v) {
        this.#FANCY_WIRES = v;
        _StorageManager__WEBPACK_IMPORTED_MODULE_5__.StorageManager.set("settings.fancyWires", this.#FANCY_WIRES);
    }
    static set FANCIER_WIRES(v) {
        this.#FANCIER_WIRES = v;
        _StorageManager__WEBPACK_IMPORTED_MODULE_5__.StorageManager.set("settings.fancierWires", this.#FANCIER_WIRES);
    }
    static {
        this.#FANCY_WIRES = _StorageManager__WEBPACK_IMPORTED_MODULE_5__.StorageManager.get("settings.fancyWires") ?? this.#FANCY_WIRES;
        this.#FANCIER_WIRES = _StorageManager__WEBPACK_IMPORTED_MODULE_5__.StorageManager.get("settings.fancierWires") ?? this.#FANCIER_WIRES;
    }
}


/***/ }),

/***/ "./src/premade/example.ts":
/*!********************************!*\
  !*** ./src/premade/example.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "example": () => (/* binding */ example)
/* harmony export */ });
/* harmony import */ var _contextmenu_menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../contextmenu/menu */ "./src/contextmenu/menu.ts");
/* harmony import */ var _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../keybinds/keybinds */ "./src/keybinds/keybinds.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/WiringManager */ "./src/managers/WiringManager.ts");
/* harmony import */ var _reified_chips__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../reified/chips */ "./src/reified/chips.ts");
/* harmony import */ var _reified_Component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reified/Component */ "./src/reified/Component.ts");
/* harmony import */ var _reified_Input__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../reified/Input */ "./src/reified/Input.ts");
/* harmony import */ var _reified_Output__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../reified/Output */ "./src/reified/Output.ts");








const example = {
    "example:halfadder": ({ name: save }) => {
        const components = [
            new _reified_Input__WEBPACK_IMPORTED_MODULE_6__.Input({ x: 100, y: 100, centered: true }),
            new _reified_Input__WEBPACK_IMPORTED_MODULE_6__.Input({ x: 100, y: 200, centered: true }),
            new _reified_Component__WEBPACK_IMPORTED_MODULE_5__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_4__.XorGate(), { x: 300, y: 100, centered: true }),
            new _reified_Component__WEBPACK_IMPORTED_MODULE_5__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_4__.AndGate(), { x: 300, y: 200, centered: true }),
            new _reified_Output__WEBPACK_IMPORTED_MODULE_7__.Output({ x: 500, y: 100, centered: true }),
            new _reified_Output__WEBPACK_IMPORTED_MODULE_7__.Output({ x: 500, y: 200, centered: true }),
        ];
        const [i1, i2, xor, and, o1, o2] = components;
        _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.setup({
            keybinds: _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_1__.keybinds,
            menu: _contextmenu_menu__WEBPACK_IMPORTED_MODULE_0__.menu,
            save,
            initial: [
                components.map((component) => component.permanent()),
                [
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(i1.element, xor.inputs[0]),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(i1.element, and.inputs[0]),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(i2.element, xor.inputs[1]),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(i2.element, and.inputs[1]),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(xor.outputs[0], o1.element),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(and.outputs[0], o2.element),
                ],
            ],
            limits: {
                inputs: 2,
                outputs: 2,
                chipsTotal: 2,
                wirings: 6,
                componentsTotal: 6,
                chips: { AND: 1, XOR: 1 },
            },
        });
    },
    "example:fulladder": ({ name: save }) => {
        const components = [
            new _reified_Input__WEBPACK_IMPORTED_MODULE_6__.Input({ x: 100, y: 100, centered: true }),
            new _reified_Input__WEBPACK_IMPORTED_MODULE_6__.Input({ x: 100, y: 200, centered: true }),
            new _reified_Input__WEBPACK_IMPORTED_MODULE_6__.Input({ x: 100, y: 300, centered: true }),
            new _reified_Component__WEBPACK_IMPORTED_MODULE_5__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_4__.XorGate(), { x: 250, y: 100, centered: true }),
            new _reified_Component__WEBPACK_IMPORTED_MODULE_5__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_4__.AndGate(), { x: 250, y: 200, centered: true }),
            new _reified_Component__WEBPACK_IMPORTED_MODULE_5__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_4__.AndGate(), { x: 250, y: 300, centered: true }),
            new _reified_Component__WEBPACK_IMPORTED_MODULE_5__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_4__.XorGate(), { x: 400, y: 150, centered: true }),
            new _reified_Component__WEBPACK_IMPORTED_MODULE_5__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_4__.OrGate(), { x: 400, y: 250, centered: true }),
            new _reified_Output__WEBPACK_IMPORTED_MODULE_7__.Output({ x: 550, y: 150, centered: true }),
            new _reified_Output__WEBPACK_IMPORTED_MODULE_7__.Output({ x: 550, y: 250, centered: true }),
        ];
        const [i1, i2, i3, xor1, and1, and2, xor2, or, o1, o2] = components;
        _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.setup({
            keybinds: _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_1__.keybinds,
            menu: _contextmenu_menu__WEBPACK_IMPORTED_MODULE_0__.menu,
            save,
            initial: [
                components.map((component) => component.permanent()),
                [
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(i1.element, xor1.inputs[0]),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(i1.element, and2.inputs[0]),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(i2.element, xor1.inputs[1]),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(i2.element, and2.inputs[1]),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(i3.element, and1.inputs[1]),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(i3.element, xor2.inputs[1]),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(xor1.outputs[0], and1.inputs[0]),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(xor1.outputs[0], xor2.inputs[0]),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(and1.outputs[0], or.inputs[0]),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(and2.outputs[0], or.inputs[1]),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(xor2.outputs[0], o1.element),
                    new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_3__.Wiring(or.outputs[0], o2.element),
                ],
            ],
            limits: {
                inputs: 3,
                outputs: 2,
                chipsTotal: 5,
                wirings: 12,
                componentsTotal: 10,
                chips: { AND: 2, XOR: 2, OR: 1 },
            },
        });
    },
};


/***/ }),

/***/ "./src/premade/index.ts":
/*!******************************!*\
  !*** ./src/premade/index.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "premade": () => (/* binding */ premade)
/* harmony export */ });
/* harmony import */ var _contextmenu_menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../contextmenu/menu */ "./src/contextmenu/menu.ts");
/* harmony import */ var _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../keybinds/keybinds */ "./src/keybinds/keybinds.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _example__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./example */ "./src/premade/example.ts");
/* harmony import */ var _nand__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nand */ "./src/premade/nand.ts");





const premade = new Map([
    ...Object.entries(_example__WEBPACK_IMPORTED_MODULE_3__.example),
    ["sandbox", () => _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.setup({ keybinds: _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_1__.keybinds, menu: _contextmenu_menu__WEBPACK_IMPORTED_MODULE_0__.menu, save: "sandbox" })],
    ...Object.entries(_nand__WEBPACK_IMPORTED_MODULE_4__.nand),
]);


/***/ }),

/***/ "./src/premade/nand.ts":
/*!*****************************!*\
  !*** ./src/premade/nand.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nand": () => (/* binding */ nand)
/* harmony export */ });
/* harmony import */ var _contextmenu_menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../contextmenu/menu */ "./src/contextmenu/menu.ts");
/* harmony import */ var _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../keybinds/keybinds */ "./src/keybinds/keybinds.ts");
/* harmony import */ var _managers_ModalManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/ModalManager */ "./src/managers/ModalManager.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../managers/TestingManager */ "./src/managers/TestingManager.ts");
/* harmony import */ var _reified_chips__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reified/chips */ "./src/reified/chips.ts");
/* harmony import */ var _reified_Component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../reified/Component */ "./src/reified/Component.ts");
/* harmony import */ var _reified_Input__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../reified/Input */ "./src/reified/Input.ts");
/* harmony import */ var _reified_Output__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../reified/Output */ "./src/reified/Output.ts");









const nand = {
    "nand:not": ({ name: save }) => {
        _contextmenu_menu__WEBPACK_IMPORTED_MODULE_0__.menu.splice(2, 0, {
            test: {
                label: "Test solution",
                async callback() {
                    await _managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__.TestingManager.test([
                        [[true], [false]],
                        [[false], [true]],
                    ]);
                },
            },
        });
        _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_3__.SandboxManager.setup({
            keybinds: _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_1__.keybinds,
            menu: _contextmenu_menu__WEBPACK_IMPORTED_MODULE_0__.menu,
            save,
            initial: [
                [
                    new _reified_Input__WEBPACK_IMPORTED_MODULE_7__.Input({ x: 100, y: 100, centered: true }),
                    new _reified_Component__WEBPACK_IMPORTED_MODULE_6__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_5__.NandGate(), { x: 300, y: 100, centered: true }),
                    new _reified_Output__WEBPACK_IMPORTED_MODULE_8__.Output({ x: 500, y: 100, centered: true }),
                ].map((component) => component.permanent()),
                [],
            ],
            limits: {
                inputs: 1,
                outputs: 1,
                chipsTotal: 1,
                wirings: 3,
                componentsTotal: 3,
                chips: { NAND: 1 },
            },
        });
        _managers_ModalManager__WEBPACK_IMPORTED_MODULE_2__.ModalManager.alert("Recreate a NOT gate using only a NAND gate.");
    },
    "nand:and": ({ name: save }) => {
        _contextmenu_menu__WEBPACK_IMPORTED_MODULE_0__.menu.splice(2, 0, {
            test: {
                label: "Test solution",
                async callback() {
                    await _managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__.TestingManager.test([
                        [[false, false], [false]],
                        [[true, false], [false]],
                        [[false, true], [false]],
                        [[true, true], [true]],
                    ]);
                },
            },
        });
        _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_3__.SandboxManager.setup({
            keybinds: _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_1__.keybinds,
            menu: _contextmenu_menu__WEBPACK_IMPORTED_MODULE_0__.menu,
            save,
            initial: [
                [
                    new _reified_Input__WEBPACK_IMPORTED_MODULE_7__.Input({ x: 100, y: 100, centered: true }),
                    new _reified_Input__WEBPACK_IMPORTED_MODULE_7__.Input({ x: 100, y: 200, centered: true }),
                    new _reified_Component__WEBPACK_IMPORTED_MODULE_6__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_5__.NandGate(), { x: 300, y: 100, centered: true }),
                    new _reified_Component__WEBPACK_IMPORTED_MODULE_6__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_5__.NandGate(), { x: 300, y: 200, centered: true }),
                    new _reified_Output__WEBPACK_IMPORTED_MODULE_8__.Output({ x: 500, y: 150, centered: true }),
                ].map((component) => component.permanent()),
                [],
            ],
            limits: {
                inputs: 2,
                outputs: 1,
                chipsTotal: 2,
                wirings: 5,
                componentsTotal: 5,
                chips: { NAND: 2 },
            },
        });
        _managers_ModalManager__WEBPACK_IMPORTED_MODULE_2__.ModalManager.alert("Recreate an AND gate using only NAND gates.");
    },
    "nand:or": ({ name: save }) => {
        _contextmenu_menu__WEBPACK_IMPORTED_MODULE_0__.menu.splice(2, 0, {
            test: {
                label: "Test solution",
                async callback() {
                    await _managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__.TestingManager.test([
                        [[false, false], [false]],
                        [[true, false], [true]],
                        [[false, true], [true]],
                        [[true, true], [true]],
                    ]);
                },
            },
        });
        _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_3__.SandboxManager.setup({
            keybinds: _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_1__.keybinds,
            menu: _contextmenu_menu__WEBPACK_IMPORTED_MODULE_0__.menu,
            save,
            initial: [
                [
                    new _reified_Input__WEBPACK_IMPORTED_MODULE_7__.Input({ x: 100, y: 100, centered: true }),
                    new _reified_Input__WEBPACK_IMPORTED_MODULE_7__.Input({ x: 100, y: 200, centered: true }),
                    new _reified_Component__WEBPACK_IMPORTED_MODULE_6__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_5__.NandGate(), { x: 300, y: 100, centered: true }),
                    new _reified_Component__WEBPACK_IMPORTED_MODULE_6__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_5__.NandGate(), { x: 300, y: 150, centered: true }),
                    new _reified_Component__WEBPACK_IMPORTED_MODULE_6__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_5__.NandGate(), { x: 300, y: 200, centered: true }),
                    new _reified_Output__WEBPACK_IMPORTED_MODULE_8__.Output({ x: 600, y: 150 }),
                ].map((component) => component.permanent()),
                [],
            ],
            limits: {
                inputs: 2,
                outputs: 1,
                chipsTotal: 3,
                wirings: 7,
                componentsTotal: 6,
                chips: { NAND: 3 },
            },
        });
        _managers_ModalManager__WEBPACK_IMPORTED_MODULE_2__.ModalManager.alert("Recreate an OR gate using only NAND gates.");
    },
    "nand:xor": ({ name: save }) => {
        _contextmenu_menu__WEBPACK_IMPORTED_MODULE_0__.menu.splice(2, 0, {
            test: {
                label: "Test solution",
                async callback() {
                    await _managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__.TestingManager.test([
                        [[false, false], [false]],
                        [[true, false], [true]],
                        [[false, true], [true]],
                        [[true, true], [false]],
                    ]);
                },
            },
        });
        _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_3__.SandboxManager.setup({
            keybinds: _keybinds_keybinds__WEBPACK_IMPORTED_MODULE_1__.keybinds,
            menu: _contextmenu_menu__WEBPACK_IMPORTED_MODULE_0__.menu,
            save,
            initial: [
                [
                    new _reified_Input__WEBPACK_IMPORTED_MODULE_7__.Input({ x: 100, y: 100, centered: true }),
                    new _reified_Input__WEBPACK_IMPORTED_MODULE_7__.Input({ x: 100, y: 200, centered: true }),
                    new _reified_Component__WEBPACK_IMPORTED_MODULE_6__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_5__.NandGate(), { x: 300, y: 100, centered: true }),
                    new _reified_Component__WEBPACK_IMPORTED_MODULE_6__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_5__.NandGate(), { x: 300, y: 200, centered: true }),
                    new _reified_Component__WEBPACK_IMPORTED_MODULE_6__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_5__.NandGate(), { x: 500, y: 100, centered: true }),
                    new _reified_Component__WEBPACK_IMPORTED_MODULE_6__.Component(new _reified_chips__WEBPACK_IMPORTED_MODULE_5__.NandGate(), { x: 500, y: 200, centered: true }),
                    new _reified_Output__WEBPACK_IMPORTED_MODULE_8__.Output({ x: 700, y: 150, centered: true }),
                ].map((component) => component.permanent()),
                [],
            ],
            limits: {
                inputs: 2,
                outputs: 1,
                chipsTotal: 4,
                wirings: 9,
                componentsTotal: 8,
                chips: { NAND: 4 },
            },
        });
        _managers_ModalManager__WEBPACK_IMPORTED_MODULE_2__.ModalManager.alert("Recreate a XOR gate using only NAND gates.");
    },
};


/***/ }),

/***/ "./src/quickpicks/components.ts":
/*!**************************************!*\
  !*** ./src/quickpicks/components.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "quickpickComponents": () => (/* binding */ quickpickComponents)
/* harmony export */ });
/* harmony import */ var _contextmenu_insert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../contextmenu/insert */ "./src/contextmenu/insert.ts");
/* harmony import */ var _contextmenu_io__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contextmenu/io */ "./src/contextmenu/io.ts");
/* harmony import */ var _managers_QuickPickManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/QuickPickManager */ "./src/managers/QuickPickManager.ts");



const quickpickComponents = (e) => _managers_QuickPickManager__WEBPACK_IMPORTED_MODULE_2__.QuickPickManager.activate(e, [
    {
        label: "Display",
        callback(e) {
            _contextmenu_insert__WEBPACK_IMPORTED_MODULE_0__.insert["insert-component"].callback.call(undefined, e, "DISPLAY");
        },
    },
    {
        label: "Output",
        callback(e) {
            _contextmenu_io__WEBPACK_IMPORTED_MODULE_1__.io["new-output"].callback.call(undefined, e);
        },
    },
    {
        label: "Input",
        callback(e) {
            _contextmenu_io__WEBPACK_IMPORTED_MODULE_1__.io["new-input"].callback.call(undefined, e);
        },
    },
]);


/***/ }),

/***/ "./src/quickpicks/gates.ts":
/*!*********************************!*\
  !*** ./src/quickpicks/gates.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "quickpickGates": () => (/* binding */ quickpickGates)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _managers_QuickPickManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/QuickPickManager */ "./src/managers/QuickPickManager.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/SelectionManager */ "./src/managers/SelectionManager.ts");
/* harmony import */ var _reified_Component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../reified/Component */ "./src/reified/Component.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _reified_chips__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../reified/chips */ "./src/reified/chips.ts");







const quickpickGates = (e) => _managers_QuickPickManager__WEBPACK_IMPORTED_MODULE_1__.QuickPickManager.activate(e, _reified_chips__WEBPACK_IMPORTED_MODULE_6__.gates.map((gate) => ({
    label: gate.NAME,
    callback(e) {
        const component = new _reified_Component__WEBPACK_IMPORTED_MODULE_4__.Component(Reflect.construct(gate, []), _constants__WEBPACK_IMPORTED_MODULE_0__.ORIGIN_POINT);
        const selection = _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected.clone(true);
        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_2__.SandboxManager.pushHistory(() => {
            _reified_Reified__WEBPACK_IMPORTED_MODULE_5__.Reified.active.add(component);
            if (_reified_Reified__WEBPACK_IMPORTED_MODULE_5__.Reified.active.has(component)) {
                component.attach();
                const { width, height } = getComputedStyle(component.element);
                component.move({
                    x: e.clientX - parseFloat(width) / 2,
                    y: e.clientY - parseFloat(height) / 2,
                });
                _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.select(component);
            }
        }, () => {
            _reified_Reified__WEBPACK_IMPORTED_MODULE_5__.Reified.active["delete"](component);
            component.detach();
            _managers_SelectionManager__WEBPACK_IMPORTED_MODULE_3__.SelectionManager.selected = selection;
        });
    },
})));


/***/ }),

/***/ "./src/reified/Component.ts":
/*!**********************************!*\
  !*** ./src/reified/Component.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Component": () => (/* binding */ Component)
/* harmony export */ });
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../circular */ "./src/circular.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/DraggingManager */ "./src/managers/DraggingManager.ts");
/* harmony import */ var _managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/KeybindsManager */ "./src/managers/KeybindsManager.ts");
/* harmony import */ var _managers_ModalManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../managers/ModalManager */ "./src/managers/ModalManager.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _managers_TestingManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../managers/TestingManager */ "./src/managers/TestingManager.ts");
/* harmony import */ var _managers_ToastManager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../managers/ToastManager */ "./src/managers/ToastManager.ts");
/* harmony import */ var _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../managers/WiringManager */ "./src/managers/WiringManager.ts");
/* harmony import */ var _Reified__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Reified */ "./src/reified/Reified.ts");
/* harmony import */ var _chips__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./chips */ "./src/reified/chips.ts");











class Component extends _Reified__WEBPACK_IMPORTED_MODULE_9__.Reified {
    element;
    inputs;
    outputs;
    name;
    #observers = new Map();
    #mouseups = new Map();
    #contextmenus = new Map();
    #clicks = new Map();
    base;
    chip;
    #angle = 0;
    #complementary = false;
    #joins = 0;
    constructor(chip, pos, complementary = false, joins = chip.inputs) {
        super();
        this.#complementary = complementary;
        this.#joins = joins;
        this.base = chip;
        this.chip =
            this.#joins !== this.base.inputs
                ? new (_chips__WEBPACK_IMPORTED_MODULE_10__.Chip.joined(this.base.constructor, this.#joins))()
                : this.base;
        this.element = _Reified__WEBPACK_IMPORTED_MODULE_9__.html `
            <div class="component">
                <div class="component-inputs">
                    ${Array(this.joins).fill('<button class="component-input-button">I</button>').join("")}
                </div>
                <p class="component-name">${this.chip.name}</p>
                <div class="component-outputs">
                    ${Array(complementary && this.chip.outputs === 1 ? this.chip.outputs + 1 : this.chip.outputs)
            .fill('<button class="component-output-button">O</button>')
            .join("")}
                </div>
            </div>
        `;
        this.inputs = Array.from(this.element.querySelectorAll(".component-input-button"));
        this.outputs = Array.from(this.element.querySelectorAll(".component-output-button"));
        this.name = this.element.querySelector(".component-name");
        this.#updateListeners();
        requestAnimationFrame(() => this.update());
        this.move(typeof pos === "function" ? pos.call(undefined, this) : pos);
    }
    async update() {
        const out = this.chip.evaluate(this.inputs.map((i) => i.classList.contains("activated")));
        await (0,_constants__WEBPACK_IMPORTED_MODULE_1__.DELAY)(_Reified__WEBPACK_IMPORTED_MODULE_9__.Reified.GATE_DELAY + Math.random() * (2 * _Reified__WEBPACK_IMPORTED_MODULE_9__.Reified.GATE_DELAY_VARIATION) - _Reified__WEBPACK_IMPORTED_MODULE_9__.Reified.GATE_DELAY_VARIATION);
        this.outputs.forEach((output, i) => {
            output.classList.toggle("activated", this.#complementary && i === 1 ? !out[0] : out[i]);
        });
        return this;
    }
    get angle() {
        return this.#angle;
    }
    set angle(v) {
        this.#angle = v % 360;
        this.element.style.transform = `rotateZ(${v}deg)`;
        // rotate name rightside up if it's upside down
        if (v === 180) {
            this.name.style.transform = `rotateZ(${v}deg)`;
        }
        else {
            this.name.style.transform = "";
        }
        this.element.style.transformOrigin = (0,_Reified__WEBPACK_IMPORTED_MODULE_9__.computeTransformOrigin)(this.element);
    }
    get complementary() {
        return this.#complementary;
    }
    get joins() {
        return this.#joins;
    }
    rotate(angle) {
        this.angle = angle;
        return this;
    }
    attach() {
        super.attach();
        this.#attachListeners();
        _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.watch(this.element, this.name);
        return this;
    }
    detach() {
        super.detach();
        this.#destroyListeners();
        _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.forget(this.element, true);
        return this;
    }
    #updateListeners() {
        this.#observers.clear();
        this.#mouseups.clear();
        this.#contextmenus.clear();
        this.#clicks.clear();
        this.inputs.forEach((input) => {
            this.#observers.set(input, new MutationObserver(this.update.bind(this)));
            this.#mouseups.set(input, () => input.blur());
            this.#contextmenus.set(input, () => {
                _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.queueNewContext(() => [
                    {
                        "delete-connections": {
                            label: "Delete connections",
                            keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ ⌘ X" : "Ctrl Shift X",
                            callback: () => {
                                if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_6__.TestingManager.testing)
                                    return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                                const deleted = [];
                                return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.pushHistory(() => {
                                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.forEach((wire) => {
                                        if (wire.to === input) {
                                            wire.destroy();
                                            deleted.push(wire.from);
                                        }
                                    });
                                    input.classList.remove("activated");
                                }, () => {
                                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.addAll(deleted.splice(0, deleted.length).map((from) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.Wiring(from, input)));
                                });
                            },
                        },
                    },
                ]);
            });
        });
        this.outputs.forEach((output) => {
            this.#mouseups.set(output, () => output.blur());
            this.#contextmenus.set(output, () => {
                _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.queueNewContext(() => [
                    {
                        "create-connection": {
                            label: "Create connection",
                            keybind: "Q",
                            stopPropagation: true,
                            callback: () => {
                                if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_6__.TestingManager.testing)
                                    return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                                _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.NewWireContext.from = output;
                                return undefined;
                            },
                        },
                        "delete-connections": {
                            label: "Delete connections",
                            keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ ⌘ X" : "Ctrl Shift X",
                            callback: () => {
                                if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_6__.TestingManager.testing)
                                    return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                                const deleted = [];
                                return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.pushHistory(() => {
                                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.forEach((wire) => {
                                        if (wire.from === output) {
                                            wire.destroy();
                                            wire.to.classList.remove("activated");
                                            deleted.push(wire.to);
                                        }
                                    });
                                }, () => {
                                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.addAll(deleted.splice(0, deleted.length).map((to) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.Wiring(output, to)));
                                });
                            },
                        },
                    },
                ]);
            });
            this.#clicks.set(output, () => {
                if (_managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_3__.KeybindsManager.isKeyDown("KeyQ"))
                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.NewWireContext.from = output;
            });
        });
        this.#contextmenus.set(this.name, () => {
            _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.queueNewContext(() => [
                ...(this.chip.outputs === 1
                    ? [
                        {
                            "set-inputs": {
                                label: "Set inputs",
                                callback: async () => {
                                    const input = await _managers_ModalManager__WEBPACK_IMPORTED_MODULE_4__.ModalManager.prompt("Enter the number of inputs:");
                                    if (!input)
                                        return;
                                    const joins = +input;
                                    if (Number.isNaN(joins) || !Number.isInteger(joins) || joins < this.base.inputs)
                                        return _managers_ToastManager__WEBPACK_IMPORTED_MODULE_7__.ToastManager.toast({
                                            message: `Number of inputs must be a positive integer greater than or equal to ${this.base.inputs}.`,
                                            color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                                            duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                                        });
                                    if (this.#joins === joins)
                                        return;
                                    const previous = this.#joins;
                                    const deleted = [];
                                    const inputs = [...this.inputs];
                                    const old = this.chip;
                                    return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.pushHistory(() => {
                                        this.#joins = joins;
                                        _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.forEach((wire) => {
                                            if (this.inputs.some((i) => wire.to === i)) {
                                                wire.destroy();
                                                wire.to.classList.remove("activated");
                                                deleted.push([wire.from, wire.to]);
                                            }
                                        });
                                        this.#destroyListeners();
                                        this.inputs.forEach((i) => i.remove());
                                        this.inputs = Array(joins)
                                            .fill(undefined)
                                            .map(() => _Reified__WEBPACK_IMPORTED_MODULE_9__.html `<button class="component-input-button">I</button>`);
                                        const ic = this.element.querySelector(".component-inputs");
                                        this.inputs.forEach((i) => ic.appendChild(i));
                                        this.#updateListeners();
                                        this.#attachListeners();
                                        this.chip =
                                            this.#joins !== this.base.inputs
                                                ? new (_chips__WEBPACK_IMPORTED_MODULE_10__.Chip.joined(this.base.constructor, this.#joins))()
                                                : this.base;
                                        this.update();
                                        _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.forceSave();
                                        _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.snapToGridBasedUpdate();
                                    }, () => {
                                        this.#joins = previous;
                                        _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.addAll(deleted
                                            .splice(0, deleted.length)
                                            .map(([from, to]) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.Wiring(from, to)));
                                        this.#destroyListeners();
                                        this.inputs.forEach((i) => i.remove());
                                        this.inputs = inputs;
                                        const ic = this.element.querySelector(".component-inputs");
                                        this.inputs.forEach((i) => ic.appendChild(i));
                                        this.#updateListeners();
                                        this.#attachListeners();
                                        this.chip = old;
                                        this.update();
                                        _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.forceSave();
                                        _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.snapToGridBasedUpdate();
                                    });
                                },
                            },
                            "toggle-complementary": {
                                label: "Complementary output",
                                callback: () => {
                                    if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_6__.TestingManager.testing)
                                        return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                                    if (this.complementary) {
                                        const output = this.outputs[this.outputs.length - 1];
                                        const deleted = [];
                                        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.pushHistory(() => {
                                            this.#complementary = false;
                                            this.#destroyListeners();
                                            output.remove();
                                            this.outputs = Array.from(this.element.querySelectorAll(".component-output-button"));
                                            _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.forEach((wire) => {
                                                if (wire.from === output) {
                                                    wire.destroy();
                                                    wire.to.classList.remove("activated");
                                                    deleted.push(wire.to);
                                                }
                                            });
                                            this.#updateListeners();
                                            this.#attachListeners();
                                            this.update();
                                            _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.forceSave();
                                            _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.snapToGridBasedUpdate();
                                        }, () => {
                                            this.#complementary = true;
                                            this.#destroyListeners();
                                            this.element
                                                .querySelector(".component-outputs")
                                                .appendChild(output);
                                            this.outputs = Array.from(this.element.querySelectorAll(".component-output-button"));
                                            _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.addAll(deleted
                                                .splice(0, deleted.length)
                                                .map((to) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.Wiring(output, to)));
                                            this.#updateListeners();
                                            this.#attachListeners();
                                            this.update();
                                            _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.forceSave();
                                            _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.snapToGridBasedUpdate();
                                        });
                                    }
                                    else {
                                        const output = _Reified__WEBPACK_IMPORTED_MODULE_9__.html `<button class="component-output-button">O</button>`;
                                        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.pushHistory(() => {
                                            this.#complementary = true;
                                            this.#destroyListeners();
                                            this.element
                                                .querySelector(".component-outputs")
                                                .appendChild(output);
                                            this.outputs = Array.from(this.element.querySelectorAll(".component-output-button"));
                                            this.#updateListeners();
                                            this.#attachListeners();
                                            this.update();
                                            _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.forceSave();
                                            _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.snapToGridBasedUpdate();
                                        }, () => {
                                            this.#complementary = false;
                                            this.#destroyListeners();
                                            output.remove();
                                            this.outputs = Array.from(this.element.querySelectorAll(".component-output-button"));
                                            this.#updateListeners();
                                            this.#attachListeners();
                                            this.update();
                                            _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.forceSave();
                                            _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.snapToGridBasedUpdate();
                                        });
                                    }
                                },
                            },
                        },
                    ]
                    : []),
                {
                    "rotate-component": {
                        label: "Rotate component",
                        keybind: "R",
                        callback: () => {
                            if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_6__.TestingManager.testing)
                                return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                            return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.pushHistory(() => {
                                this.angle += 90;
                            }, () => {
                                this.angle -= 90;
                            });
                        },
                    },
                },
                {
                    "delete-component": {
                        label: "Delete component",
                        keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⌘ X" : "Ctrl X",
                        callback: () => {
                            if (this.PERMANENT)
                                return void _managers_ToastManager__WEBPACK_IMPORTED_MODULE_7__.ToastManager.toast({
                                    message: "This component is permanent and cannot be deleted.",
                                    color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                                    duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                                });
                            if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_6__.TestingManager.testing)
                                return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                            const deleted = [];
                            return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.pushHistory(() => {
                                _Reified__WEBPACK_IMPORTED_MODULE_9__.Reified.active["delete"](this);
                                this.detach();
                                _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.forEach((wire) => {
                                    if (this.inputs.some((i) => wire.to === i) ||
                                        this.outputs.some((o) => wire.from === o)) {
                                        wire.destroy();
                                        wire.to.classList.remove("activated");
                                        deleted.push([wire.from, wire.to]);
                                    }
                                });
                                this.inputs.forEach((i) => i.classList.remove("activated"));
                            }, () => {
                                _Reified__WEBPACK_IMPORTED_MODULE_9__.Reified.active.add(this);
                                this.attach();
                                _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.addAll(deleted.splice(0, deleted.length).map(([from, to]) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.Wiring(from, to)));
                            });
                        },
                    },
                    "delete-connections": {
                        label: "Delete connections",
                        keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ ⌘ X" : "Ctrl Shift X",
                        callback: () => {
                            if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_6__.TestingManager.testing)
                                return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                            const deleted = [];
                            return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.pushHistory(() => {
                                _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.forEach((wire) => {
                                    if (this.inputs.some((i) => wire.to === i) ||
                                        this.outputs.some((o) => wire.from === o)) {
                                        wire.destroy();
                                        wire.to.classList.remove("activated");
                                        deleted.push([wire.from, wire.to]);
                                    }
                                });
                                this.inputs.forEach((i) => i.classList.remove("activated"));
                            }, () => {
                                _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.addAll(deleted.splice(0, deleted.length).map(([from, to]) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.Wiring(from, to)));
                            });
                        },
                    },
                },
            ]);
        });
    }
    #attachListeners() {
        this.inputs.forEach((input) => {
            this.#observers.get(input).observe(input, {
                attributes: true,
                attributeFilter: ["class"],
            });
            input.addEventListener("mouseup", this.#mouseups.get(input));
            input.addEventListener("contextmenu", this.#contextmenus.get(input));
        });
        this.outputs.forEach((output) => {
            output.addEventListener("mouseup", this.#mouseups.get(output));
            output.addEventListener("contextmenu", this.#contextmenus.get(output));
            output.addEventListener("click", this.#clicks.get(output));
        });
        this.name.addEventListener("contextmenu", this.#contextmenus.get(this.name));
    }
    #destroyListeners() {
        this.#observers.forEach((o) => o.disconnect());
        this.#mouseups.forEach((listener, element) => element.removeEventListener("mouseup", listener));
        this.#contextmenus.forEach((listener, element) => element.removeEventListener("contextmenu", listener));
        this.#clicks.forEach((listener, element) => element.removeEventListener("click", listener));
        this.name.removeEventListener("contextmenu", this.#contextmenus.get(this.name));
    }
}


/***/ }),

/***/ "./src/reified/Display.ts":
/*!********************************!*\
  !*** ./src/reified/Display.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Display": () => (/* binding */ Display)
/* harmony export */ });
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../circular */ "./src/circular.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/DraggingManager */ "./src/managers/DraggingManager.ts");
/* harmony import */ var _managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/KeybindsManager */ "./src/managers/KeybindsManager.ts");
/* harmony import */ var _managers_ModalManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../managers/ModalManager */ "./src/managers/ModalManager.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _managers_TestingManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../managers/TestingManager */ "./src/managers/TestingManager.ts");
/* harmony import */ var _managers_ToastManager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../managers/ToastManager */ "./src/managers/ToastManager.ts");
/* harmony import */ var _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../managers/WiringManager */ "./src/managers/WiringManager.ts");
/* harmony import */ var _Reified__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Reified */ "./src/reified/Reified.ts");










class Display extends _Reified__WEBPACK_IMPORTED_MODULE_9__.Reified {
    element;
    inputs;
    outputs;
    display;
    #observers = new Map();
    #mouseups = new Map();
    #contextmenus = new Map();
    #clicks = new Map();
    #bits;
    #radix;
    #angle = 0;
    constructor(pos = { x: 0, y: 0 }, bits = 1, radix = 10) {
        super();
        this.#bits = bits;
        this.#radix = radix;
        this.element = _Reified__WEBPACK_IMPORTED_MODULE_9__.html `
            <div class="display">
                <div class="component-inputs">
                    ${Array(bits).fill('<button class="component-input-button">I</button>').join("")}
                </div>
                <p class="display-content">0</p>
                <div class="component-outputs">
                    ${Array(bits).fill('<button class="component-output-button">O</button>').join("")}
                </div>
            </div>
        `;
        this.inputs = Array.from(this.element.querySelectorAll(".component-input-button"));
        this.outputs = Array.from(this.element.querySelectorAll(".component-output-button"));
        this.display = this.element.querySelector(".display-content");
        this.#updateListeners();
        requestAnimationFrame(() => this.update());
        this.move(pos);
    }
    async update() {
        const out = this.inputs.map((i) => i.classList.contains("activated"));
        await (0,_constants__WEBPACK_IMPORTED_MODULE_1__.DELAY)(_Reified__WEBPACK_IMPORTED_MODULE_9__.Reified.GATE_DELAY + Math.random() * (2 * _Reified__WEBPACK_IMPORTED_MODULE_9__.Reified.GATE_DELAY_VARIATION) - _Reified__WEBPACK_IMPORTED_MODULE_9__.Reified.GATE_DELAY_VARIATION);
        this.display.textContent = out
            .reverse()
            .reduce((a, b, i, n) => a + +b * 2 ** (n.length - i - 1), 0)
            .toString(this.#radix);
        [...this.outputs].reverse().forEach((output, i) => {
            output.classList.toggle("activated", out[i]);
        });
        return this;
    }
    get bits() {
        return this.#bits;
    }
    get radix() {
        return this.#radix;
    }
    get angle() {
        return this.#angle;
    }
    set angle(v) {
        this.#angle = v % 360;
        this.element.style.transform = `rotateZ(${v}deg)`;
        if (v === 180) {
            this.display.style.transform = `rotateZ(${v}deg)`;
        }
        else {
            this.display.style.transform = "";
        }
        this.element.style.transformOrigin = (0,_Reified__WEBPACK_IMPORTED_MODULE_9__.computeTransformOrigin)(this.element);
    }
    rotate(angle) {
        this.angle = angle;
        return this;
    }
    attach() {
        super.attach();
        this.#attachListeners();
        _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.watch(this.element, this.display);
        return this;
    }
    detach() {
        super.detach();
        this.#destroyListeners();
        _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.forget(this.element, true);
        return this;
    }
    #updateListeners() {
        this.#observers.clear();
        this.#mouseups.clear();
        this.#contextmenus.clear();
        this.#clicks.clear();
        this.inputs.forEach((input) => {
            this.#observers.set(input, new MutationObserver(this.update.bind(this)));
            this.#mouseups.set(input, () => input.blur());
            this.#contextmenus.set(input, () => {
                _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.queueNewContext(() => [
                    {
                        "delete-connections": {
                            label: "Delete connections",
                            keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ ⌘ X" : "Ctrl Shift X",
                            callback: () => {
                                if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_6__.TestingManager.testing)
                                    return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                                const deleted = [];
                                return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.pushHistory(() => {
                                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.forEach((wire) => {
                                        if (wire.to === input) {
                                            wire.destroy();
                                            deleted.push(wire.from);
                                        }
                                    });
                                    input.classList.remove("activated");
                                }, () => {
                                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.addAll(deleted.splice(0, deleted.length).map((from) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.Wiring(from, input)));
                                });
                            },
                        },
                    },
                ]);
            });
        });
        this.outputs.forEach((output) => {
            this.#mouseups.set(output, () => output.blur());
            this.#contextmenus.set(output, () => {
                _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.queueNewContext(() => [
                    {
                        "create-connection": {
                            label: "Create connection",
                            keybind: "Q",
                            stopPropagation: true,
                            callback: () => {
                                if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_6__.TestingManager.testing)
                                    return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                                _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.NewWireContext.from = output;
                                return undefined;
                            },
                        },
                        "delete-connections": {
                            label: "Delete connections",
                            keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ ⌘ X" : "Ctrl Shift X",
                            callback: () => {
                                if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_6__.TestingManager.testing)
                                    return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                                const deleted = [];
                                return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.pushHistory(() => {
                                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.forEach((wire) => {
                                        if (wire.from === output) {
                                            wire.destroy();
                                            wire.to.classList.remove("activated");
                                            deleted.push(wire.to);
                                        }
                                    });
                                }, () => {
                                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.addAll(deleted.splice(0, deleted.length).map((to) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.Wiring(output, to)));
                                });
                            },
                        },
                    },
                ]);
            });
            this.#clicks.set(output, () => {
                if (_managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_3__.KeybindsManager.isKeyDown("KeyQ"))
                    _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.NewWireContext.from = output;
            });
        });
        this.#contextmenus.set(this.display, () => {
            _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.queueNewContext(() => [
                {
                    "set-bits": {
                        label: "Set bits",
                        callback: async () => {
                            const input = await _managers_ModalManager__WEBPACK_IMPORTED_MODULE_4__.ModalManager.prompt("Enter the number of bits:");
                            if (!input)
                                return;
                            const bits = +input;
                            if (Number.isNaN(bits) || !Number.isInteger(bits) || bits < 1)
                                return _managers_ToastManager__WEBPACK_IMPORTED_MODULE_7__.ToastManager.toast({
                                    message: "Number of bits must be a positive integer.",
                                    color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                                    duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                                });
                            if (this.#bits === bits)
                                return;
                            const previous = this.#bits;
                            const deleted = [];
                            const inputs = [...this.inputs];
                            const outputs = [...this.outputs];
                            return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.pushHistory(() => {
                                this.#bits = bits;
                                _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.forEach((wire) => {
                                    if (this.inputs.some((i) => wire.to === i) ||
                                        this.outputs.some((o) => wire.from === o)) {
                                        wire.destroy();
                                        wire.to.classList.remove("activated");
                                        deleted.push([wire.from, wire.to]);
                                    }
                                });
                                this.#destroyListeners();
                                this.inputs.forEach((i) => i.remove());
                                this.outputs.forEach((o) => o.remove());
                                this.inputs = Array(bits)
                                    .fill(undefined)
                                    .map(() => _Reified__WEBPACK_IMPORTED_MODULE_9__.html `<button class="component-input-button">I</button>`);
                                this.outputs = Array(bits)
                                    .fill(undefined)
                                    .map(() => _Reified__WEBPACK_IMPORTED_MODULE_9__.html `<button class="component-output-button">O</button>`);
                                const ic = this.element.querySelector(".component-inputs");
                                const oc = this.element.querySelector(".component-outputs");
                                this.inputs.forEach((i) => ic.appendChild(i));
                                this.outputs.forEach((o) => oc.appendChild(o));
                                this.#updateListeners();
                                this.#attachListeners();
                                this.update();
                                _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.forceSave();
                                _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.snapToGridBasedUpdate();
                            }, () => {
                                this.#bits = previous;
                                _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.addAll(deleted.splice(0, deleted.length).map(([from, to]) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.Wiring(from, to)));
                                this.#destroyListeners();
                                this.inputs.forEach((i) => i.remove());
                                this.outputs.forEach((o) => o.remove());
                                this.inputs = inputs;
                                this.outputs = outputs;
                                const ic = this.element.querySelector(".component-inputs");
                                const oc = this.element.querySelector(".component-outputs");
                                this.inputs.forEach((i) => ic.appendChild(i));
                                this.outputs.forEach((o) => oc.appendChild(o));
                                this.#updateListeners();
                                this.#attachListeners();
                                this.update();
                                _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.forceSave();
                                _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.snapToGridBasedUpdate();
                            });
                        },
                    },
                    "set-radix": {
                        label: "Set radix",
                        callback: async () => {
                            const input = await _managers_ModalManager__WEBPACK_IMPORTED_MODULE_4__.ModalManager.prompt("Enter the number of bits:");
                            if (!input)
                                return;
                            const radix = +input;
                            if (Number.isNaN(radix) || !Number.isInteger(radix) || radix < 1 || radix > 16)
                                return _managers_ToastManager__WEBPACK_IMPORTED_MODULE_7__.ToastManager.toast({
                                    message: "Display radix must be an integer from 1 to 16.",
                                    color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                                    duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                                });
                            const previous = this.#radix;
                            return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.pushHistory(() => {
                                this.#radix = radix;
                                this.update();
                                _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.forceSave();
                            }, () => {
                                this.#radix = previous;
                                this.update();
                                _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.forceSave();
                            });
                        },
                    },
                },
                {
                    "rotate-component": {
                        label: "Rotate component",
                        keybind: "R",
                        callback: () => {
                            if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_6__.TestingManager.testing)
                                return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                            return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.pushHistory(() => {
                                this.angle += 90;
                            }, () => {
                                this.angle -= 90;
                            });
                        },
                    },
                },
                {
                    "delete-component": {
                        label: "Delete component",
                        keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⌘ X" : "Ctrl X",
                        callback: () => {
                            if (this.PERMANENT)
                                return void _managers_ToastManager__WEBPACK_IMPORTED_MODULE_7__.ToastManager.toast({
                                    message: "This component is permanent and cannot be deleted.",
                                    color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                                    duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                                });
                            if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_6__.TestingManager.testing)
                                return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                            const deleted = [];
                            return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.pushHistory(() => {
                                _Reified__WEBPACK_IMPORTED_MODULE_9__.Reified.active["delete"](this);
                                this.detach();
                                _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.forEach((wire) => {
                                    if (this.inputs.some((i) => wire.to === i) ||
                                        this.outputs.some((o) => wire.from === o)) {
                                        wire.destroy();
                                        wire.to.classList.remove("activated");
                                        deleted.push([wire.from, wire.to]);
                                    }
                                });
                                this.inputs.forEach((i) => i.classList.remove("activated"));
                            }, () => {
                                _Reified__WEBPACK_IMPORTED_MODULE_9__.Reified.active.add(this);
                                this.attach();
                                _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.addAll(deleted.splice(0, deleted.length).map(([from, to]) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.Wiring(from, to)));
                            });
                        },
                    },
                    "delete-connections": {
                        label: "Delete connections",
                        keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ ⌘ X" : "Ctrl Shift X",
                        callback: () => {
                            if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_6__.TestingManager.testing)
                                return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                            const deleted = [];
                            return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_5__.SandboxManager.pushHistory(() => {
                                _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.forEach((wire) => {
                                    if (this.inputs.some((i) => wire.to === i) ||
                                        this.outputs.some((o) => wire.from === o)) {
                                        wire.destroy();
                                        wire.to.classList.remove("activated");
                                        deleted.push([wire.from, wire.to]);
                                    }
                                });
                                this.inputs.forEach((i) => i.classList.remove("activated"));
                            }, () => {
                                _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.WiringManager.wires.addAll(deleted.splice(0, deleted.length).map(([from, to]) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_8__.Wiring(from, to)));
                            });
                        },
                    },
                },
            ]);
        });
    }
    #attachListeners() {
        this.inputs.forEach((input) => {
            this.#observers.get(input).observe(input, {
                attributes: true,
                attributeFilter: ["class"],
            });
            input.addEventListener("mouseup", this.#mouseups.get(input));
            input.addEventListener("contextmenu", this.#contextmenus.get(input));
        });
        this.outputs.forEach((output) => {
            output.addEventListener("mouseup", this.#mouseups.get(output));
            output.addEventListener("contextmenu", this.#contextmenus.get(output));
            output.addEventListener("click", this.#clicks.get(output));
        });
        this.display.addEventListener("contextmenu", this.#contextmenus.get(this.display));
    }
    #destroyListeners() {
        this.#observers.forEach((o) => o.disconnect());
        this.#mouseups.forEach((listener, element) => element.removeEventListener("mouseup", listener));
        this.#contextmenus.forEach((listener, element) => element.removeEventListener("contextmenu", listener));
        this.#clicks.forEach((listener, element) => element.removeEventListener("click", listener));
        this.display.removeEventListener("contextmenu", this.#contextmenus.get(this.display));
    }
}


/***/ }),

/***/ "./src/reified/Input.ts":
/*!******************************!*\
  !*** ./src/reified/Input.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Input": () => (/* binding */ Input)
/* harmony export */ });
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../circular */ "./src/circular.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/DraggingManager */ "./src/managers/DraggingManager.ts");
/* harmony import */ var _managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/KeybindsManager */ "./src/managers/KeybindsManager.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _managers_TestingManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../managers/TestingManager */ "./src/managers/TestingManager.ts");
/* harmony import */ var _managers_ToastManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../managers/ToastManager */ "./src/managers/ToastManager.ts");
/* harmony import */ var _managers_WiringManager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../managers/WiringManager */ "./src/managers/WiringManager.ts");
/* harmony import */ var _Reified__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Reified */ "./src/reified/Reified.ts");









class Input extends _Reified__WEBPACK_IMPORTED_MODULE_8__.Reified {
    element;
    constructor(pos = { x: 0, y: 0 }) {
        super();
        this.element = _Reified__WEBPACK_IMPORTED_MODULE_8__.html `<button class="board-input">I</button>`;
        this.move(pos);
    }
    #mouseup = () => {
        this.element.blur();
    };
    #mousedown = (e) => {
        this.element.dataset.x = e.clientX.toString();
        this.element.dataset.y = e.clientY.toString();
    };
    #click = (e) => {
        if (_managers_KeybindsManager__WEBPACK_IMPORTED_MODULE_3__.KeybindsManager.isKeyDown("KeyQ"))
            return (_managers_WiringManager__WEBPACK_IMPORTED_MODULE_7__.NewWireContext.from = this.element);
        if (Math.hypot(e.clientX - +this.element.dataset.x, e.clientY - +this.element.dataset.y) > 2)
            return;
        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_5__.TestingManager.testing)
            return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
        const active = this.element.classList.contains("activated");
        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_4__.SandboxManager.pushHistory(() => {
            this.element.classList.toggle("activated", !active);
        }, () => {
            this.element.classList.toggle("activated", active);
        });
    };
    #contextmenu = () => {
        _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_4__.SandboxManager.queueNewContext(() => [
            {
                "create-connection": {
                    label: "Create connection",
                    keybind: "Q",
                    stopPropagation: true,
                    callback: () => {
                        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_5__.TestingManager.testing)
                            return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                        _managers_WiringManager__WEBPACK_IMPORTED_MODULE_7__.NewWireContext.from = this.element;
                        return undefined;
                    },
                },
                "delete-input": {
                    label: "Delete input",
                    keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⌘ X" : "Ctrl X",
                    callback: () => {
                        if (this.PERMANENT)
                            return void _managers_ToastManager__WEBPACK_IMPORTED_MODULE_6__.ToastManager.toast({
                                message: "This input is permanent and cannot be deleted.",
                                color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                                duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                            });
                        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_5__.TestingManager.testing)
                            return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                        const deleted = [];
                        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_4__.SandboxManager.pushHistory(() => {
                            _Reified__WEBPACK_IMPORTED_MODULE_8__.Reified.active["delete"](this);
                            this.detach();
                            _managers_WiringManager__WEBPACK_IMPORTED_MODULE_7__.WiringManager.wires.forEach((wire) => {
                                if (wire.from === this.element) {
                                    wire.destroy();
                                    wire.to.classList.remove("activated");
                                    deleted.push(wire.to);
                                }
                            });
                        }, () => {
                            _Reified__WEBPACK_IMPORTED_MODULE_8__.Reified.active.add(this);
                            this.attach();
                            _managers_WiringManager__WEBPACK_IMPORTED_MODULE_7__.WiringManager.wires.addAll(deleted.splice(0, deleted.length).map((to) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_7__.Wiring(this.element, to)));
                        });
                    },
                },
                "delete-connections": {
                    label: "Delete connections",
                    keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ ⌘ X" : "Ctrl Shift X",
                    callback: () => {
                        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_5__.TestingManager.testing)
                            return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                        const deleted = [];
                        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_4__.SandboxManager.pushHistory(() => {
                            _managers_WiringManager__WEBPACK_IMPORTED_MODULE_7__.WiringManager.wires.forEach((wire) => {
                                if (wire.from === this.element) {
                                    wire.destroy();
                                    wire.to.classList.remove("activated");
                                    deleted.push(wire.to);
                                }
                            });
                        }, () => {
                            _managers_WiringManager__WEBPACK_IMPORTED_MODULE_7__.WiringManager.wires.addAll(deleted.splice(0, deleted.length).map((to) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_7__.Wiring(this.element, to)));
                        });
                    },
                },
            },
        ]);
    };
    attach() {
        super.attach();
        this.element.addEventListener("mouseup", this.#mouseup);
        this.element.addEventListener("mousedown", this.#mousedown);
        this.element.addEventListener("click", this.#click);
        this.element.addEventListener("contextmenu", this.#contextmenu);
        _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.watch(this.element);
        return this;
    }
    detach() {
        super.detach();
        this.element.removeEventListener("mouseup", this.#mouseup);
        this.element.removeEventListener("mousedown", this.#mousedown);
        this.element.removeEventListener("click", this.#click);
        this.element.removeEventListener("contextmenu", this.#contextmenu);
        _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.forget(this.element, true);
        return this;
    }
}


/***/ }),

/***/ "./src/reified/Output.ts":
/*!*******************************!*\
  !*** ./src/reified/Output.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Output": () => (/* binding */ Output)
/* harmony export */ });
/* harmony import */ var _circular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../circular */ "./src/circular.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/DraggingManager */ "./src/managers/DraggingManager.ts");
/* harmony import */ var _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/SandboxManager */ "./src/managers/SandboxManager.ts");
/* harmony import */ var _managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../managers/TestingManager */ "./src/managers/TestingManager.ts");
/* harmony import */ var _managers_ToastManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../managers/ToastManager */ "./src/managers/ToastManager.ts");
/* harmony import */ var _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../managers/WiringManager */ "./src/managers/WiringManager.ts");
/* harmony import */ var _Reified__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Reified */ "./src/reified/Reified.ts");








class Output extends _Reified__WEBPACK_IMPORTED_MODULE_7__.Reified {
    element;
    #mouseup = () => {
        this.element.blur();
    };
    #contextmenu = () => {
        _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_3__.SandboxManager.queueNewContext(() => [
            {
                "delete-output": {
                    label: "Delete output",
                    keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⌘ X" : "Ctrl X",
                    callback: () => {
                        if (this.PERMANENT)
                            return void _managers_ToastManager__WEBPACK_IMPORTED_MODULE_5__.ToastManager.toast({
                                message: "This output is permanent and cannot be deleted.",
                                color: _constants__WEBPACK_IMPORTED_MODULE_1__.ACTIVATED_CSS_COLOR,
                                duration: _constants__WEBPACK_IMPORTED_MODULE_1__.TOAST_DURATION,
                            });
                        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__.TestingManager.testing)
                            return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                        const deleted = [];
                        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_3__.SandboxManager.pushHistory(() => {
                            _Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active["delete"](this);
                            this.detach();
                            _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.forEach((wire) => {
                                if (wire.to === this.element) {
                                    wire.destroy();
                                    deleted.push(wire.from);
                                }
                            });
                            this.element.classList.remove("activated");
                        }, () => {
                            _Reified__WEBPACK_IMPORTED_MODULE_7__.Reified.active.add(this);
                            this.attach();
                            _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.addAll(deleted.splice(0, deleted.length).map((from) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.Wiring(from, this.element)));
                        });
                    },
                },
                "delete-connections": {
                    label: "Delete connections",
                    keybind: _circular__WEBPACK_IMPORTED_MODULE_0__.IS_MAC_OS ? "⬆ ⌘ X" : "Ctrl Shift X",
                    callback: () => {
                        if (_managers_TestingManager__WEBPACK_IMPORTED_MODULE_4__.TestingManager.testing)
                            return (0,_constants__WEBPACK_IMPORTED_MODULE_1__.LOCKED_FOR_TESTING)();
                        const deleted = [];
                        return _managers_SandboxManager__WEBPACK_IMPORTED_MODULE_3__.SandboxManager.pushHistory(() => {
                            _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.forEach((wire) => {
                                if (wire.to === this.element) {
                                    wire.destroy();
                                    deleted.push(wire.from);
                                }
                            });
                            this.element.classList.remove("activated");
                        }, () => {
                            _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.WiringManager.wires.addAll(deleted.splice(0, deleted.length).map((from) => new _managers_WiringManager__WEBPACK_IMPORTED_MODULE_6__.Wiring(from, this.element)));
                        });
                    },
                },
            },
        ]);
    };
    constructor(pos = { x: 0, y: 0 }) {
        super();
        this.element = _Reified__WEBPACK_IMPORTED_MODULE_7__.html `<button class="board-output">O</button>`;
        this.move(pos);
    }
    attach() {
        super.attach();
        this.element.addEventListener("mouseup", this.#mouseup);
        this.element.addEventListener("contextmenu", this.#contextmenu);
        _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.watch(this.element);
        return this;
    }
    detach() {
        super.detach();
        this.element.removeEventListener("mouseup", this.#mouseup);
        this.element.removeEventListener("contextmenu", this.#contextmenu);
        _managers_DraggingManager__WEBPACK_IMPORTED_MODULE_2__.DraggingManager.forget(this.element, true);
        return this;
    }
}


/***/ }),

/***/ "./src/reified/Reified.ts":
/*!********************************!*\
  !*** ./src/reified/Reified.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Reified": () => (/* binding */ Reified),
/* harmony export */   "computeTransformOrigin": () => (/* binding */ computeTransformOrigin),
/* harmony export */   "css": () => (/* binding */ css),
/* harmony export */   "html": () => (/* binding */ html),
/* harmony export */   "overlappedBounds": () => (/* binding */ overlappedBounds),
/* harmony export */   "preventDefault": () => (/* binding */ preventDefault)
/* harmony export */ });
/* harmony import */ var _augments_WatchedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../augments/WatchedSet */ "./src/augments/WatchedSet.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _managers_StorageManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/StorageManager */ "./src/managers/StorageManager.ts");



function html(...args) {
    const [template, ...values] = args;
    const html = typeof template === "string" ? template : template.reduce((html, s, i) => html + s + (values[i] ?? ""), "");
    return new DOMParser().parseFromString(html, "text/html").body.childNodes[0];
}
function css(...args) {
    const [template, ...values] = args;
    const css = typeof template === "string" ? template : template.reduce((css, s, i) => css + s + (values[i] ?? ""), "");
    return css;
}
function computeTransformOrigin(element) {
    const { width, height, transform } = getComputedStyle(element);
    if (transform && transform !== "none") {
        const values = transform.match(/^matrix\((.+)\)$/)?.[1].split(", ");
        if (values) {
            element.style.translate = "";
            const [a, b] = values.map(Number);
            const angle = (Math.round(Math.atan2(b, a) * (180 / Math.PI)) + 360) % 360;
            if (angle === 0 || angle === 90)
                return parseFloat(height) / 2 + "px " + parseFloat(height) / 2 + "px";
            if (angle === 180)
                return "center";
            element.style.translate = "0 " + (parseFloat(width) - parseFloat(height)) + "px";
            return parseFloat(height) / 2 + "px " + parseFloat(height) / 2 + "px";
        }
    }
    return "center";
}
function overlappedBounds(rect, from, to) {
    const bounds = {
        x: Math.min(from.x, to.x),
        y: Math.min(from.y, to.y),
        width: Math.abs(from.x - to.x),
        height: Math.abs(from.y - to.y),
    };
    return (rect.x <= bounds.x + bounds.width &&
        rect.x + rect.width >= bounds.x &&
        rect.y <= bounds.y + bounds.height &&
        rect.y + rect.height >= bounds.y);
}
function preventDefault(e) {
    e.preventDefault();
}
class Reified {
    uuid = (0,_constants__WEBPACK_IMPORTED_MODULE_1__.SCUFFED_UUID)();
    PERMANENT = false;
    static active = new _augments_WatchedSet__WEBPACK_IMPORTED_MODULE_0__.WatchedSet();
    static get root() {
        return document.querySelector(".reified-root");
    }
    move({ x, y, centered, relative }) {
        this.element.style.transformOrigin = computeTransformOrigin(this.element);
        if (relative) {
            this.element.style.left = parseFloat(this.element.style.left) + (x ?? 0) + "px";
            this.element.style.top = parseFloat(this.element.style.top) + (y ?? 0) + "px";
        }
        else {
            if (typeof x !== "undefined")
                this.element.style.left = x + "px";
            if (typeof y !== "undefined")
                this.element.style.top = y + "px";
        }
        if (centered)
            requestAnimationFrame(() => {
                const { top, left, width, height } = getComputedStyle(this.element);
                this.move({
                    x: parseFloat(left) - parseFloat(width) / 2,
                    y: parseFloat(top) - parseFloat(height) / 2,
                });
            });
    }
    attach() {
        Reified.root.appendChild(this.element);
        return this;
    }
    detach() {
        this.element.remove();
        return this;
    }
    permanent() {
        this.PERMANENT = true;
        return this;
    }
    get permanence() {
        return this.PERMANENT;
    }
    get pos() {
        return {
            x: parseFloat(this.element.style.left),
            y: parseFloat(this.element.style.top),
        };
    }
    static #GATE_DELAY = 100;
    static #GATE_DELAY_VARIATION = 25;
    static get GATE_DELAY() {
        return this.#GATE_DELAY;
    }
    static get GATE_DELAY_VARIATION() {
        return this.#GATE_DELAY_VARIATION;
    }
    static set GATE_DELAY(v) {
        this.#GATE_DELAY = v;
        _managers_StorageManager__WEBPACK_IMPORTED_MODULE_2__.StorageManager.set("settings.gateDelay", this.#GATE_DELAY);
    }
    static set GATE_DELAY_VARIATION(v) {
        this.#GATE_DELAY_VARIATION = v;
        _managers_StorageManager__WEBPACK_IMPORTED_MODULE_2__.StorageManager.set("settings.gateDelayVariation", this.#GATE_DELAY_VARIATION);
    }
    static {
        this.#GATE_DELAY = _managers_StorageManager__WEBPACK_IMPORTED_MODULE_2__.StorageManager.get("settings.gateDelay") ?? this.#GATE_DELAY;
        this.#GATE_DELAY_VARIATION = _managers_StorageManager__WEBPACK_IMPORTED_MODULE_2__.StorageManager.get("settings.gateDelayVariation") ?? this.#GATE_DELAY_VARIATION;
    }
}


/***/ }),

/***/ "./src/reified/chips.ts":
/*!******************************!*\
  !*** ./src/reified/chips.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AndGate": () => (/* binding */ AndGate),
/* harmony export */   "BufferGate": () => (/* binding */ BufferGate),
/* harmony export */   "Chip": () => (/* binding */ Chip),
/* harmony export */   "FullAdderGate": () => (/* binding */ FullAdderGate),
/* harmony export */   "HalfAdderGate": () => (/* binding */ HalfAdderGate),
/* harmony export */   "NandGate": () => (/* binding */ NandGate),
/* harmony export */   "NorGate": () => (/* binding */ NorGate),
/* harmony export */   "NotGate": () => (/* binding */ NotGate),
/* harmony export */   "OrGate": () => (/* binding */ OrGate),
/* harmony export */   "XnorGate": () => (/* binding */ XnorGate),
/* harmony export */   "XorGate": () => (/* binding */ XorGate),
/* harmony export */   "chips": () => (/* binding */ chips),
/* harmony export */   "gates": () => (/* binding */ gates)
/* harmony export */ });
class Chip {
    static NAME;
    static INPUTS;
    static OUTPUTS;
    name;
    inputs;
    outputs;
    constructor(name, inputs, outputs) {
        this.name = name;
        this.inputs = inputs;
        this.outputs = outputs;
    }
    evaluate(inputs) {
        return this.output(inputs);
    }
    static joined(chip, n) {
        // gates should have at least one input and one output
        if (chip.INPUTS < 1 || chip.OUTPUTS < 1)
            throw new TypeError("Invalid chip");
        // if there is only one input then it's just a buffer gate
        // special case if chip is a not gate, then it's just a not gate
        if (n === 1)
            return (chip instanceof NotGate ? NotGate : BufferGate);
        return class extends Chip {
            static NAME = chip.NAME;
            static INPUTS = n;
            static OUTPUTS = chip.OUTPUTS;
            #chips = Array.from({ length: n - 1 }, () => new chip());
            constructor() {
                super(chip.NAME, n, chip.OUTPUTS);
            }
            output(inputs) {
                return this.#chips
                    .slice(1)
                    .reduce((output, chip, i) => chip.output([inputs[i + chip.inputs], ...output]), this.#chips[0].output(inputs.slice(0, chip.INPUTS)));
            }
        };
    }
}
class AndGate extends Chip {
    static NAME = "AND";
    static INPUTS = 2;
    static OUTPUTS = 1;
    constructor() {
        super("AND", 2, 1);
    }
    output([a, b]) {
        return [a && b];
    }
}
class OrGate extends Chip {
    static NAME = "OR";
    static INPUTS = 2;
    static OUTPUTS = 1;
    constructor() {
        super("OR", 2, 1);
    }
    output([a, b]) {
        return [a || b];
    }
}
class NotGate extends Chip {
    static NAME = "NOT";
    static INPUTS = 1;
    static OUTPUTS = 1;
    constructor() {
        super("NOT", 1, 1);
    }
    output([n]) {
        return [!n];
    }
}
class NandGate extends Chip {
    static NAME = "NAND";
    static INPUTS = 2;
    static OUTPUTS = 1;
    constructor() {
        super("NAND", 2, 1);
    }
    output([a, b]) {
        return [!(a && b)];
    }
}
class NorGate extends Chip {
    static NAME = "NOR";
    static INPUTS = 2;
    static OUTPUTS = 1;
    constructor() {
        super("NOR", 2, 1);
    }
    output([a, b]) {
        return [!(a || b)];
    }
}
class XorGate extends Chip {
    static NAME = "XOR";
    static INPUTS = 2;
    static OUTPUTS = 1;
    constructor() {
        super("XOR", 2, 1);
    }
    output([a, b]) {
        return [!!(+a ^ +b)];
    }
}
class XnorGate extends Chip {
    static NAME = "XNOR";
    static INPUTS = 2;
    static OUTPUTS = 1;
    constructor() {
        super("XNOR", 2, 1);
    }
    output([a, b]) {
        return [!(+a ^ +b)];
    }
}
class BufferGate extends Chip {
    static NAME = "BUF";
    static INPUTS = 1;
    static OUTPUTS = 1;
    constructor() {
        super("BUFFER", 1, 1);
    }
    output([n]) {
        return [n];
    }
}
const gates = [AndGate, OrGate, NotGate, NandGate, NorGate, XorGate, XnorGate, BufferGate];
const chips = new Map(gates.map((gate) => [gate.NAME, gate]));
chips.set("BUFF", BufferGate);
chips.set("BUFFER", BufferGate);
class HalfAdderGate extends Chip {
    static NAME = "HALFADDER";
    static INPUTS = 2;
    static OUTPUTS = 2;
    constructor() {
        super("HADD", 2, 2);
    }
    output([a, b]) {
        return [!!(+a ^ +b), a && b];
    }
}
chips.set(HalfAdderGate.NAME, HalfAdderGate);
chips.set("HADD", HalfAdderGate);
class FullAdderGate extends Chip {
    static NAME = "FULLADDER";
    static INPUTS = 3;
    static OUTPUTS = 2;
    constructor() {
        super("FADD", 3, 2);
    }
    output([a, b, c]) {
        // (a xor b) xor c
        // ((a xor b) and c) or (a and b)
        return [!!(+!!(+a ^ +b) ^ +c), (!!(+a ^ +b) && c) || (a && b)];
    }
}
chips.set(FullAdderGate.NAME, FullAdderGate);
chips.set("FADD", FullAdderGate);


/***/ }),

/***/ "./src/styling/attacher.ts":
/*!*********************************!*\
  !*** ./src/styling/attacher.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attachStyles": () => (/* binding */ attachStyles)
/* harmony export */ });
const attachStyles = async (styles) => {
    // using ts extension because of webpack things
    const css = await Promise.all(styles.map((name) => __webpack_require__("./src/styling lazy recursive ^\\.\\/.*\\.ts$")(`./${name}.ts`))).then((css) => css.map((_) => _.default).join(""));
    const style = document.createElement("style");
    style.textContent = css;
    document.head.appendChild(style);
    // return a promise that resolves when the styles have been loaded
    return new Promise((resolve, reject) => {
        style.addEventListener("load", () => resolve(), { once: true });
        style.addEventListener("error", () => reject(), { once: true });
    });
};


/***/ }),

/***/ "./src/styling/buttons.ts":
/*!********************************!*\
  !*** ./src/styling/buttons.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_reified_Reified__WEBPACK_IMPORTED_MODULE_1__.css `
    button.tools,
    button.settings,
    button.darkmode {
        position: absolute;

        left: 16px;

        width: 40px;
        height: 40px;

        display: grid;
        place-items: center;

        font-size: 18px;

        border: none;
        border-radius: 50%;

        cursor: pointer;

        user-select: none;

        background-color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.EVEN_LIGHTER_GRAY_CSS_COLOR};

        transition: 0.1s ease background-color;
    }

    button.tools {
        bottom: 124px;
    }

    button.settings {
        bottom: 70px;
    }

    button.darkmode {
        bottom: 16px;
    }

    button.tools:hover,
    button.settings:hover,
    button.darkmode:hover {
        background-color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHTER_GRAY_CSS_COLOR};
    }

    button.undo {
        left: 64px;
    }

    button.redo {
        left: 122px;
    }

    button.undo,
    button.redo {
        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.KINDA_LIGHT_GRAY_CSS_COLOR};

        bottom: 24px;

        position: absolute;

        font-size: 16px;

        border: none;

        background: transparent;

        cursor: pointer;

        user-select: none;

        transition: 0.1s ease color;
    }

    button.undo:hover,
    button.redo:hover {
        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.SUPER_GRAY_CSS_COLOR};
    }
`);


/***/ }),

/***/ "./src/styling/cad.ts":
/*!****************************!*\
  !*** ./src/styling/cad.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_reified_Reified__WEBPACK_IMPORTED_MODULE_0__.css `
    body {
        display: flex;
        flex-direction: column;
    }

    truth-table {
        flex: 1;

        width: 100%;

        max-width: 100%;

        max-height: 500px;
    }

    div.truth-table {
        position: relative;

        height: 100%;
        width: 100%;

        max-width: 100%;

        overflow: hidden;

        display: flex;
        flex-direction: column;
    }

    div.truth-table pre {
        flex: 1;
    }

    div.truth-table .input-highlight,
    div.truth-table .table-input {
        -ms-overflow-style: none;
        scrollbar-width: none;

        position: absolute;
        top: 0;
        left: 0;

        font-size: 16px;
        font-family: Fira Code, monospace;

        line-height: 1;

        letter-spacing: 0;

        word-spacing: 0;
        word-break: break-all;
        word-wrap: break-word;

        overflow-wrap: break-word;
        text-overflow: clip;

        overflow: scroll;
        overscroll-behavior: none;
        white-space: pre;

        border: none;
        outline: none;

        padding: 0.5rem;

        width: 100%;
        height: 100%;

        background: transparent;

        max-height: calc(100% - 52px);
    }

    div.truth-table .input-highlight {
        z-index: 0;
    }

    div.truth-table .table-input {
        z-index: 1;

        color: transparent;
        caret-color: black;
    }

    div.truth-table .input-highlight::-webkit-scrollbar,
    div.truth-table .table-input::-webkit-scrollbar {
        display: none;
    }

    div.truth-table .input-highlight::-webkit-scrollbar-thumb,
    div.truth-table .table-input::-webkit-scrollbar-thumb {
        background: transparent;
    }

    div.truth-table > div.buttons {
        display: flex;

        min-height: 52px;
    }

    div.truth-table > div.buttons > button {
        flex: 1;

        padding: 1rem 0.5rem;

        display: grid;
        place-items: center;

        user-select: none;
    }

    div.truth-table > div.buttons > button:hover {
        cursor: pointer;
    }

    cad-output {
        flex: 1;
    }

    cad-output div.cad-output {
        height: 100%;

        font-size: 16px;
        font-family: Fira Code, monospace;

        line-height: 1;

        letter-spacing: 0;

        word-spacing: 0;
        word-break: break-all;
        word-wrap: break-word;

        overflow-wrap: break-word;
        text-overflow: clip;

        overflow: scroll;
        overscroll-behavior: none;
        white-space: pre;

        padding: 0.5rem;
    }

    @media (min-width: 984px) {
        body {
            flex-direction: row;
        }

        truth-table {
            max-height: unset;

            max-width: 50vw;
        }

        cad-output {
            max-width: 50vw;
        }

        div.cad-output {
            border-left: 1px solid black;

            max-width: 50vw;
        }
    }
`);


/***/ }),

/***/ "./src/styling/component.ts":
/*!**********************************!*\
  !*** ./src/styling/component.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_reified_Reified__WEBPACK_IMPORTED_MODULE_1__.css `
    .display,
    .component {
        position: absolute;

        z-index: 10;

        display: grid;
        place-items: center;
        grid-template-columns: 6px auto 6px;

        height: fit-content;
        width: fit-content;

        min-height: 40px;
        min-width: 100px;

        background-color: white;

        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR};
        border-radius: 4px;
    }

    .display:hover,
    .component:hover {
        cursor: grab;
    }

    .component-inputs,
    .component-outputs {
        display: flex;
        flex-direction: column;
        justify-content: space-evenly;

        height: 100%;

        gap: 4px;
    }

    .component-input-button,
    .component-output-button {
        display: grid;
        place-items: center;

        font-family: serif;
        font-weight: 900;
        font-size: 12px;

        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.SUPER_GRAY_CSS_COLOR};

        height: 16px;
        width: 16px;

        padding: 0;

        user-select: none;

        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR};
    }

    .component-input-button {
        margin-left: -6px;

        border-radius: 50%;
    }

    .component-output-button {
        margin-right: -6px;

        border-radius: 2px;
    }

    .component-input-button.activated,
    .component-output-button.activated {
        color: #ff7777;
    }

    .display-content,
    .component-name {
        height: 100%;
        width: 100%;

        display: grid;
        place-items: center;

        font-family: sans-serif;
        font-weight: 900;
        font-size: 1.5rem;

        padding: 0 8px;

        color: #333333;

        user-select: none;
    }
`);


/***/ }),

/***/ "./src/styling/contextmenu.ts":
/*!************************************!*\
  !*** ./src/styling/contextmenu.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_reified_Reified__WEBPACK_IMPORTED_MODULE_1__.css `
    .tools-menu,
    .contextmenu {
        position: absolute;

        z-index: 100;

        display: flex;
        flex-direction: column;

        width: 200px;

        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR};
        border-radius: 4px;

        background-color: #fefefe;

        user-select: none;

        box-shadow: 1px 1px 4px ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR};
    }

    .tools-menu {
        left: 16px;
        bottom: 172px;

        box-shadow: none;
    }

    .tools-menu > .br,
    .contextmenu > .br {
        display: block;

        width: 100%;

        border-bottom: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR};
    }

    .tools-menu > button,
    .contextmenu > button {
        text-align: left;

        background: transparent;

        border: none;

        display: flex;
        align-items: center;
        justify-content: space-between;

        padding: 8px 8px;

        color: #999999;
    }

    .tools-menu > button:hover,
    .contextmenu > button:hover {
        cursor: pointer;

        color: #333333;

        background: #f0f0f0;
    }

    .menu-keybind {
        color: #dddddd;

        display: flex;
        align-items: center;

        gap: 2px;
    }

    .menu-keybind > span {
        display: grid;

        place-items: center;

        min-height: 20px;
        min-width: 14px;
    }

    .tools-menu > button:hover > .menu-keybind,
    .contextmenu > button:hover > .menu-keybind {
        color: #bbbbbb;
    }
`);


/***/ }),

/***/ "./src/styling/darkmode.ts":
/*!*********************************!*\
  !*** ./src/styling/darkmode.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_reified_Reified__WEBPACK_IMPORTED_MODULE_1__.css `
    body.darkmode {
        background-color: #010102;
    }

    body.darkmode button.tools,
    body.darkmode button.settings,
    body.darkmode button.darkmode {
        background-color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.DARKER_GRAY_CSS_COLOR};
    }

    body.darkmode button.tools:hover,
    body.darkmode button.settings:hover,
    body.darkmode button.darkmode:hover {
        background-color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.DARK_GRAY_CSS_COLOR};
    }

    body.darkmode button.undo,
    body.darkmode button.redo {
        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.NOT_REALLY_DARK_GRAY_CSS_COLOR};
    }

    body.darkmode button.undo:hover,
    body.darkmode button.redo:hover {
        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.ONLY_A_HINT_OF_DARK_GRAY_CSS_COLOR};
    }

    body.darkmode .board-input,
    body.darkmode .board-output {
        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHTER_GRAY_CSS_COLOR};

        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.NOT_REALLY_DARK_GRAY_CSS_COLOR};

        background-color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.KINDA_DARK_GRAY_CSS_COLOR};
    }

    body.darkmode .activated {
        background-color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.DARK_ACTIVATED_CSS_COLOR};
    }

    body.darkmode .component-input-button.activated,
    body.darkmode .component-output-button.activated {
        color: #ff9999;

        background-color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.DARK_ACTIVATED_CSS_COLOR};
    }

    body.darkmode .component-input-button,
    body.darkmode .component-output-button {
        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.NOT_REALLY_DARK_GRAY_CSS_COLOR};

        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.DARKER_GRAY_CSS_COLOR};

        background-color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.SLIGHTLY_DARKER_GRAY_CSS_COLOR};
    }

    body.darkmode .display,
    body.darkmode .component {
        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.EVEN_DARKER_GRAY_CSS_COLOR};

        background-color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.SLIGHTLY_DARKER_GRAY_CSS_COLOR};
    }

    body.darkmode .display-content,
    body.darkmode .component-name {
        font-weight: 100;

        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.KINDA_LIGHT_GRAY_CSS_COLOR};
    }

    body.darkmode .tools-menu,
    body.darkmode .contextmenu {
        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.DARKER_GRAY_CSS_COLOR};

        background-color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.EVEN_DARKER_GRAY_CSS_COLOR};

        box-shadow: 1px 1px 4px ${_constants__WEBPACK_IMPORTED_MODULE_0__.EVEN_DARKER_GRAY_CSS_COLOR};
    }

    body.darkmode .tools-menu > .br,
    body.darkmode .contextmenu > .br {
        border-bottom: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.DARKER_GRAY_CSS_COLOR};
    }

    body.darkmode .tools-menu > button,
    body.darkmode .contextmenu > button {
        font-weight: 100;
        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.MID_GRAY_CSS_COLOR};
    }

    body.darkmode .tools-menu > button:hover,
    body.darkmode .contextmenu > button:hover {
        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR};

        background-color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.DARKER_GRAY_CSS_COLOR};
    }

    body.darkmode .menu-keybind {
        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.KINDA_DARK_GRAY_CSS_COLOR};
    }

    body.darkmode .tools-menu > button:hover > .menu-keybind,
    body.darkmode .contextmenu > button:hover > .menu-keybind {
        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.ONLY_A_HINT_OF_DARK_GRAY_CSS_COLOR};
    }

    body.darkmode .toast {
        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR};

        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.DARKER_GRAY_CSS_COLOR};

        background-color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.SLIGHTLY_DARKER_GRAY_CSS_COLOR};

        box-shadow: 1px 1px 4px ${_constants__WEBPACK_IMPORTED_MODULE_0__.EVEN_DARKER_GRAY_CSS_COLOR};
    }

    body.darkmode .close-toast {
        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.KINDA_LIGHT_GRAY_CSS_COLOR};
    }

    body.darkmode .quickpick-item {
        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.KINDA_LIGHT_GRAY_CSS_COLOR};
    }

    body.darkmode.darkmode-modals .modal {
        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR};

        background-color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.EVEN_DARKER_GRAY_CSS_COLOR};

        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.DARKER_GRAY_CSS_COLOR};

        box-shadow: 1px 1px 4px ${_constants__WEBPACK_IMPORTED_MODULE_0__.EVEN_DARKER_GRAY_CSS_COLOR};
    }

    body.darkmode.darkmode-modals .modal-cancel {
        background: transparent;

        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR};

        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.DARK_GRAY_CSS_COLOR};
    }

    body.darkmode.darkmode-modals .modal-cancel:hover {
        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHTER_GRAY_CSS_COLOR};

        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.ONLY_A_HINT_OF_DARK_GRAY_CSS_COLOR};
    }

    body.darkmode.darkmode-modals .modal-ok {
        background-color: #0066ee;

        outline: 1px solid #0066ee;
    }

    body.darkmode.darkmode-modals .modal-ok:hover {
        background-color: #0077ff;

        outline: 1px solid #0077ff;
    }

    .modal-input {
        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.DARK_GRAY_CSS_COLOR};
    }
`);


/***/ }),

/***/ "./src/styling/io.ts":
/*!***************************!*\
  !*** ./src/styling/io.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_reified_Reified__WEBPACK_IMPORTED_MODULE_1__.css `
    .board-input,
    .board-output {
        position: absolute;

        z-index: 20;

        display: grid;
        place-items: center;

        color: #333333;

        font-family: serif;
        font-weight: 900;
        font-size: 16px;

        height: 24px;
        width: 24px;

        user-select: none;

        padding: 0;

        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR};
    }

    .board-input {
        border-radius: 50%;
    }

    .board-output {
        border-radius: 4px;
    }

    .board-input:hover {
        cursor: pointer;
    }

    .board-output:hover {
        cursor: grab;
    }

    .activated {
        background-color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.ACTIVATED_CSS_COLOR};

        color: ${_constants__WEBPACK_IMPORTED_MODULE_0__.EVEN_LIGHTER_GRAY_CSS_COLOR};
    }
`);


/***/ }),

/***/ "./src/styling/modals.ts":
/*!*******************************!*\
  !*** ./src/styling/modals.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_reified_Reified__WEBPACK_IMPORTED_MODULE_1__.css `
    .modal-container {
        position: absolute;

        top: 0;
        left: 0;
        bottom: 0;
        right: 0;

        z-index: 1000;

        background-color: #000000aa;

        opacity: 0;

        transition: ease-in-out 0.1s opacity;
    }

    .modal-container.modal-inactive,
    .modal.modal-inactive {
        display: none;
    }

    .modal {
        position: absolute;

        transform: translate(calc(50vw - 50%), calc(50vh - 50%));

        line-height: 1.5;
    }

    .modal-confirm,
    .modal-alert,
    .modal-prompt {
        min-width: 400px;
        min-height: 80px;

        background-color: #efefef;

        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR};
        border-radius: 4px;

        padding: 8px 10px;

        display: flex;
        flex-direction: column;

        box-shadow: 1px 1px 4px #333333;
    }

    .modal-confirm > .button-container,
    .modal-alert > .button-container,
    .modal-prompt > .button-container {
        display: flex;
        flex-direction: row-reverse;
        justify-content: flex-start;

        gap: 6px;
    }

    .modal-message {
        font-family: sans-serif;

        flex: 1;
    }

    .modal-cancel,
    .modal-ok {
        min-width: 50px;

        padding: 4px 8px;

        font-size: 12px;
        text-transform: uppercase;

        border: 0;
        border-radius: 2px;

        user-select: none;

        align-self: flex-end;
    }

    .modal-cancel {
        outline: 1px solid #333333;
    }

    .modal-ok {
        color: white;

        background-color: #0077ff;

        outline: 1px solid #0077ff;
    }

    .modal-cancel:hover {
        cursor: pointer;

        background-color: #eaeaea;
    }

    .modal-ok:hover {
        cursor: pointer;

        background-color: #0066ee;

        outline: 1px solid #0066ee;
    }

    .modal-input {
        margin: 8px 0;

        padding: 2px 4px;

        font-size: 12px;

        background: transparent;

        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR};
        border-radius: 2px;
    }

    .modal-popup {
        width: 600px;
        max-width: 600px;
    }

    .modal-popup .modal-message {
        height: 450px;
        max-height: 450px;

        overflow-y: scroll;

        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .modal .help {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .modal .help ul {
        padding-left: 16px;
    }

    .modal .help a {
        text-decoration: none;

        color: #0077ff;
    }

    .modal .help a:visited {
        color: #0066ee;
    }
`);


/***/ }),

/***/ "./src/styling/quickpick.ts":
/*!**********************************!*\
  !*** ./src/styling/quickpick.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_reified_Reified__WEBPACK_IMPORTED_MODULE_0__.css `
    .quickpick-item {
        position: absolute;

        font-family: sans-serif;

        opacity: 0;

        transition-duration: 0.2s;
        transition-timing-function: ease;
        transition-property: top, left;

        animation: forwards ease 0.2s fade-in;

        user-select: none;
    }

    .quickpick-circle {
        position: absolute;

        animation: forwards ease 0.2s fade-in;
    }

    @keyframes fade-in {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }
`);


/***/ }),

/***/ "./src/styling/settings.ts":
/*!*********************************!*\
  !*** ./src/styling/settings.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_reified_Reified__WEBPACK_IMPORTED_MODULE_0__.css `
    .settings-form {
        display: flex;
        flex-direction: column;

        gap: 16px;
    }

    .settings-control {
        display: flex;
        align-items: center;

        gap: 8px;
    }

    .settings-control input[type="checkbox"] {
        height: 16px;
        width: 16px;
    }
`);


/***/ }),

/***/ "./src/styling/style.ts":
/*!******************************!*\
  !*** ./src/styling/style.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_reified_Reified__WEBPACK_IMPORTED_MODULE_0__.css `
    *,
    *::before,
    *::after {
        margin: 0;
        box-sizing: border-box;
    }

    html {
        height: 100%;

        overflow: hidden;

        overscroll-behavior: none;
    }

    body {
        height: 100%;
    }

    .reified-root {
        z-index: 0;

        height: 100vh;
        width: 100vw;

        position: absolute;
    }

    .background-canvas,
    .foreground-canvas {
        position: absolute;

        pointer-events: none;

        width: 100vw;
        height: 100vh;
    }

    .background-canvas {
        z-index: -100;
    }

    .foreground-canvas {
        z-index: 100;
    }
`);


/***/ }),

/***/ "./src/styling/toast.ts":
/*!******************************!*\
  !*** ./src/styling/toast.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _reified_Reified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reified/Reified */ "./src/reified/Reified.ts");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_reified_Reified__WEBPACK_IMPORTED_MODULE_1__.css `
    .toasts-container {
        position: absolute;

        display: flex;
        flex-direction: column;
        justify-content: flex-end;
        align-items: flex-end;

        padding: 16px;

        gap: 8px;

        pointer-events: none;

        z-index: 100;

        width: 100vw;
        height: 100vh;
    }

    .toast {
        animation: forwards linear 0.5s fade-out;

        position: relative;

        font-family: sans-serif;

        min-width: 275px;

        padding: 10px 18px;

        border: 1px solid ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR};
        border-radius: 4px;

        background-color: #fefefe;

        user-select: none;

        box-shadow: 1px 1px 4px ${_constants__WEBPACK_IMPORTED_MODULE_0__.LIGHT_GRAY_CSS_COLOR};
    }

    .toast-color {
        position: absolute;

        width: 6px;

        top: 0;
        bottom: 0;
        left: 0;

        border-top-left-radius: 4px;
        border-bottom-left-radius: 4px;

        background-color: #fefefe;
    }

    .close-toast {
        pointer-events: all;

        position: absolute;

        margin-top: 4px;

        font-size: 10px;

        color: #aaaaaa;

        top: 0;
        right: 0;

        border: none;

        background: transparent;
    }

    .close-toast:hover {
        cursor: pointer;

        color: black;
    }

    @keyframes fade-out {
        from {
            opacity: 1;
        }

        to {
            opacity: 0;
        }
    }
`);


/***/ }),

/***/ "./src/styling lazy recursive ^\\.\\/.*\\.ts$":
/*!*********************************************************!*\
  !*** ./src/styling/ lazy ^\.\/.*\.ts$ namespace object ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./attacher.ts": "./src/styling/attacher.ts",
	"./buttons.ts": "./src/styling/buttons.ts",
	"./cad.ts": "./src/styling/cad.ts",
	"./component.ts": "./src/styling/component.ts",
	"./contextmenu.ts": "./src/styling/contextmenu.ts",
	"./darkmode.ts": "./src/styling/darkmode.ts",
	"./io.ts": "./src/styling/io.ts",
	"./modals.ts": "./src/styling/modals.ts",
	"./quickpick.ts": "./src/styling/quickpick.ts",
	"./settings.ts": "./src/styling/settings.ts",
	"./style.ts": "./src/styling/style.ts",
	"./toast.ts": "./src/styling/toast.ts"
};

function webpackAsyncContext(req) {
	return Promise.resolve().then(() => {
		if(!__webpack_require__.o(map, req)) {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		}

		var id = map[req];
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = () => (Object.keys(map));
webpackAsyncContext.id = "./src/styling lazy recursive ^\\.\\/.*\\.ts$";
module.exports = webpackAsyncContext;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/async module */
/******/ 	(() => {
/******/ 		var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 		var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 		var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 		var resolveQueue = (queue) => {
/******/ 			if(queue && !queue.d) {
/******/ 				queue.d = 1;
/******/ 				queue.forEach((fn) => (fn.r--));
/******/ 				queue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));
/******/ 			}
/******/ 		}
/******/ 		var wrapDeps = (deps) => (deps.map((dep) => {
/******/ 			if(dep !== null && typeof dep === "object") {
/******/ 				if(dep[webpackQueues]) return dep;
/******/ 				if(dep.then) {
/******/ 					var queue = [];
/******/ 					queue.d = 0;
/******/ 					dep.then((r) => {
/******/ 						obj[webpackExports] = r;
/******/ 						resolveQueue(queue);
/******/ 					}, (e) => {
/******/ 						obj[webpackError] = e;
/******/ 						resolveQueue(queue);
/******/ 					});
/******/ 					var obj = {};
/******/ 					obj[webpackQueues] = (fn) => (fn(queue));
/******/ 					return obj;
/******/ 				}
/******/ 			}
/******/ 			var ret = {};
/******/ 			ret[webpackQueues] = x => {};
/******/ 			ret[webpackExports] = dep;
/******/ 			return ret;
/******/ 		}));
/******/ 		__webpack_require__.a = (module, body, hasAwait) => {
/******/ 			var queue;
/******/ 			hasAwait && ((queue = []).d = 1);
/******/ 			var depQueues = new Set();
/******/ 			var exports = module.exports;
/******/ 			var currentDeps;
/******/ 			var outerResolve;
/******/ 			var reject;
/******/ 			var promise = new Promise((resolve, rej) => {
/******/ 				reject = rej;
/******/ 				outerResolve = resolve;
/******/ 			});
/******/ 			promise[webpackExports] = exports;
/******/ 			promise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise["catch"](x => {}));
/******/ 			module.exports = promise;
/******/ 			body((deps) => {
/******/ 				currentDeps = wrapDeps(deps);
/******/ 				var fn;
/******/ 				var getResult = () => (currentDeps.map((d) => {
/******/ 					if(d[webpackError]) throw d[webpackError];
/******/ 					return d[webpackExports];
/******/ 				}))
/******/ 				var promise = new Promise((resolve) => {
/******/ 					fn = () => (resolve(getResult));
/******/ 					fn.r = 0;
/******/ 					var fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));
/******/ 					currentDeps.map((dep) => (dep[webpackQueues](fnQueue)));
/******/ 				});
/******/ 				return fn.r ? promise : getResult();
/******/ 			}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));
/******/ 			queue && (queue.d = 0);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		// The chunk loading function for additional chunks
/******/ 		// Since all referenced chunks are already included
/******/ 		// in this file, this function is empty here.
/******/ 		__webpack_require__.e = () => (Promise.resolve());
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".index.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module used 'module' so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,