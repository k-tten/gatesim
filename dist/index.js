/*! For license information please see index.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/Component.ts":(e,t,n)=>{n.r(t),n.d(t,{Component:()=>o});var s=n("./src/contextmenu.ts"),i=n("./src/Reified.ts"),r=n("./src/WiringManager.ts");class o extends i.Reified{element;inputs;outputs;#e=new Map;#t=new Map;chip;constructor(e,{x:t,y:n}={x:0,y:0}){super(),this.chip=e,this.element=i.html`
            <div class="component">
                <div class="component-inputs">
                    ${Array(this.chip.inputs).fill('<button class="component-input-button">I</button>').join("")}
                </div>
                <p class="component-name">${this.chip.name}</p>
                <div class="component-outputs">
                    ${Array(this.chip.outputs).fill('<button class="component-output-button">O</button>').join("")}
                </div>
            </div>
        `,this.inputs=Array.from(this.element.querySelectorAll(".component-input-button")),this.outputs=Array.from(this.element.querySelectorAll(".component-output-button")),this.inputs.forEach((e=>{this.#e.set(e,new MutationObserver((()=>{const e=this.chip.evaluate(this.inputs.map((e=>e.classList.contains("activated"))));this.outputs.forEach(((t,n)=>{t.classList.toggle("activated",e[n])}))}))),this.#t.set(e,(()=>{(0,s.queueNewContext)((t=>[{"delete-connection":{label:"Delete connection",callback:()=>{r.WiringManager.wires=r.WiringManager.wires.filter((t=>t.to!==e))}}},...t]))}))})),this.outputs.forEach((e=>{this.#t.set(e,(()=>{(0,s.queueNewContext)((t=>[{"delete-connections":{label:"Delete connections",callback:()=>{r.WiringManager.wires=r.WiringManager.wires.filter((t=>t.from!==e))}}},...t]))}))})),this.move(t,n)}attach(){super.attach(),this.inputs.forEach((e=>{this.#e.get(e).observe(e,{attributeFilter:["class"],attributes:!0}),e.addEventListener("contextmenu",this.#t.get(e))})),this.outputs.forEach((e=>{e.addEventListener("contextmenu",this.#t.get(e))}))}detach(){super.detach(),this.#e.forEach((e=>e.disconnect())),this.#t.forEach(((e,t)=>t.removeEventListener("contextmenu",e)))}}},"./src/DraggingManager.ts":(e,t,n)=>{n.r(t),n.d(t,{DraggingManager:()=>s});class s{static#n;static#s={x:-1,y:-1,ox:-1,oy:-1,down:!1};static#i=new Map;static watch(e,t=e){e.dataset.watched="true";const n=t=>{this.#n=e,this.#n.dataset.dragged="true",this.#n.style.cursor="grabbing";const n=this.#n.getBoundingClientRect(),s=this.#n.parentElement?.getBoundingClientRect()??new DOMRect;this.#s.ox=t.clientX-n.left+s.left,this.#s.oy=t.clientY-n.top+s.top};t.addEventListener("mousedown",n,{capture:!0}),this.#i.set(t,n)}static forget(e){const t=this.#i.get(e);if(!t)throw new Error("Element is not currently being watched.");delete e.dataset.watched,e.removeEventListener("mousedown",t,{capture:!0}),this.#i.delete(e)}static listen(){document.body.addEventListener("mousemove",this.#r),window.addEventListener("mousedown",this.#o),window.addEventListener("mouseup",this.#a)}static deafen(){document.body.removeEventListener("mousemove",this.#r),window.removeEventListener("mousedown",this.#o),window.removeEventListener("mouseup",this.#a)}static#r=e=>{this.#s.x=e.clientX,this.#s.y=e.clientY,this.#n&&(this.#n.style.left=this.#s.x-this.#s.ox+"px",this.#n.style.top=this.#s.y-this.#s.oy+"px")};static#o=e=>{this.#s.down=!0};static#a=()=>{this.#n&&document.querySelectorAll('[data-dragged="true"]').forEach((e=>{delete e.dataset.dragged,e.style.cursor=""})),this.#s.down=!1,this.#s.x=-1,this.#s.y=-1,this.#s.ox=-1,this.#s.oy=-1,this.#n=void 0}}},"./src/Input.ts":(e,t,n)=>{n.r(t),n.d(t,{Input:()=>o});var s=n("./src/contextmenu.ts"),i=n("./src/Reified.ts"),r=n("./src/WiringManager.ts");class o extends i.Reified{element;constructor({x:e,y:t}={x:0,y:0}){super(),this.element=i.html`<button class="board-input">I</button>`,this.move(e,t)}#c=()=>{this.element.classList.toggle("activated")};#u=()=>{(0,s.queueNewContext)((e=>[{"delete-input":{label:"Delete input",callback:()=>{this.detach()}},"delete-connections":{label:"Delete connections",callback:()=>{r.WiringManager.wires=r.WiringManager.wires.filter((e=>e.from!==this.element))}}},...e]))};attach(){super.attach(),this.element.addEventListener("click",this.#c),this.element.addEventListener("contextmenu",this.#u)}detach(){super.detach(),this.element.removeEventListener("click",this.#c),this.element.removeEventListener("contextmenu",this.#u),r.WiringManager.wires=r.WiringManager.wires.filter((e=>e.from!==this.element))}}},"./src/MenuManager.ts":(e,t,n)=>{n.r(t),n.d(t,{MenuManager:()=>i});var s=n("./src/Reified.ts");class i{static#l=new Map;static use(e,t){const n=s.html`
            <div class="contextmenu">
                ${t.map((e=>Object.entries(e).map((([e,{label:t}])=>`<button class="${e}">${t}</button>`)).join(""))).join('<div class="br"></div>')}
            </div>
        `,i=new Map,r=e=>{i.clear(),n.innerHTML=e.map((e=>Object.entries(e).map((([e,{label:t}])=>`<button class="${e}">${t}</button>`)).join(""))).join('<div class="br"></div>'),e.forEach((e=>{Object.keys(e).forEach((t=>{const s=e[t].callback.bind(void 0);n.querySelector("."+t).addEventListener("click",s),n.querySelector("."+t).addEventListener("contextmenu",s),i.set(t,i)}))}))};let o;const a=()=>{if(o){const e=o;return o=void 0,e}return t};r(a()),n.style.left="0px",n.style.top="0px",n.style.display="none",document.body.appendChild(n);const c=()=>{r(a()),n.style.left="0px",n.style.top="0px",n.style.display="none"},u=e=>{e.preventDefault(),r(a()),n.style.display="",n.style.left=e.clientX+"px",n.style.top=e.clientY+"px"},l=e=>{e.preventDefault(),r(a()),n.style.left="0px",n.style.top="0px",n.style.display="none"};return e.addEventListener("mousedown",c),e.addEventListener("contextmenu",u),n.addEventListener("click",l),n.addEventListener("contextmenu",l),this.#l.set(e,{menu:n,clicks:i,listeners:{mousedown:c,contextmenu:u,click:l}}),[e=>{o=e.call(void 0,[...t])}]}static remove(e){const{menu:t,clicks:n,listeners:s}=this.#l.get(e)??{};if(!t||!n||!s)throw new Error("Elements are not being affected.");e.removeEventListener("mousedown",s.mousedown),e.removeEventListener("contextmenu",s.contextmenu),t.removeEventListener("click",s.click),t.removeEventListener("contextmenu",s.click),Array.from(n).forEach((([e,n])=>{t.querySelector("."+e).removeEventListener("click",n),t.querySelector("."+e).removeEventListener("contextmenu",n)})),t.remove()}}},"./src/Output.ts":(e,t,n)=>{n.r(t),n.d(t,{Output:()=>o});var s=n("./src/contextmenu.ts"),i=n("./src/Reified.ts"),r=n("./src/WiringManager.ts");class o extends i.Reified{element;#u=()=>{(0,s.queueNewContext)((e=>[{"delete-output":{label:"Delete output",callback:()=>{this.detach()}},"delete-connection":{label:"Delete connection",callback:()=>{r.WiringManager.wires=r.WiringManager.wires.filter((e=>e.to!==this.element))}}},...e]))};constructor({x:e,y:t}={x:0,y:0}){super(),this.element=i.html`<button class="board-output">O</button>`,this.move(e,t)}attach(){super.attach(),this.element.addEventListener("contextmenu",this.#u)}detach(){super.detach(),this.element.removeEventListener("contextmenu",this.#u),r.WiringManager.wires=r.WiringManager.wires.filter((e=>e.to!==this.element))}}},"./src/Reified.ts":(e,t,n)=>{function s(...e){const[t,...n]=e,s="string"==typeof t?t:t.reduce(((e,t,s)=>e+t+n[s]??""),"");return(new DOMParser).parseFromString(s,"text/html").body.childNodes[0]}function i(e){e.preventDefault()}n.r(t),n.d(t,{Reified:()=>r,html:()=>s,preventDefault:()=>i});class r{static root=document.querySelector(".reified-root");move(e,t){this.element.style.left=e+"px",this.element.style.top=t+"px"}attach(){r.root.append(this.element)}detach(){this.element.remove()}}},"./src/WiringManager.ts":(e,t,n)=>{n.r(t),n.d(t,{Wiring:()=>i,WiringManager:()=>r});var s=n("./src/canvas.ts");class i{from;to;constructor(e,t){this.from=e,this.to=t,new MutationObserver((()=>{t.classList.toggle("activated",e.classList.contains("activated"))})).observe(e,{attributeFilter:["class"],attributes:!0})}}class r{static wires=new Array;static render(){const e=(0,s.useCanvas)();this.wires.forEach((t=>{const n=t.from.getBoundingClientRect(),s=t.to.getBoundingClientRect();e.strokeStyle=t.from.classList.contains("activated")?"#ff2626":"#dedede",e.lineWidth=5,e.lineJoin="round",e.beginPath(),e.moveTo(n.x+n.width/2,n.y+n.height/2),e.lineTo(s.x+s.width/2,s.y+s.height/2),e.closePath(),e.stroke()}))}}},"./src/canvas.ts":(e,t,n)=>{n.r(t),n.d(t,{useCanvas:()=>i});const s=document.querySelector("canvas").getContext("2d");function i(){return s.canvas.width=window.innerWidth,s.canvas.height=window.innerHeight,s}},"./src/chips.ts":(e,t,n)=>{n.r(t),n.d(t,{AndGate:()=>i,Chip:()=>s,NotGate:()=>o,OrGate:()=>r});class s{name;inputs;outputs;constructor(e,t,n){this.name=e,this.inputs=t,this.outputs=n}evaluate(e){return this.output(e)}}class i extends s{constructor(){super("AND",2,1)}output([e,t]){return[e&&t]}}class r extends s{constructor(){super("OR",2,1)}output([e,t]){return[e||t]}}class o extends s{constructor(){super("NOT",1,1)}output([e]){return[!e]}}},"./src/contextmenu.ts":(e,t,n)=>{n.r(t),n.d(t,{queueNewContext:()=>r});var s=n("./src/MenuManager.ts"),i=n("./src/Reified.ts");const[r]=s.MenuManager.use(i.Reified.root,[{"insert-chip":{label:"Insert chip",callback:()=>{}}},{"new-input":{label:"New input",callback:()=>{}},"new-output":{label:"New output",callback:()=>{}}},{"new-chip":{label:"New chip from diagram",callback:()=>{}}},{"save-as":{label:"Save as file",callback:()=>{}}}])}},t={};function n(s){var i=t[s];if(void 0!==i)return i.exports;var r=t[s]={exports:{}};return e[s](r,r.exports,n),r.exports}n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};(()=>{n.r(s);var e=n("./src/chips.ts"),t=n("./src/Component.ts"),i=(n("./src/contextmenu.ts"),n("./src/DraggingManager.ts")),r=n("./src/Input.ts"),o=n("./src/Output.ts"),a=n("./src/WiringManager.ts");const c=new r.Input({x:100,y:100}),u=new r.Input({x:100,y:200}),l=new t.Component(new e.AndGate,{x:300,y:150}),d=new o.Output({x:500,y:150}),m=new Set([c,u,l,d]);i.DraggingManager.listen(),m.forEach((e=>{e.attach(),e instanceof t.Component&&i.DraggingManager.watch(e.element,e.element.querySelector(".component-name"))})),a.WiringManager.wires.push(new a.Wiring(c.element,l.inputs[0])),a.WiringManager.wires.push(new a.Wiring(u.element,l.inputs[1])),a.WiringManager.wires.push(new a.Wiring(l.outputs[0],d.element)),function e(){a.WiringManager.render(),requestAnimationFrame(e)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWpHLGdCQUFBLFNBRUE4RyxFQUFPN0ksU0FBUzRJLElBQ1pBLEVBQUV4SCxTQUVFd0gsYUFBYSxFQUFBL0osV0FDYixFQUFBa0QsZ0JBQUEsTUFBc0I2RyxFQUFFN0osUUFBUzZKLEVBQUU3SixRQUFRMkYsY0FBMkIsdUJBSTlFLEVBQUExRCxjQUFBLFdBQXlCLElBQUksRUFBQWdGLE9BQU9vQixFQUFFckksUUFBUzZKLEVBQUU1SixPQUFPLEtBQ3hELEVBQUFnQyxjQUFBLFdBQXlCLElBQUksRUFBQWdGLE9BQU9xQixFQUFFdEksUUFBUzZKLEVBQUU1SixPQUFPLEtBQ3hELEVBQUFnQyxjQUFBLFdBQXlCLElBQUksRUFBQWdGLE9BQU80QyxFQUFFM0osUUFBUSxHQUFJK0ksRUFBRWpKLFVBRXBELFNBQVVnSyxJQUNOLEVBQUEvSCxjQUFBLFNBRUFnSSxzQkFBc0JELEVBQ3pCLENBSkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Aa2Vsc255L2dhdGVzaW0vLi9zcmMvQ29tcG9uZW50LnRzIiwid2VicGFjazovL0BrZWxzbnkvZ2F0ZXNpbS8uL3NyYy9EcmFnZ2luZ01hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vQGtlbHNueS9nYXRlc2ltLy4vc3JjL0lucHV0LnRzIiwid2VicGFjazovL0BrZWxzbnkvZ2F0ZXNpbS8uL3NyYy9NZW51TWFuYWdlci50cyIsIndlYnBhY2s6Ly9Aa2Vsc255L2dhdGVzaW0vLi9zcmMvT3V0cHV0LnRzIiwid2VicGFjazovL0BrZWxzbnkvZ2F0ZXNpbS8uL3NyYy9SZWlmaWVkLnRzIiwid2VicGFjazovL0BrZWxzbnkvZ2F0ZXNpbS8uL3NyYy9XaXJpbmdNYW5hZ2VyLnRzIiwid2VicGFjazovL0BrZWxzbnkvZ2F0ZXNpbS8uL3NyYy9jYW52YXMudHMiLCJ3ZWJwYWNrOi8vQGtlbHNueS9nYXRlc2ltLy4vc3JjL2NoaXBzLnRzIiwid2VicGFjazovL0BrZWxzbnkvZ2F0ZXNpbS8uL3NyYy9jb250ZXh0bWVudS50cyIsIndlYnBhY2s6Ly9Aa2Vsc255L2dhdGVzaW0vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQGtlbHNueS9nYXRlc2ltL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9Aa2Vsc255L2dhdGVzaW0vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9Aa2Vsc255L2dhdGVzaW0vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9Aa2Vsc255L2dhdGVzaW0vLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hpcCB9IGZyb20gXCIuL2NoaXBzXCI7XG5pbXBvcnQgeyBxdWV1ZU5ld0NvbnRleHQgfSBmcm9tIFwiLi9jb250ZXh0bWVudVwiO1xuaW1wb3J0IHsgaHRtbCwgUmVpZmllZCB9IGZyb20gXCIuL1JlaWZpZWRcIjtcbmltcG9ydCB7IFdpcmluZ01hbmFnZXIgfSBmcm9tIFwiLi9XaXJpbmdNYW5hZ2VyXCI7XG5cbmV4cG9ydCBjbGFzcyBDb21wb25lbnQ8SSBleHRlbmRzIG51bWJlciwgTyBleHRlbmRzIG51bWJlcj4gZXh0ZW5kcyBSZWlmaWVkIHtcbiAgICByZWFkb25seSBlbGVtZW50O1xuXG4gICAgcmVhZG9ubHkgaW5wdXRzO1xuICAgIHJlYWRvbmx5IG91dHB1dHM7XG5cbiAgICByZWFkb25seSAjb2JzZXJ2ZXJzID0gbmV3IE1hcCgpO1xuICAgIHJlYWRvbmx5ICNjb250ZXh0bWVudXMgPSBuZXcgTWFwKCk7XG5cbiAgICByZWFkb25seSBjaGlwOiBDaGlwPEksIE8+O1xuXG4gICAgY29uc3RydWN0b3IoY2hpcDogQ2hpcDxJLCBPPiwgeyB4LCB5IH06IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfSA9IHsgeDogMCwgeTogMCB9KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5jaGlwID0gY2hpcDtcblxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBodG1sYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbXBvbmVudFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb21wb25lbnQtaW5wdXRzXCI+XG4gICAgICAgICAgICAgICAgICAgICR7QXJyYXkodGhpcy5jaGlwLmlucHV0cykuZmlsbCgnPGJ1dHRvbiBjbGFzcz1cImNvbXBvbmVudC1pbnB1dC1idXR0b25cIj5JPC9idXR0b24+Jykuam9pbihcIlwiKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImNvbXBvbmVudC1uYW1lXCI+JHt0aGlzLmNoaXAubmFtZX08L3A+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbXBvbmVudC1vdXRwdXRzXCI+XG4gICAgICAgICAgICAgICAgICAgICR7QXJyYXkodGhpcy5jaGlwLm91dHB1dHMpLmZpbGwoJzxidXR0b24gY2xhc3M9XCJjb21wb25lbnQtb3V0cHV0LWJ1dHRvblwiPk88L2J1dHRvbj4nKS5qb2luKFwiXCIpfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG5cbiAgICAgICAgLy8gYWRkIGN1c3RvbSBjb250ZXh0IG1lbnUgb24gY29tcG9uZW50LW5hbWVcblxuICAgICAgICB0aGlzLmlucHV0cyA9IEFycmF5LmZyb20odGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY29tcG9uZW50LWlucHV0LWJ1dHRvblwiKSk7XG4gICAgICAgIHRoaXMub3V0cHV0cyA9IEFycmF5LmZyb20odGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY29tcG9uZW50LW91dHB1dC1idXR0b25cIikpO1xuXG4gICAgICAgIHRoaXMuaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLiNvYnNlcnZlcnMuc2V0KFxuICAgICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3V0ID0gdGhpcy5jaGlwLmV2YWx1YXRlKHRoaXMuaW5wdXRzLm1hcCgoaSkgPT4gaS5jbGFzc0xpc3QuY29udGFpbnMoXCJhY3RpdmF0ZWRcIikpKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLm91dHB1dHMuZm9yRWFjaCgob3V0cHV0LCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQuY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2YXRlZFwiLCBvdXRbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy4jY29udGV4dG1lbnVzLnNldChpbnB1dCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXVlTmV3Q29udGV4dCgocHJldikgPT4gW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlbGV0ZS1jb25uZWN0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJEZWxldGUgY29ubmVjdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdpcmluZ01hbmFnZXIud2lyZXMgPSBXaXJpbmdNYW5hZ2VyLndpcmVzLmZpbHRlcigod2lyZSkgPT4gd2lyZS50byAhPT0gaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAuLi5wcmV2LFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMub3V0cHV0cy5mb3JFYWNoKChvdXRwdXQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuI2NvbnRleHRtZW51cy5zZXQob3V0cHV0LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcXVldWVOZXdDb250ZXh0KChwcmV2KSA9PiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVsZXRlLWNvbm5lY3Rpb25zXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJEZWxldGUgY29ubmVjdGlvbnNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaXJpbmdNYW5hZ2VyLndpcmVzID0gV2lyaW5nTWFuYWdlci53aXJlcy5maWx0ZXIoKHdpcmUpID0+IHdpcmUuZnJvbSAhPT0gb3V0cHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgLi4ucHJldixcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm1vdmUoeCwgeSk7XG4gICAgfVxuXG4gICAgYXR0YWNoKCkge1xuICAgICAgICBzdXBlci5hdHRhY2goKTtcblxuICAgICAgICB0aGlzLmlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4jb2JzZXJ2ZXJzLmdldChpbnB1dCkub2JzZXJ2ZShpbnB1dCwge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUZpbHRlcjogW1wiY2xhc3NcIl0sXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgdGhpcy4jY29udGV4dG1lbnVzLmdldChpbnB1dCkpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm91dHB1dHMuZm9yRWFjaCgob3V0cHV0KSA9PiB7XG4gICAgICAgICAgICBvdXRwdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIHRoaXMuI2NvbnRleHRtZW51cy5nZXQob3V0cHV0KSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGRldGFjaCgpIHtcbiAgICAgICAgc3VwZXIuZGV0YWNoKCk7XG5cbiAgICAgICAgdGhpcy4jb2JzZXJ2ZXJzLmZvckVhY2goKG8pID0+IG8uZGlzY29ubmVjdCgpKTtcblxuICAgICAgICB0aGlzLiNjb250ZXh0bWVudXMuZm9yRWFjaCgobGlzdGVuZXIsIGVsZW1lbnQpID0+IGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIGxpc3RlbmVyKSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIERyYWdnaW5nTWFuYWdlciB7XG4gICAgc3RhdGljICNkcmFnZ2VkOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcblxuICAgIHN0YXRpYyByZWFkb25seSAjbW91c2UgPSB7XG4gICAgICAgIHg6IC0xLFxuICAgICAgICB5OiAtMSxcbiAgICAgICAgb3g6IC0xLFxuICAgICAgICBveTogLTEsXG4gICAgICAgIGRvd246IGZhbHNlLFxuICAgIH07XG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgI3dhdGNoZWQgPSBuZXcgTWFwKCk7XG5cbiAgICBzdGF0aWMgd2F0Y2goZWxlbWVudDogSFRNTEVsZW1lbnQsIHRhcmdldCA9IGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5kYXRhc2V0LndhdGNoZWQgPSBcInRydWVcIjtcblxuICAgICAgICBjb25zdCBtb3VzZWRvd24gPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4jZHJhZ2dlZCA9IGVsZW1lbnQ7XG5cbiAgICAgICAgICAgIHRoaXMuI2RyYWdnZWQuZGF0YXNldC5kcmFnZ2VkID0gXCJ0cnVlXCI7XG5cbiAgICAgICAgICAgIHRoaXMuI2RyYWdnZWQuc3R5bGUuY3Vyc29yID0gXCJncmFiYmluZ1wiO1xuXG4gICAgICAgICAgICBjb25zdCByZWN0ID0gdGhpcy4jZHJhZ2dlZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgICAgY29uc3QgYm9keSA9IHRoaXMuI2RyYWdnZWQucGFyZW50RWxlbWVudD8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgPz8gbmV3IERPTVJlY3QoKTtcblxuICAgICAgICAgICAgdGhpcy4jbW91c2Uub3ggPSBlLmNsaWVudFggLSByZWN0LmxlZnQgKyBib2R5LmxlZnQ7XG4gICAgICAgICAgICB0aGlzLiNtb3VzZS5veSA9IGUuY2xpZW50WSAtIHJlY3QudG9wICsgYm9keS50b3A7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgbW91c2Vkb3duLCB7IGNhcHR1cmU6IHRydWUgfSk7XG5cbiAgICAgICAgdGhpcy4jd2F0Y2hlZC5zZXQodGFyZ2V0LCBtb3VzZWRvd24pO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JnZXQoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSB0aGlzLiN3YXRjaGVkLmdldChlbGVtZW50KTtcblxuICAgICAgICBpZiAoIWxpc3RlbmVyKSB0aHJvdyBuZXcgRXJyb3IoYEVsZW1lbnQgaXMgbm90IGN1cnJlbnRseSBiZWluZyB3YXRjaGVkLmApO1xuXG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmRhdGFzZXQud2F0Y2hlZDtcblxuICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgbGlzdGVuZXIsIHsgY2FwdHVyZTogdHJ1ZSB9KTtcblxuICAgICAgICB0aGlzLiN3YXRjaGVkLmRlbGV0ZShlbGVtZW50KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbGlzdGVuKCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy4jbW91c2Vtb3ZlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy4jbW91c2Vkb3duKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuI21vdXNldXApO1xuICAgIH1cblxuICAgIHN0YXRpYyBkZWFmZW4oKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLiNtb3VzZW1vdmUpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLiNtb3VzZWRvd24pO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy4jbW91c2V1cCk7XG4gICAgfVxuXG4gICAgc3RhdGljIHJlYWRvbmx5ICNtb3VzZW1vdmUgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICB0aGlzLiNtb3VzZS54ID0gZS5jbGllbnRYO1xuICAgICAgICB0aGlzLiNtb3VzZS55ID0gZS5jbGllbnRZO1xuXG4gICAgICAgIGlmICh0aGlzLiNkcmFnZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLiNkcmFnZ2VkLnN0eWxlLmxlZnQgPSB0aGlzLiNtb3VzZS54IC0gdGhpcy4jbW91c2Uub3ggKyBcInB4XCI7XG4gICAgICAgICAgICB0aGlzLiNkcmFnZ2VkLnN0eWxlLnRvcCA9IHRoaXMuI21vdXNlLnkgLSB0aGlzLiNtb3VzZS5veSArIFwicHhcIjtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgI21vdXNlZG93biA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMuI21vdXNlLmRvd24gPSB0cnVlO1xuICAgIH07XG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgI21vdXNldXAgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLiNkcmFnZ2VkKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxFbGVtZW50PignW2RhdGEtZHJhZ2dlZD1cInRydWVcIl0nKS5mb3JFYWNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGUuZGF0YXNldC5kcmFnZ2VkO1xuXG4gICAgICAgICAgICAgICAgZS5zdHlsZS5jdXJzb3IgPSBcIlwiO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLiNtb3VzZS5kb3duID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy4jbW91c2UueCA9IC0xO1xuICAgICAgICB0aGlzLiNtb3VzZS55ID0gLTE7XG5cbiAgICAgICAgdGhpcy4jbW91c2Uub3ggPSAtMTtcbiAgICAgICAgdGhpcy4jbW91c2Uub3kgPSAtMTtcblxuICAgICAgICB0aGlzLiNkcmFnZ2VkID0gdW5kZWZpbmVkO1xuICAgIH07XG59XG4iLCJpbXBvcnQgeyBxdWV1ZU5ld0NvbnRleHQgfSBmcm9tIFwiLi9jb250ZXh0bWVudVwiO1xuaW1wb3J0IHsgaHRtbCwgUmVpZmllZCB9IGZyb20gXCIuL1JlaWZpZWRcIjtcbmltcG9ydCB7IFdpcmluZ01hbmFnZXIgfSBmcm9tIFwiLi9XaXJpbmdNYW5hZ2VyXCI7XG5cbmV4cG9ydCBjbGFzcyBJbnB1dCBleHRlbmRzIFJlaWZpZWQge1xuICAgIHJlYWRvbmx5IGVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3Rvcih7IHgsIHkgfTogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9ID0geyB4OiAwLCB5OiAwIH0pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBodG1sYDxidXR0b24gY2xhc3M9XCJib2FyZC1pbnB1dFwiPkk8L2J1dHRvbj5gO1xuXG4gICAgICAgIHRoaXMubW92ZSh4LCB5KTtcbiAgICB9XG5cbiAgICByZWFkb25seSAjY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwiYWN0aXZhdGVkXCIpO1xuICAgIH07XG5cbiAgICByZWFkb25seSAjY29udGV4dG1lbnUgPSAoKSA9PiB7XG4gICAgICAgIHF1ZXVlTmV3Q29udGV4dCgocHJldikgPT4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiZGVsZXRlLWlucHV0XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiRGVsZXRlIGlucHV0XCIsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRldGFjaCgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJkZWxldGUtY29ubmVjdGlvbnNcIjoge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJEZWxldGUgY29ubmVjdGlvbnNcIixcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFdpcmluZ01hbmFnZXIud2lyZXMgPSBXaXJpbmdNYW5hZ2VyLndpcmVzLmZpbHRlcigod2lyZSkgPT4gd2lyZS5mcm9tICE9PSB0aGlzLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLi4ucHJldixcbiAgICAgICAgXSk7XG4gICAgfTtcblxuICAgIGF0dGFjaCgpIHtcbiAgICAgICAgc3VwZXIuYXR0YWNoKCk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLiNjbGljayk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgdGhpcy4jY29udGV4dG1lbnUpO1xuICAgIH1cblxuICAgIGRldGFjaCgpIHtcbiAgICAgICAgc3VwZXIuZGV0YWNoKCk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLiNjbGljayk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgdGhpcy4jY29udGV4dG1lbnUpO1xuXG4gICAgICAgIFdpcmluZ01hbmFnZXIud2lyZXMgPSBXaXJpbmdNYW5hZ2VyLndpcmVzLmZpbHRlcigod2lyZSkgPT4gd2lyZS5mcm9tICE9PSB0aGlzLmVsZW1lbnQpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tIFwiLi9SZWlmaWVkXCI7XG5cbmV4cG9ydCB0eXBlIE1lbnVNYW5hZ2VyQ29udGV4dCA9IHtcbiAgICBtZW51OiBIVE1MRWxlbWVudDtcbiAgICBjbGlja3M6IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+O1xuICAgIGxpc3RlbmVyczoge1xuICAgICAgICBtb3VzZWRvd246IChlOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuICAgICAgICBjb250ZXh0bWVudTogKGU6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG4gICAgICAgIGNsaWNrOiAoZTogTW91c2VFdmVudCkgPT4gdm9pZDtcbiAgICB9O1xufTtcblxuZXhwb3J0IHR5cGUgTWVudU1hbmFnZXJBY3Rpb25zID0gQXJyYXk8UmVjb3JkPHN0cmluZywgeyBsYWJlbDogc3RyaW5nOyBjYWxsYmFjazogKGU6IE1vdXNlRXZlbnQpID0+IHZvaWQgfT4+O1xuXG5leHBvcnQgY2xhc3MgTWVudU1hbmFnZXIge1xuICAgIHN0YXRpYyByZWFkb25seSAjZWxlbWVudHMgPSBuZXcgTWFwPEhUTUxFbGVtZW50LCBNZW51TWFuYWdlckNvbnRleHQ+KCk7XG5cbiAgICBzdGF0aWMgdXNlKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBhY3Rpb25zOiBNZW51TWFuYWdlckFjdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbWVudSA9IGh0bWxgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGV4dG1lbnVcIj5cbiAgICAgICAgICAgICAgICAke2FjdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgocmVjb3JkKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMocmVjb3JkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKFtuYW1lLCB7IGxhYmVsIH1dKSA9PiBgPGJ1dHRvbiBjbGFzcz1cIiR7bmFtZX1cIj4ke2xhYmVsfTwvYnV0dG9uPmApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oXCJcIilcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAuam9pbignPGRpdiBjbGFzcz1cImJyXCI+PC9kaXY+Jyl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcblxuICAgICAgICBjb25zdCBjbGlja3MgPSBuZXcgTWFwKCk7XG5cbiAgICAgICAgY29uc3Qgc2V0dXAgPSAoYWN0aW9uczogTWVudU1hbmFnZXJBY3Rpb25zKSA9PiB7XG4gICAgICAgICAgICBjbGlja3MuY2xlYXIoKTtcblxuICAgICAgICAgICAgbWVudS5pbm5lckhUTUwgPSBhY3Rpb25zXG4gICAgICAgICAgICAgICAgLm1hcCgocmVjb3JkKSA9PlxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhyZWNvcmQpXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKChbbmFtZSwgeyBsYWJlbCB9XSkgPT4gYDxidXR0b24gY2xhc3M9XCIke25hbWV9XCI+JHtsYWJlbH08L2J1dHRvbj5gKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oXCJcIilcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLmpvaW4oJzxkaXYgY2xhc3M9XCJiclwiPjwvZGl2PicpO1xuXG4gICAgICAgICAgICBhY3Rpb25zLmZvckVhY2goKHJlY29yZCkgPT4ge1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHJlY29yZCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsaWNrID0gcmVjb3JkW2tleV0uY2FsbGJhY2suYmluZCh1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIG1lbnUucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oXCIuXCIgKyBrZXkpIS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xpY2spO1xuICAgICAgICAgICAgICAgICAgICBtZW51LnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KFwiLlwiICsga2V5KSEuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIGNsaWNrKTtcblxuICAgICAgICAgICAgICAgICAgICBjbGlja3Muc2V0KGtleSwgY2xpY2tzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBjb250ZXh0OiBNZW51TWFuYWdlckFjdGlvbnMgfCB1bmRlZmluZWQ7XG5cbiAgICAgICAgY29uc3QgZ2V0QWN0aW9ucyA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aW9ucyA9IGNvbnRleHQ7XG5cbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbnM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhY3Rpb25zO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNldHVwKGdldEFjdGlvbnMoKSk7XG5cbiAgICAgICAgbWVudS5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcbiAgICAgICAgbWVudS5zdHlsZS50b3AgPSBcIjBweFwiO1xuICAgICAgICBtZW51LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1lbnUpO1xuXG4gICAgICAgIGNvbnN0IG1vdXNlZG93biA9ICgpID0+IHtcbiAgICAgICAgICAgIHNldHVwKGdldEFjdGlvbnMoKSk7XG5cbiAgICAgICAgICAgIG1lbnUuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG4gICAgICAgICAgICBtZW51LnN0eWxlLnRvcCA9IFwiMHB4XCI7XG4gICAgICAgICAgICBtZW51LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBjb250ZXh0bWVudSA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIHNldHVwKGdldEFjdGlvbnMoKSk7XG5cbiAgICAgICAgICAgIG1lbnUuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG4gICAgICAgICAgICBtZW51LnN0eWxlLmxlZnQgPSBlLmNsaWVudFggKyBcInB4XCI7XG4gICAgICAgICAgICBtZW51LnN0eWxlLnRvcCA9IGUuY2xpZW50WSArIFwicHhcIjtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBjbGljayA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIHNldHVwKGdldEFjdGlvbnMoKSk7XG5cbiAgICAgICAgICAgIG1lbnUuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG4gICAgICAgICAgICBtZW51LnN0eWxlLnRvcCA9IFwiMHB4XCI7XG4gICAgICAgICAgICBtZW51LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgfTtcblxuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgbW91c2Vkb3duKTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgY29udGV4dG1lbnUpO1xuICAgICAgICBtZW51LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbGljayk7XG4gICAgICAgIG1lbnUuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIGNsaWNrKTtcblxuICAgICAgICB0aGlzLiNlbGVtZW50cy5zZXQoZWxlbWVudCwgeyBtZW51LCBjbGlja3MsIGxpc3RlbmVyczogeyBtb3VzZWRvd24sIGNvbnRleHRtZW51LCBjbGljayB9IH0pO1xuXG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAobmV3Q29udGV4dDogKHByZXY6IE1lbnVNYW5hZ2VyQWN0aW9ucykgPT4gTWVudU1hbmFnZXJBY3Rpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgY29udGV4dCA9IG5ld0NvbnRleHQuY2FsbCh1bmRlZmluZWQsIFsuLi5hY3Rpb25zXSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIHN0YXRpYyByZW1vdmUoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgeyBtZW51LCBjbGlja3MsIGxpc3RlbmVycyB9ID0gdGhpcy4jZWxlbWVudHMuZ2V0KGVsZW1lbnQpID8/IHt9O1xuXG4gICAgICAgIGlmICghbWVudSB8fCAhY2xpY2tzIHx8ICFsaXN0ZW5lcnMpIHRocm93IG5ldyBFcnJvcihgRWxlbWVudHMgYXJlIG5vdCBiZWluZyBhZmZlY3RlZC5gKTtcblxuICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgbGlzdGVuZXJzLm1vdXNlZG93bik7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIGxpc3RlbmVycy5jb250ZXh0bWVudSk7XG4gICAgICAgIG1lbnUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGxpc3RlbmVycy5jbGljayk7XG4gICAgICAgIG1lbnUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIGxpc3RlbmVycy5jbGljayk7XG5cbiAgICAgICAgQXJyYXkuZnJvbShjbGlja3MpLmZvckVhY2goKFtrZXksIGxpc3RlbmVyXSkgPT4ge1xuICAgICAgICAgICAgbWVudS5xdWVyeVNlbGVjdG9yKFwiLlwiICsga2V5KSEucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIG1lbnUucXVlcnlTZWxlY3RvcihcIi5cIiArIGtleSkhLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCBsaXN0ZW5lcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1lbnUucmVtb3ZlKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgcXVldWVOZXdDb250ZXh0IH0gZnJvbSBcIi4vY29udGV4dG1lbnVcIjtcbmltcG9ydCB7IGh0bWwsIFJlaWZpZWQgfSBmcm9tIFwiLi9SZWlmaWVkXCI7XG5pbXBvcnQgeyBXaXJpbmdNYW5hZ2VyIH0gZnJvbSBcIi4vV2lyaW5nTWFuYWdlclwiO1xuXG5leHBvcnQgY2xhc3MgT3V0cHV0IGV4dGVuZHMgUmVpZmllZCB7XG4gICAgcmVhZG9ubHkgZWxlbWVudDtcblxuICAgIHJlYWRvbmx5ICNjb250ZXh0bWVudSA9ICgpID0+IHtcbiAgICAgICAgcXVldWVOZXdDb250ZXh0KChwcmV2KSA9PiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJkZWxldGUtb3V0cHV0XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiRGVsZXRlIG91dHB1dFwiLFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXRhY2goKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiZGVsZXRlLWNvbm5lY3Rpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJEZWxldGUgY29ubmVjdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgV2lyaW5nTWFuYWdlci53aXJlcyA9IFdpcmluZ01hbmFnZXIud2lyZXMuZmlsdGVyKCh3aXJlKSA9PiB3aXJlLnRvICE9PSB0aGlzLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLi4ucHJldixcbiAgICAgICAgXSk7XG4gICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKHsgeCwgeSB9OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0gPSB7IHg6IDAsIHk6IDAgfSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGh0bWxgPGJ1dHRvbiBjbGFzcz1cImJvYXJkLW91dHB1dFwiPk88L2J1dHRvbj5gO1xuXG4gICAgICAgIHRoaXMubW92ZSh4LCB5KTtcbiAgICB9XG5cbiAgICBhdHRhY2goKSB7XG4gICAgICAgIHN1cGVyLmF0dGFjaCgpO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgdGhpcy4jY29udGV4dG1lbnUpO1xuICAgIH1cblxuICAgIGRldGFjaCgpIHtcbiAgICAgICAgc3VwZXIuZGV0YWNoKCk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCB0aGlzLiNjb250ZXh0bWVudSk7XG5cbiAgICAgICAgV2lyaW5nTWFuYWdlci53aXJlcyA9IFdpcmluZ01hbmFnZXIud2lyZXMuZmlsdGVyKCh3aXJlKSA9PiB3aXJlLnRvICE9PSB0aGlzLmVsZW1lbnQpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBodG1sKHRlbXBsYXRlOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSwgLi4udmFsdWVzOiB1bmtub3duW10pOiBIVE1MRWxlbWVudDtcbmV4cG9ydCBmdW5jdGlvbiBodG1sKGh0bWw6IHN0cmluZyk6IEhUTUxFbGVtZW50O1xuZXhwb3J0IGZ1bmN0aW9uIGh0bWwoLi4uYXJnczogW3N0cmluZ10gfCBbVGVtcGxhdGVTdHJpbmdzQXJyYXksIC4uLnVua25vd25bXV0pIHtcbiAgICBjb25zdCBbdGVtcGxhdGUsIC4uLnZhbHVlc10gPSBhcmdzO1xuXG4gICAgY29uc3QgaHRtbCA9XG4gICAgICAgIHR5cGVvZiB0ZW1wbGF0ZSA9PT0gXCJzdHJpbmdcIiA/IHRlbXBsYXRlIDogdGVtcGxhdGUucmVkdWNlKChodG1sLCB0ZXh0LCBpKSA9PiBodG1sICsgdGV4dCArIHZhbHVlc1tpXSA/PyBcIlwiLCBcIlwiKTtcblxuICAgIHJldHVybiBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGh0bWwsIFwidGV4dC9odG1sXCIpLmJvZHkuY2hpbGROb2Rlc1swXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KGU6IEV2ZW50KSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVpZmllZCB7XG4gICAgc3RhdGljIHJlYWRvbmx5IHJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PihcIi5yZWlmaWVkLXJvb3RcIikhO1xuXG4gICAgYWJzdHJhY3QgcmVhZG9ubHkgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG5cbiAgICBtb3ZlKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5sZWZ0ID0geCArIFwicHhcIjtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRvcCA9IHkgKyBcInB4XCI7XG4gICAgfVxuXG4gICAgYXR0YWNoKCkge1xuICAgICAgICBSZWlmaWVkLnJvb3QuYXBwZW5kKHRoaXMuZWxlbWVudCk7XG4gICAgfVxuXG4gICAgZGV0YWNoKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgdXNlQ2FudmFzIH0gZnJvbSBcIi4vY2FudmFzXCI7XG5cbmV4cG9ydCBjbGFzcyBXaXJpbmcge1xuICAgIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGZyb206IEVsZW1lbnQsIHJlYWRvbmx5IHRvOiBFbGVtZW50KSB7XG4gICAgICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcbiAgICAgICAgICAgIHRvLmNsYXNzTGlzdC50b2dnbGUoXCJhY3RpdmF0ZWRcIiwgZnJvbS5jbGFzc0xpc3QuY29udGFpbnMoXCJhY3RpdmF0ZWRcIikpO1xuICAgICAgICB9KS5vYnNlcnZlKGZyb20sIHsgYXR0cmlidXRlRmlsdGVyOiBbXCJjbGFzc1wiXSwgYXR0cmlidXRlczogdHJ1ZSB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBXaXJpbmdNYW5hZ2VyIHtcbiAgICBzdGF0aWMgd2lyZXMgPSBuZXcgQXJyYXk8V2lyaW5nPigpO1xuXG4gICAgc3RhdGljIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdXNlQ2FudmFzKCk7XG5cbiAgICAgICAgdGhpcy53aXJlcy5mb3JFYWNoKCh3aXJlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmcm9tID0gd2lyZS5mcm9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgY29uc3QgdG8gPSB3aXJlLnRvLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSB3aXJlLmZyb20uY2xhc3NMaXN0LmNvbnRhaW5zKFwiYWN0aXZhdGVkXCIpID8gXCIjZmYyNjI2XCIgOiBcIiNkZWRlZGVcIjtcblxuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDU7XG5cbiAgICAgICAgICAgIGN0eC5saW5lSm9pbiA9IFwicm91bmRcIjtcblxuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhmcm9tLnggKyBmcm9tLndpZHRoIC8gMiwgZnJvbS55ICsgZnJvbS5oZWlnaHQgLyAyKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8odG8ueCArIHRvLndpZHRoIC8gMiwgdG8ueSArIHRvLmhlaWdodCAvIDIpO1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJjb25zdCBjdHggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiY2FudmFzXCIpIS5nZXRDb250ZXh0KFwiMmRcIikhO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2FudmFzKCkge1xuICAgIGN0eC5jYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBjdHguY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIHJldHVybiBjdHg7XG59XG4iLCJpbXBvcnQgeyBCb29sZWFuVHVwbGUgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2hpcDxJIGV4dGVuZHMgbnVtYmVyLCBPIGV4dGVuZHMgbnVtYmVyPiB7XG4gICAgcmVhZG9ubHkgbmFtZTtcblxuICAgIHJlYWRvbmx5IGlucHV0cztcbiAgICByZWFkb25seSBvdXRwdXRzO1xuXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCBpbnB1dHM6IEksIG91dHB1dHM6IE8pIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5pbnB1dHMgPSBpbnB1dHM7XG4gICAgICAgIHRoaXMub3V0cHV0cyA9IG91dHB1dHM7XG4gICAgfVxuXG4gICAgYWJzdHJhY3Qgb3V0cHV0KGlucHV0czogQm9vbGVhblR1cGxlPEk+KTogQm9vbGVhblR1cGxlPE8+O1xuXG4gICAgZXZhbHVhdGUoaW5wdXRzOiBib29sZWFuW10pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3V0cHV0KGlucHV0cyBhcyBCb29sZWFuVHVwbGU8SSwgW10+KSBhcyBib29sZWFuW107XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQW5kR2F0ZSBleHRlbmRzIENoaXA8MiwgMT4ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcIkFORFwiLCAyLCAxKTtcbiAgICB9XG5cbiAgICBvdXRwdXQoW2EsIGJdOiBbYm9vbGVhbiwgYm9vbGVhbl0pOiBbYm9vbGVhbl0ge1xuICAgICAgICByZXR1cm4gW2EgJiYgYl07XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgT3JHYXRlIGV4dGVuZHMgQ2hpcDwyLCAxPiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwiT1JcIiwgMiwgMSk7XG4gICAgfVxuXG4gICAgb3V0cHV0KFthLCBiXTogW2Jvb2xlYW4sIGJvb2xlYW5dKTogW2Jvb2xlYW5dIHtcbiAgICAgICAgcmV0dXJuIFthIHx8IGJdO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5vdEdhdGUgZXh0ZW5kcyBDaGlwPDEsIDE+IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJOT1RcIiwgMSwgMSk7XG4gICAgfVxuXG4gICAgb3V0cHV0KFtuXTogW2Jvb2xlYW5dKTogW2Jvb2xlYW5dIHtcbiAgICAgICAgcmV0dXJuIFshbl07XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTWVudU1hbmFnZXIgfSBmcm9tIFwiLi9NZW51TWFuYWdlclwiO1xuaW1wb3J0IHsgUmVpZmllZCB9IGZyb20gXCIuL1JlaWZpZWRcIjtcblxuZXhwb3J0IGNvbnN0IFtxdWV1ZU5ld0NvbnRleHRdID0gTWVudU1hbmFnZXIudXNlKFJlaWZpZWQucm9vdCwgW1xuICAgIHtcbiAgICAgICAgXCJpbnNlcnQtY2hpcFwiOiB7XG4gICAgICAgICAgICBsYWJlbDogXCJJbnNlcnQgY2hpcFwiLFxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHt9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgICBcIm5ldy1pbnB1dFwiOiB7XG4gICAgICAgICAgICBsYWJlbDogXCJOZXcgaW5wdXRcIixcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7fSxcbiAgICAgICAgfSxcbiAgICAgICAgXCJuZXctb3V0cHV0XCI6IHtcbiAgICAgICAgICAgIGxhYmVsOiBcIk5ldyBvdXRwdXRcIixcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7fSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJuZXctY2hpcFwiOiB7XG4gICAgICAgICAgICBsYWJlbDogXCJOZXcgY2hpcCBmcm9tIGRpYWdyYW1cIixcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7fSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzYXZlLWFzXCI6IHtcbiAgICAgICAgICAgIGxhYmVsOiBcIlNhdmUgYXMgZmlsZVwiLFxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHt9LFxuICAgICAgICB9LFxuICAgIH0sXG5dKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgQW5kR2F0ZSB9IGZyb20gXCIuL2NoaXBzXCI7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiLi9Db21wb25lbnRcIjtcbmltcG9ydCBcIi4vY29udGV4dG1lbnVcIjtcbmltcG9ydCB7IERyYWdnaW5nTWFuYWdlciB9IGZyb20gXCIuL0RyYWdnaW5nTWFuYWdlclwiO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tIFwiLi9JbnB1dFwiO1xuaW1wb3J0IHsgT3V0cHV0IH0gZnJvbSBcIi4vT3V0cHV0XCI7XG5pbXBvcnQgeyBXaXJpbmcsIFdpcmluZ01hbmFnZXIgfSBmcm9tIFwiLi9XaXJpbmdNYW5hZ2VyXCI7XG5cbmNvbnN0IGEgPSBuZXcgSW5wdXQoeyB4OiAxMDAsIHk6IDEwMCB9KTtcbmNvbnN0IGIgPSBuZXcgSW5wdXQoeyB4OiAxMDAsIHk6IDIwMCB9KTtcbmNvbnN0IGMgPSBuZXcgQ29tcG9uZW50KG5ldyBBbmRHYXRlKCksIHsgeDogMzAwLCB5OiAxNTAgfSk7XG5jb25zdCBkID0gbmV3IE91dHB1dCh7IHg6IDUwMCwgeTogMTUwIH0pO1xuXG5jb25zdCBhY3RpdmUgPSBuZXcgU2V0KFthLCBiLCBjLCBkXSk7XG5cbkRyYWdnaW5nTWFuYWdlci5saXN0ZW4oKTtcblxuYWN0aXZlLmZvckVhY2goKGMpID0+IHtcbiAgICBjLmF0dGFjaCgpO1xuXG4gICAgaWYgKGMgaW5zdGFuY2VvZiBDb21wb25lbnQpIHtcbiAgICAgICAgRHJhZ2dpbmdNYW5hZ2VyLndhdGNoKGMuZWxlbWVudCwgYy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KFwiLmNvbXBvbmVudC1uYW1lXCIpISk7XG4gICAgfVxufSk7XG5cbldpcmluZ01hbmFnZXIud2lyZXMucHVzaChuZXcgV2lyaW5nKGEuZWxlbWVudCwgYy5pbnB1dHNbMF0pKTtcbldpcmluZ01hbmFnZXIud2lyZXMucHVzaChuZXcgV2lyaW5nKGIuZWxlbWVudCwgYy5pbnB1dHNbMV0pKTtcbldpcmluZ01hbmFnZXIud2lyZXMucHVzaChuZXcgV2lyaW5nKGMub3V0cHV0c1swXSwgZC5lbGVtZW50KSk7XG5cbihmdW5jdGlvbiBsb29wKCkge1xuICAgIFdpcmluZ01hbmFnZXIucmVuZGVyKCk7XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG59KSgpO1xuIl0sIm5hbWVzIjpbIkNvbXBvbmVudCIsIlJlaWZpZWQiLCJlbGVtZW50IiwiaW5wdXRzIiwib3V0cHV0cyIsIk1hcCIsImNoaXAiLCJjb25zdHJ1Y3RvciIsIngiLCJ5Iiwic3VwZXIiLCJ0aGlzIiwiaHRtbCIsIkFycmF5IiwiZmlsbCIsImpvaW4iLCJuYW1lIiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiaW5wdXQiLCJzZXQiLCJNdXRhdGlvbk9ic2VydmVyIiwib3V0IiwiZXZhbHVhdGUiLCJtYXAiLCJpIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJvdXRwdXQiLCJ0b2dnbGUiLCJxdWV1ZU5ld0NvbnRleHQiLCJwcmV2IiwibGFiZWwiLCJjYWxsYmFjayIsIldpcmluZ01hbmFnZXIiLCJ3aXJlIiwidG8iLCJtb3ZlIiwiYXR0YWNoIiwiZ2V0Iiwib2JzZXJ2ZSIsImF0dHJpYnV0ZUZpbHRlciIsImF0dHJpYnV0ZXMiLCJhZGRFdmVudExpc3RlbmVyIiwiZGV0YWNoIiwibyIsImRpc2Nvbm5lY3QiLCJsaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJEcmFnZ2luZ01hbmFnZXIiLCJzdGF0aWMiLCJveCIsIm95IiwiZG93biIsInRhcmdldCIsImRhdGFzZXQiLCJ3YXRjaGVkIiwibW91c2Vkb3duIiwiZSIsImRyYWdnZWQiLCJzdHlsZSIsImN1cnNvciIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib2R5IiwicGFyZW50RWxlbWVudCIsIkRPTVJlY3QiLCJjbGllbnRYIiwibGVmdCIsImNsaWVudFkiLCJ0b3AiLCJjYXB0dXJlIiwiRXJyb3IiLCJkZWxldGUiLCJkb2N1bWVudCIsIndpbmRvdyIsInVuZGVmaW5lZCIsIklucHV0IiwiTWVudU1hbmFnZXIiLCJhY3Rpb25zIiwibWVudSIsInJlY29yZCIsIk9iamVjdCIsImVudHJpZXMiLCJjbGlja3MiLCJzZXR1cCIsImNsZWFyIiwiaW5uZXJIVE1MIiwia2V5cyIsImtleSIsImNsaWNrIiwiYmluZCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZXh0IiwiZ2V0QWN0aW9ucyIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsImNvbnRleHRtZW51IiwicHJldmVudERlZmF1bHQiLCJsaXN0ZW5lcnMiLCJuZXdDb250ZXh0IiwiY2FsbCIsInJlbW92ZSIsIk91dHB1dCIsImFyZ3MiLCJ0ZW1wbGF0ZSIsInZhbHVlcyIsInJlZHVjZSIsInRleHQiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJjaGlsZE5vZGVzIiwicm9vdCIsImFwcGVuZCIsIldpcmluZyIsImN0eCIsInVzZUNhbnZhcyIsIndpcmVzIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJsaW5lSm9pbiIsImJlZ2luUGF0aCIsIm1vdmVUbyIsIndpZHRoIiwiaGVpZ2h0IiwibGluZVRvIiwiY2xvc2VQYXRoIiwic3Ryb2tlIiwiZ2V0Q29udGV4dCIsImNhbnZhcyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIkNoaXAiLCJBbmRHYXRlIiwiYSIsImIiLCJPckdhdGUiLCJOb3RHYXRlIiwibiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsImMiLCJhY3RpdmUiLCJTZXQiLCJsb29wIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==