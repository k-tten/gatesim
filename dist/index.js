/*! For license information please see index.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/Component.ts":(e,t,n)=>{n.r(t),n.d(t,{Component:()=>o});var s=n("./src/contextmenu.ts"),i=n("./src/Reified.ts"),r=n("./src/WiringManager.ts");class o extends i.Reified{element;inputs;outputs;name;#e=new Map;#t=new Map;chip;constructor(e,{x:t,y:n}={x:0,y:0}){super(),this.chip=e,this.element=i.html`
            <div class="component">
                <div class="component-inputs">
                    ${Array(this.chip.inputs).fill('<button class="component-input-button">I</button>').join("")}
                </div>
                <p class="component-name">${this.chip.name}</p>
                <div class="component-outputs">
                    ${Array(this.chip.outputs).fill('<button class="component-output-button">O</button>').join("")}
                </div>
            </div>
        `,this.inputs=Array.from(this.element.querySelectorAll(".component-input-button")),this.outputs=Array.from(this.element.querySelectorAll(".component-output-button")),this.name=this.element.querySelector(".component-name"),this.inputs.forEach((e=>{this.#e.set(e,new MutationObserver((()=>{const e=this.chip.evaluate(this.inputs.map((e=>e.classList.contains("activated"))));this.outputs.forEach(((t,n)=>{t.classList.toggle("activated",e[n])}))}))),this.#t.set(e,(()=>{(0,s.queueNewContext)((t=>[{"delete-connection":{label:"Delete connection",callback:()=>{r.WiringManager.wires=r.WiringManager.wires.filter((t=>t.to!==e))}}},...t]))}))})),this.outputs.forEach((e=>{this.#t.set(e,(()=>{(0,s.queueNewContext)((t=>[{"delete-connections":{label:"Delete connections",callback:()=>{r.WiringManager.wires=r.WiringManager.wires.filter((t=>t.from!==e))}}},...t]))}))})),this.#t.set(this.name,(()=>{(0,s.queueNewContext)((e=>[{"delete-component":{label:"Delete component",callback:()=>{this.detach(),r.WiringManager.wires=r.WiringManager.wires.filter((e=>this.inputs.every((t=>e.to!==t))&&this.outputs.every((t=>e.from!==t))))}},"delete-connections":{label:"Delete connections",callback:()=>{r.WiringManager.wires=r.WiringManager.wires.filter((e=>this.inputs.every((t=>e.to!==t))&&this.outputs.every((t=>e.from!==t))))}}},...e]))})),this.move(t,n)}attach(){super.attach(),this.inputs.forEach((e=>{this.#e.get(e).observe(e,{attributeFilter:["class"],attributes:!0}),e.addEventListener("contextmenu",this.#t.get(e))})),this.outputs.forEach((e=>{e.addEventListener("contextmenu",this.#t.get(e))})),this.name.addEventListener("contextmenu",this.#t.get(this.name))}detach(){super.detach(),this.#e.forEach((e=>e.disconnect())),this.#t.forEach(((e,t)=>t.removeEventListener("contextmenu",e)))}}},"./src/DraggingManager.ts":(e,t,n)=>{n.r(t),n.d(t,{DraggingManager:()=>s});class s{static#n;static#s={x:-1,y:-1,ox:-1,oy:-1,down:!1};static#i=new Map;static watch(e,t=e){e.dataset.watched="true";const n=t=>{this.#n=e,this.#n.dataset.dragged="true",this.#n.style.cursor="grabbing";const n=this.#n.getBoundingClientRect(),s=this.#n.parentElement?.getBoundingClientRect()??new DOMRect;this.#s.ox=t.clientX-n.left+s.left,this.#s.oy=t.clientY-n.top+s.top};t.addEventListener("mousedown",n,{capture:!0}),this.#i.set(t,n)}static forget(e){const t=this.#i.get(e);if(!t)throw new Error("Element is not currently being watched.");delete e.dataset.watched,e.removeEventListener("mousedown",t,{capture:!0}),this.#i.delete(e)}static listen(){document.body.addEventListener("mousemove",this.#r),window.addEventListener("mousedown",this.#o),window.addEventListener("mouseup",this.#a)}static deafen(){document.body.removeEventListener("mousemove",this.#r),window.removeEventListener("mousedown",this.#o),window.removeEventListener("mouseup",this.#a)}static#r=e=>{this.#s.x=e.clientX,this.#s.y=e.clientY,this.#n&&(this.#n.style.left=this.#s.x-this.#s.ox+"px",this.#n.style.top=this.#s.y-this.#s.oy+"px")};static#o=e=>{this.#s.down=!0};static#a=()=>{this.#n&&document.querySelectorAll('[data-dragged="true"]').forEach((e=>{delete e.dataset.dragged,e.style.cursor=""})),this.#s.down=!1,this.#s.x=-1,this.#s.y=-1,this.#s.ox=-1,this.#s.oy=-1,this.#n=void 0}}},"./src/Input.ts":(e,t,n)=>{n.r(t),n.d(t,{Input:()=>o});var s=n("./src/contextmenu.ts"),i=n("./src/Reified.ts"),r=n("./src/WiringManager.ts");class o extends i.Reified{element;constructor({x:e,y:t}={x:0,y:0}){super(),this.element=i.html`<button class="board-input">I</button>`,this.move(e,t)}#c=()=>{this.element.classList.toggle("activated")};#u=()=>{(0,s.queueNewContext)((e=>[{"delete-input":{label:"Delete input",callback:()=>{this.detach()}},"delete-connections":{label:"Delete connections",callback:()=>{r.WiringManager.wires=r.WiringManager.wires.filter((e=>e.from!==this.element))}}},...e]))};attach(){super.attach(),this.element.addEventListener("click",this.#c),this.element.addEventListener("contextmenu",this.#u)}detach(){super.detach(),this.element.removeEventListener("click",this.#c),this.element.removeEventListener("contextmenu",this.#u),r.WiringManager.wires=r.WiringManager.wires.filter((e=>e.from!==this.element))}}},"./src/MenuManager.ts":(e,t,n)=>{n.r(t),n.d(t,{MenuManager:()=>i});var s=n("./src/Reified.ts");class i{static#l=new Map;static use(e,t){const n=s.html`
            <div class="contextmenu">
                ${t.map((e=>Object.entries(e).map((([e,{label:t}])=>`<button class="${e}">${t}</button>`)).join(""))).join('<div class="br"></div>')}
            </div>
        `,i=new Map,r=e=>{i.clear(),n.innerHTML=e.map((e=>Object.entries(e).map((([e,{label:t}])=>`<button class="${e}">${t}</button>`)).join(""))).join('<div class="br"></div>'),e.forEach((e=>{Object.keys(e).forEach((t=>{const s=e[t].callback.bind(void 0);n.querySelector("."+t).addEventListener("click",s),n.querySelector("."+t).addEventListener("contextmenu",s),i.set(t,i)}))}))};let o;const a=()=>{if(o){const e=o;return o=void 0,e}return t};r(a()),n.style.left="0px",n.style.top="0px",n.style.display="none",document.body.appendChild(n);const c=()=>{r(a()),n.style.left="0px",n.style.top="0px",n.style.display="none"},u=e=>{e.preventDefault(),r(a()),n.style.display="",n.style.left=e.clientX+"px",n.style.top=e.clientY+"px"},l=e=>{e.preventDefault(),r(a()),n.style.left="0px",n.style.top="0px",n.style.display="none"};return e.addEventListener("mousedown",c),e.addEventListener("contextmenu",u),n.addEventListener("click",l),n.addEventListener("contextmenu",l),this.#l.set(e,{menu:n,clicks:i,listeners:{mousedown:c,contextmenu:u,click:l}}),[e=>{o=e.call(void 0,[...t])}]}static remove(e){const{menu:t,clicks:n,listeners:s}=this.#l.get(e)??{};if(!t||!n||!s)throw new Error("Elements are not being affected.");e.removeEventListener("mousedown",s.mousedown),e.removeEventListener("contextmenu",s.contextmenu),t.removeEventListener("click",s.click),t.removeEventListener("contextmenu",s.click),Array.from(n).forEach((([e,n])=>{t.querySelector("."+e).removeEventListener("click",n),t.querySelector("."+e).removeEventListener("contextmenu",n)})),t.remove()}}},"./src/Output.ts":(e,t,n)=>{n.r(t),n.d(t,{Output:()=>o});var s=n("./src/contextmenu.ts"),i=n("./src/Reified.ts"),r=n("./src/WiringManager.ts");class o extends i.Reified{element;#u=()=>{(0,s.queueNewContext)((e=>[{"delete-output":{label:"Delete output",callback:()=>{this.detach()}},"delete-connection":{label:"Delete connection",callback:()=>{r.WiringManager.wires=r.WiringManager.wires.filter((e=>e.to!==this.element))}}},...e]))};constructor({x:e,y:t}={x:0,y:0}){super(),this.element=i.html`<button class="board-output">O</button>`,this.move(e,t)}attach(){super.attach(),this.element.addEventListener("contextmenu",this.#u)}detach(){super.detach(),this.element.removeEventListener("contextmenu",this.#u),r.WiringManager.wires=r.WiringManager.wires.filter((e=>e.to!==this.element))}}},"./src/Reified.ts":(e,t,n)=>{function s(...e){const[t,...n]=e,s="string"==typeof t?t:t.reduce(((e,t,s)=>e+t+n[s]??""),"");return(new DOMParser).parseFromString(s,"text/html").body.childNodes[0]}function i(e){e.preventDefault()}n.r(t),n.d(t,{Reified:()=>r,html:()=>s,preventDefault:()=>i});class r{static active=new Set;static root=document.querySelector(".reified-root");move(e,t){this.element.style.left=e+"px",this.element.style.top=t+"px"}attach(){r.active.add(this),r.root.append(this.element)}detach(){r.active.delete(this),this.element.remove()}}},"./src/WiringManager.ts":(e,t,n)=>{n.r(t),n.d(t,{Wiring:()=>i,WiringManager:()=>r});var s=n("./src/canvas.ts");class i{from;to;constructor(e,t){this.from=e,this.to=t,new MutationObserver((()=>{t.classList.toggle("activated",e.classList.contains("activated"))})).observe(e,{attributeFilter:["class"],attributes:!0})}}class r{static wires=new Array;static render(){const e=(0,s.useCanvas)();this.wires.forEach((t=>{const n=t.from.getBoundingClientRect(),s=t.to.getBoundingClientRect();e.strokeStyle=t.from.classList.contains("activated")?"#ff2626":"#dedede",e.lineWidth=5,e.lineJoin="round",e.beginPath(),e.moveTo(n.x+n.width/2,n.y+n.height/2),e.lineTo(s.x+s.width/2,s.y+s.height/2),e.closePath(),e.stroke()}))}}},"./src/canvas.ts":(e,t,n)=>{n.r(t),n.d(t,{useCanvas:()=>i});const s=document.querySelector("canvas").getContext("2d");function i(){return s.canvas.width=window.innerWidth,s.canvas.height=window.innerHeight,s}},"./src/chips.ts":(e,t,n)=>{n.r(t),n.d(t,{AndGate:()=>i,Chip:()=>s,NotGate:()=>o,OrGate:()=>r});class s{name;inputs;outputs;constructor(e,t,n){this.name=e,this.inputs=t,this.outputs=n}evaluate(e){return this.output(e)}}class i extends s{constructor(){super("AND",2,1)}output([e,t]){return[e&&t]}}class r extends s{constructor(){super("OR",2,1)}output([e,t]){return[e||t]}}class o extends s{constructor(){super("NOT",1,1)}output([e]){return[!e]}}},"./src/contextmenu.ts":(e,t,n)=>{n.r(t),n.d(t,{queueNewContext:()=>r});var s=n("./src/MenuManager.ts"),i=n("./src/Reified.ts");const[r]=s.MenuManager.use(i.Reified.root,[{"insert-chip":{label:"Insert chip",callback:()=>{}}},{"new-input":{label:"New input",callback:()=>{}},"new-output":{label:"New output",callback:()=>{}}},{"new-chip":{label:"New chip from diagram",callback:()=>{}}},{"save-as":{label:"Save as file",callback:()=>{}},"import-from":{label:"Import from file",callback:()=>{}}}])}},t={};function n(s){var i=t[s];if(void 0!==i)return i.exports;var r=t[s]={exports:{}};return e[s](r,r.exports,n),r.exports}n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};(()=>{n.r(s);var e=n("./src/chips.ts"),t=n("./src/Component.ts"),i=(n("./src/contextmenu.ts"),n("./src/DraggingManager.ts")),r=n("./src/Input.ts"),o=n("./src/Output.ts"),a=n("./src/WiringManager.ts");const c=new r.Input({x:100,y:100}),u=new r.Input({x:100,y:200}),l=new t.Component(new e.AndGate,{x:300,y:150}),d=new o.Output({x:500,y:150});[c,u,l,d].forEach((e=>{e.attach(),e instanceof t.Component&&i.DraggingManager.watch(e.element,e.element.querySelector(".component-name"))})),i.DraggingManager.listen(),a.WiringManager.wires.push(new a.Wiring(c.element,l.inputs[0])),a.WiringManager.wires.push(new a.Wiring(u.element,l.inputs[1])),a.WiringManager.wires.push(new a.Wiring(l.outputs[0],d.element)),function e(){a.WiringManager.render(),requestAnimationFrame(e)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,